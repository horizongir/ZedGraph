{
  "api/ZedGraph.AlignH.html": {
    "href": "api/ZedGraph.AlignH.html",
    "title": "Enum AlignH",
    "keywords": "Enum AlignH Enumeration type for the different horizontal text alignment options Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public enum AlignH Fields Name Description Center Position the text so that its center is aligned (horizontally) with the specified X,Y location. Used by the Draw(Graphics, PaneBase, String, Single, Single, AlignH, AlignV, Single) method. Left Position the text so that its left edge is aligned with the specified X,Y location. Used by the Draw(Graphics, PaneBase, String, Single, Single, AlignH, AlignV, Single) method. Right Position the text so that its right edge is aligned with the specified X,Y location. Used by the Draw(Graphics, PaneBase, String, Single, Single, AlignH, AlignV, Single) method. See Also FontSpec"
  },
  "api/ZedGraph.AlignP.html": {
    "href": "api/ZedGraph.AlignP.html",
    "title": "Enum AlignP",
    "keywords": "Enum AlignP Enumeration type for the different proximal alignment options Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public enum AlignP Fields Name Description Center Position the text so that its center is aligned with the reference object or point. Used by the Align method to align text to the axis. Inside Position the text so that its \"inside\" edge (the edge that is nearest to the alignment reference point or object) is aligned. Used by the Align method to align text to the axis. Outside Position the text so that its right edge (the edge that is farthest from the alignment reference point or object) is aligned. Used by the Align method to align text to the axis. See Also FontSpec Align"
  },
  "api/ZedGraph.AlignV.html": {
    "href": "api/ZedGraph.AlignV.html",
    "title": "Enum AlignV",
    "keywords": "Enum AlignV Enumeration type for the different vertical text alignment options Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public enum AlignV Fields Name Description Bottom Position the text so that its bottom edge is aligned with the specified X,Y location. Used by the Draw(Graphics, PaneBase, String, Single, Single, AlignH, AlignV, Single) method. Center Position the text so that its center is aligned (vertically) with the specified X,Y location. Used by the Draw(Graphics, PaneBase, String, Single, Single, AlignH, AlignV, Single) method. Top Position the text so that its top edge is aligned with the specified X,Y location. Used by the Draw(Graphics, PaneBase, String, Single, Single, AlignH, AlignV, Single) method."
  },
  "api/ZedGraph.ArrowObj.Default.html": {
    "href": "api/ZedGraph.ArrowObj.Default.html",
    "title": "Struct ArrowObj.Default",
    "keywords": "Struct ArrowObj.Default A simple struct that defines the default property values for the ArrowObj class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source IsArrowHead The default display mode for the ArrowObj item arrowhead ( IsArrowHead property). true to show the arrowhead, false to hide it. Declaration public static bool IsArrowHead Field Value Type Description Boolean | Improve this Doc View Source Size The default size for the ArrowObj item arrowhead ( Size property). Units are in points (1/72 inch). Declaration public static float Size Field Value Type Description Single"
  },
  "api/ZedGraph.ArrowObj.html": {
    "href": "api/ZedGraph.ArrowObj.html",
    "title": "Class ArrowObj",
    "keywords": "Class ArrowObj A class that represents a graphic arrow or line object on the graph. A list of ArrowObj objects is maintained by the GraphObjList collection class. Inheritance Object GraphObj LineObj ArrowObj Implements ICloneable ISerializable Inherited Members LineObj._line LineObj.Line LineObj.schema2 LineObj.PointInBox(PointF, PaneBase, Graphics, Single) LineObj.GetCoords(PaneBase, Graphics, Single, String, String) GraphObj._location GraphObj._isVisible GraphObj._isClippedToChartRect GraphObj.Tag GraphObj.Location GraphObj.ZOrder GraphObj.IsVisible GraphObj.IsClippedToChartRect GraphObj.Link GraphObj.IsInFrontOfData GraphObj.schema Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class ArrowObj : LineObj, ICloneable, ISerializable Constructors | Improve this Doc View Source ArrowObj() Default constructor -- places the ArrowObj at location (0,0) to (1,1). All other values are defaulted. Declaration public ArrowObj() | Improve this Doc View Source ArrowObj(Double, Double, Double, Double) A constructor that allows only the position of the arrow to be pre-specified. All other properties are set to default values Declaration public ArrowObj(double x1, double y1, double x2, double y2) Parameters Type Name Description Double x1 The x position of the starting point that defines the ArrowObj . The units of this position are specified by the CoordinateFrame property. Double y1 The y position of the starting point that defines the ArrowObj . The units of this position are specified by the CoordinateFrame property. Double x2 The x position of the ending point that defines the ArrowObj . The units of this position are specified by the CoordinateFrame property. Double y2 The y position of the ending point that defines the ArrowObj . The units of this position are specified by the CoordinateFrame property. | Improve this Doc View Source ArrowObj(Color, Single, Double, Double, Double, Double) A constructor that allows the position, color, and size of the ArrowObj to be pre-specified. Declaration public ArrowObj(Color color, float size, double x1, double y1, double x2, double y2) Parameters Type Name Description Color color An arbitrary Color specification for the arrow Single size The size of the arrowhead, measured in points. Double x1 The x position of the starting point that defines the arrow. The units of this position are specified by the CoordinateFrame property. Double y1 The y position of the starting point that defines the arrow. The units of this position are specified by the CoordinateFrame property. Double x2 The x position of the ending point that defines the arrow. The units of this position are specified by the CoordinateFrame property. Double y2 The y position of the ending point that defines the arrow. The units of this position are specified by the CoordinateFrame property. | Improve this Doc View Source ArrowObj(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected ArrowObj(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source ArrowObj(ArrowObj) The Copy Constructor Declaration public ArrowObj(ArrowObj rhs) Parameters Type Name Description ArrowObj rhs The ArrowObj object from which to copy Fields | Improve this Doc View Source schema3 Current schema value that defines the version of the serialized file Declaration public const int schema3 = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source IsArrowHead Determines whether or not to draw an arrowhead Declaration public bool IsArrowHead { get; set; } Property Value Type Description Boolean true to show the arrowhead, false to show the line segment only See Also IsArrowHead | Improve this Doc View Source Size The size of the arrowhead. Declaration public float Size { get; set; } Property Value Type Description Single The size is defined in points (1/72 inch) Remarks The display of the arrowhead can be enabled or disabled with the IsArrowHead property. See Also Size Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public ArrowObj Clone() Returns Type Description ArrowObj A new, independent copy of this class | Improve this Doc View Source Draw(Graphics, PaneBase, Single) Render this object to the specified Graphics device. Declaration public override void Draw(Graphics g, PaneBase pane, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. PaneBase pane A reference to the PaneBase object that is the parent or owner of this object. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Overrides LineObj.Draw(Graphics, PaneBase, Single) Remarks This method is normally only called by the Draw method of the parent GraphObjList collection object. | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides LineObj.GetObjectData(SerializationInfo, StreamingContext) Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.Axis.Default.html": {
    "href": "api/ZedGraph.Axis.Default.html",
    "title": "Struct Axis.Default",
    "keywords": "Struct Axis.Default A simple struct that defines the default property values for the Axis class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source AxisGap The default size for the gap between multiple axes ( AxisGap property). Units are in points (1/72 inch). Declaration public static float AxisGap Field Value Type Description Single | Improve this Doc View Source BorderColor The default color for the Axis itself ( Color property). This color only affects the the axis border. Declaration public static Color BorderColor Field Value Type Description Color | Improve this Doc View Source Color The default color for the axis segment. Declaration public static Color Color Field Value Type Description Color | Improve this Doc View Source IsAxisSegmentVisible The default value for IsAxisSegmentVisible , which determines whether or not the scale segment itself is visible Declaration public static bool IsAxisSegmentVisible Field Value Type Description Boolean | Improve this Doc View Source MinSpace The default setting for the axis space allocation. This term, expressed in points (1/72 inch) and scaled according to CalcScaleFactor() for the GraphPane , determines the minimum amount of space an axis must have between the Rect and the Rect . This minimum space applies whether IsVisible is true or false. Declaration public static float MinSpace Field Value Type Description Single | Improve this Doc View Source TitleFillBrush The default custom brush for filling in the Title text background (see Brush property). Declaration public static Brush TitleFillBrush Field Value Type Description Brush | Improve this Doc View Source TitleFillColor The default color for filling in the Title text background (see Color property). Declaration public static Color TitleFillColor Field Value Type Description Color | Improve this Doc View Source TitleFillType The default fill mode for filling in the Title text background (see Type property). Declaration public static FillType TitleFillType Field Value Type Description FillType | Improve this Doc View Source TitleFontBold The default font bold mode for the Axis Title text font specification FontSpec ( IsBold property). true for a bold typeface, false otherwise. Declaration public static bool TitleFontBold Field Value Type Description Boolean | Improve this Doc View Source TitleFontColor The default font color for the Axis Title text font specification FontSpec ( FontColor property). Declaration public static Color TitleFontColor Field Value Type Description Color | Improve this Doc View Source TitleFontFamily The default font family for the Axis Title text font specification FontSpec ( Family property). Declaration public static string TitleFontFamily Field Value Type Description String | Improve this Doc View Source TitleFontItalic The default font italic mode for the Axis Title text font specification FontSpec ( IsItalic property). true for an italic typeface, false otherwise. Declaration public static bool TitleFontItalic Field Value Type Description Boolean | Improve this Doc View Source TitleFontSize The default font size for the Axis Title text font specification FontSpec ( Size property). Units are in points (1/72 inch). Declaration public static float TitleFontSize Field Value Type Description Single | Improve this Doc View Source TitleFontUnderline The default font underline mode for the Axis Title text font specification FontSpec ( IsUnderline property). true for an underlined typeface, false otherwise. Declaration public static bool TitleFontUnderline Field Value Type Description Boolean | Improve this Doc View Source TitleGap The default setting for the gap between the scale labels and the axis title. Declaration public static float TitleGap Field Value Type Description Single | Improve this Doc View Source Type The default setting for the Axis scale axis type ( Type property). This value is set as per the AxisType enumeration Declaration public static AxisType Type Field Value Type Description AxisType"
  },
  "api/ZedGraph.Axis.html": {
    "href": "api/ZedGraph.Axis.html",
    "title": "Class Axis",
    "keywords": "Class Axis The Axis class is an abstract base class that encompasses all properties and methods required to define a graph Axis. Inheritance Object Axis X2Axis XAxis Y2Axis YAxis Implements ISerializable ICloneable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public abstract class Axis : ISerializable, ICloneable Remarks This class is inherited by the XAxis , YAxis , and Y2Axis classes to define specific characteristics for those types. Constructors | Improve this Doc View Source Axis() Default constructor for Axis that sets all axis properties to default values as defined in the Axis.Default class. Declaration public Axis() | Improve this Doc View Source Axis(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected Axis(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source Axis(String) Constructor for Axis that sets all axis properties to default values as defined in the Axis.Default class, except for the Title . Declaration public Axis(string title) Parameters Type Name Description String title A string containing the axis title | Improve this Doc View Source Axis(Axis) The Copy Constructor. Declaration public Axis(Axis rhs) Parameters Type Name Description Axis rhs The Axis object from which to copy Fields | Improve this Doc View Source _isAxisSegmentVisible Private fields for the Axis attributes. Use the public properties IsVisible , IsAxisSegmentVisible for access to these values. Declaration [CLSCompliant(false)] protected bool _isAxisSegmentVisible Field Value Type Description Boolean | Improve this Doc View Source _isVisible Private fields for the Axis attributes. Use the public properties IsVisible , IsAxisSegmentVisible for access to these values. Declaration [CLSCompliant(false)] protected bool _isVisible Field Value Type Description Boolean | Improve this Doc View Source _title Private field for the Axis title string. Use the public property Title for access to this value. Declaration [CLSCompliant(false)] protected AxisLabel _title Field Value Type Description AxisLabel | Improve this Doc View Source schema Current schema value that defines the version of the serialized file Declaration public const int schema = 10 Field Value Type Description Int32 | Improve this Doc View Source Tag A tag object for use by the user. This can be used to store additional information associated with the Axis . ZedGraph does not use this value for any purpose. Declaration public object Tag Field Value Type Description Object Remarks Note that, if you are going to Serialize ZedGraph data, then any type that you store in Tag must be a serializable type (or it will cause an exception). Properties | Improve this Doc View Source AxisGap The size of the gap between multiple axes (see YAxisList and Y2AxisList ). Declaration public float AxisGap { get; set; } Property Value Type Description Single The axis gap is measured in points (1/72 inch) Remarks This size will be scaled according to the CalcScaleFactor() for the GraphPane See Also AxisGap | Improve this Doc View Source Color The color to use for drawing this Axis . Declaration public Color Color { get; set; } Property Value Type Description Color The color is defined using the Color class Remarks This affects only the axis segment (see IsAxisSegmentVisible ), since the Title , Scale , MajorTic , MinorTic , MajorGrid , and MinorGrid all have their own color specification. See Also Color IsVisible | Improve this Doc View Source Cross Gets or sets the scale value at which this axis should cross the \"other\" axis. Declaration public double Cross { get; set; } Property Value Type Description Double The value is defined in user scale units Remarks This property allows the axis to be shifted away from its default location. For example, for a graph with an X range from -100 to +100, the Y Axis can be located at the X=0 value rather than the left edge of the ChartRect. This value can be set automatically based on the state of CrossAuto . If this value is set manually, then CrossAuto will also be set to false. The \"other\" axis is the axis the handles the second dimension for the graph. For the XAxis, the \"other\" axis is the YAxis. For the YAxis or Y2Axis, the \"other\" axis is the XAxis. See Also Min Max MajorStep CrossAuto | Improve this Doc View Source CrossAuto Gets or sets a value that determines whether or not the Cross value is set automatically. Declaration public bool CrossAuto { get; set; } Property Value Type Description Boolean Set to true to have ZedGraph put the axis in the default location, or false to specify the axis location manually with a Cross value. See Also Min Max MajorStep Cross | Improve this Doc View Source IsAxisSegmentVisible Gets or sets a property that determines whether or not the axis segment (the line that represents the axis itself) is drawn. Declaration public bool IsAxisSegmentVisible { get; set; } Property Value Type Description Boolean Remarks Under normal circumstances, this value won't affect the appearance of the display because the Axis segment is overlain by the Axis border (see Border ). However, when the border is not visible, or when CrossAuto is set to false, this value will make a difference. | Improve this Doc View Source IsVisible This property determines whether or not the Axis is shown. Declaration public bool IsVisible { get; set; } Property Value Type Description Boolean true to show the axis, false to disable all drawing of this axis Remarks Note that even if the axis is not visible, it can still be actively used to draw curves on a graph, it will just be invisible to the user See Also IsVisible IsVisible IsVisible IsVisible | Improve this Doc View Source MajorGrid Gets a reference to the MajorGrid class that contains the properties of the major grid. Declaration public MajorGrid MajorGrid { get; } Property Value Type Description MajorGrid | Improve this Doc View Source MajorTic Gets a reference to the MajorTic class instance for this Axis . This class stores all the major tic settings. Declaration public MajorTic MajorTic { get; } Property Value Type Description MajorTic | Improve this Doc View Source MinorGrid Gets a reference to the MinorGrid class that contains the properties of the minor grid. Declaration public MinorGrid MinorGrid { get; } Property Value Type Description MinorGrid | Improve this Doc View Source MinorTic Gets a reference to the MinorTic class instance for this Axis . This class stores all the minor tic settings. Declaration public MinorTic MinorTic { get; } Property Value Type Description MinorTic | Improve this Doc View Source MinSpace Gets or sets the minimum axis space allocation. Declaration public float MinSpace { get; set; } Property Value Type Description Single Remarks This term, expressed in points (1/72 inch) and scaled according to CalcScaleFactor() for the GraphPane , determines the minimum amount of space an axis must have between the Rect and the Rect . This minimum space applies whether IsVisible is true or false. | Improve this Doc View Source Scale Gets the Scale instance associated with this Axis . Declaration public Scale Scale { get; } Property Value Type Description Scale | Improve this Doc View Source Title Gets or sets the Label class that contains the title of this Axis . Declaration public AxisLabel Title { get; set; } Property Value Type Description AxisLabel the title is a string value Remarks The title normally shows the basis and dimensions of the scale range, such as \"Time (Years)\". The title is only shown if the IsVisible property is set to true. If the Title text is empty, then no title is shown, and no space is \"reserved\" for the title on the graph. See Also IsOmitMag | Improve this Doc View Source Type Gets or sets the AxisType for this Axis . Declaration public AxisType Type { get; set; } Property Value Type Description AxisType Remarks The type can be either Linear , Log , Date , or Text . See Also IsLog IsText IsOrdinal IsDate IsReverse Methods | Improve this Doc View Source CalcSpace(Graphics, GraphPane, Single, out Single) Calculate the space required (pixels) for this Axis object. Declaration public float CalcSpace(Graphics g, GraphPane pane, float scaleFactor, out float fixedSpace) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Single fixedSpace The amount of space (pixels) at the edge of the ChartRect that is always required for this axis, even if the axis is shifted by the Cross value. Returns Type Description Single Returns the space, in pixels, required for this axis (between the rect and ChartRect) Remarks This is the total space (vertical space for the X axis, horizontal space for the Y axes) required to contain the axis. If Cross is zero, then this space will be the space required between the Rect and the Rect . This method sets the internal values of ZedGraph.Axis._tmpSpace for use by the CalcChartRect(Graphics) method. | Improve this Doc View Source Draw(Graphics, GraphPane, Single, Single) Do all rendering associated with this Axis to the specified Graphics device. Declaration public void Draw(Graphics g, GraphPane pane, float scaleFactor, float shiftPos) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Single shiftPos The number of pixels to shift to account for non-primary axis position (e.g., the second, third, fourth, etc. YAxis or Y2Axis . Remarks This method is normally only called by the Draw method of the parent GraphPane object. | Improve this Doc View Source DrawMinorTics(Graphics, GraphPane, Double, Single, Single, Single) Draw the minor tic marks as required for this Axis . Declaration public void DrawMinorTics(Graphics g, GraphPane pane, double baseVal, float shift, float scaleFactor, float topPix) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Double baseVal The scale value for the first major tic position. This is the reference point for all other tic marks. Single shift The number of pixels to shift this axis, based on the value of Cross . A positive value is into the ChartRect relative to the default axis position. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Single topPix The pixel location of the far side of the ChartRect from this axis. This value is the ChartRect.Height for the XAxis, or the ChartRect.Width for the YAxis and Y2Axis. | Improve this Doc View Source DrawTitle(Graphics, GraphPane, Single, Single) Draw the title for this Axis . Declaration public void DrawTitle(Graphics g, GraphPane pane, float shiftPos, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Single shiftPos The number of pixels to shift this axis, based on the value of Cross . A positive value is into the ChartRect relative to the default axis position. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Remarks On entry, it is assumed that the graphics transform has been configured so that the origin is at the left side of this axis, and the axis is aligned along the X coordinate direction. | Improve this Doc View Source GetCrossAxis(GraphPane) Gets the \"Cross\" axis that corresponds to this axis. Declaration public abstract Axis GetCrossAxis(GraphPane pane) Parameters Type Name Description GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Returns Type Description Axis Remarks The cross axis is the axis which determines the of this Axis when the Cross property is used. The cross axis for any XAxis or X2Axis is always the primary YAxis , and the cross axis for any YAxis or Y2Axis is always the primary XAxis . | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public virtual void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source ResetAutoScale(GraphPane, Graphics) Restore the scale ranging to automatic mode, and recalculate the Axis scale ranges Declaration public void ResetAutoScale(GraphPane pane, Graphics g) Parameters Type Name Description GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. See Also MinAuto MaxAuto MajorStepAuto MagAuto FormatAuto | Improve this Doc View Source SetMinSpaceBuffer(Graphics, GraphPane, Single, Boolean) This method will set the MinSpace property for this Axis using the currently required space multiplied by a fraction (). Declaration public void SetMinSpaceBuffer(Graphics g, GraphPane pane, float bufferFraction, bool isGrowOnly) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Single bufferFraction The amount of space to allocate for the axis, expressed as a fraction of the currently required space. For example, a value of 1.2 would allow for 20% extra above the currently required space. Boolean isGrowOnly If true, then this method will only modify the MinSpace property if the calculated result is more than the current value. Remarks The currently required space is calculated using CalcSpace(Graphics, GraphPane, Single, out Single) , and is based on current data ranges, font sizes, etc. The \"space\" is actually the amount of space required to fit the tic marks, scale labels, and axis title. | Improve this Doc View Source SetTransformMatrix(Graphics, GraphPane, Single) Setup the Transform Matrix to handle drawing of this Axis Declaration public abstract void SetTransformMatrix(Graphics g, GraphPane pane, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Events | Improve this Doc View Source ScaleFormatEvent Subscribe to this event to handle custom formatting of the scale labels. Declaration public event Axis.ScaleFormatHandler ScaleFormatEvent Event Type Type Description Axis.ScaleFormatHandler | Improve this Doc View Source ScaleTitleEvent Allow customization of the title when the scale is very large Subscribe to this event to handle custom formatting of the scale axis label. Declaration public event Axis.ScaleTitleEventHandler ScaleTitleEvent Event Type Type Description Axis.ScaleTitleEventHandler Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone. Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Remarks Note that this method must be called with an explicit cast to ICloneable, and that it is inherently virtual. For example: ParentClass foo = new ChildClass(); ChildClass bar = (ChildClass) ((ICloneable)foo).Clone(); Assume that ChildClass is inherited from ParentClass. Even though foo is declared with ParentClass, it is actually an instance of ChildClass. Calling the ICloneable implementation of Clone() on foo actually calls ChildClass.Clone() as if it were a virtual function. Implements System.Runtime.Serialization.ISerializable System.ICloneable"
  },
  "api/ZedGraph.Axis.ScaleFormatHandler.html": {
    "href": "api/ZedGraph.Axis.ScaleFormatHandler.html",
    "title": "Delegate Axis.ScaleFormatHandler",
    "keywords": "Delegate Axis.ScaleFormatHandler A delegate that allows full custom formatting of the Axis labels Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public delegate string ScaleFormatHandler(GraphPane pane, Axis axis, double val, int index); Parameters Type Name Description GraphPane pane The GraphPane for which the label is to be formatted Axis axis The Scale of interest. Double val The value to be formatted Int32 index The zero-based index of the label to be formatted Returns Type Description String A string value representing the label, or null if the ZedGraph should go ahead and generate the label according to the current settings See Also ScaleFormatEvent"
  },
  "api/ZedGraph.Axis.ScaleTitleEventHandler.html": {
    "href": "api/ZedGraph.Axis.ScaleTitleEventHandler.html",
    "title": "Delegate Axis.ScaleTitleEventHandler",
    "keywords": "Delegate Axis.ScaleTitleEventHandler Allow customization of title based on user preferences. Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public delegate string ScaleTitleEventHandler(Axis axis); Parameters Type Name Description Axis axis The Axis of interest. Returns Type Description String A string value representing the label, or null if the ZedGraph should go ahead and generate the label according to the current settings. To make the title blank, return \"\". See Also ScaleFormatEvent"
  },
  "api/ZedGraph.AxisLabel.html": {
    "href": "api/ZedGraph.AxisLabel.html",
    "title": "Class AxisLabel",
    "keywords": "Class AxisLabel Class that handles the data associated with text title and its associated font properties. Inherits from Label , and adds IsOmitMag and IsTitleAtCross properties, which are specifically associated with the Axis Title . Inheritance Object Label GapLabel AxisLabel Implements ICloneable ISerializable Inherited Members GapLabel.Gap GapLabel.GetScaledGap(Single) GapLabel.schema2 Label.Text Label.FontSpec Label.IsVisible Label.schema Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class AxisLabel : GapLabel, ICloneable, ISerializable Constructors | Improve this Doc View Source AxisLabel(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected AxisLabel(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source AxisLabel(String, String, Single, Color, Boolean, Boolean, Boolean) Constructor to build an AxisLabel from the text and the associated font properties. Declaration public AxisLabel(string text, string fontFamily, float fontSize, Color color, bool isBold, bool isItalic, bool isUnderline) Parameters Type Name Description String text The String representing the text to be displayed String fontFamily The String font family name Single fontSize The size of the font in points and scaled according to the CalcScaleFactor() logic. Color color The Color instance representing the color of the font Boolean isBold true for a bold font face Boolean isItalic true for an italic font face Boolean isUnderline true for an underline font face | Improve this Doc View Source AxisLabel(AxisLabel) Copy constructor Declaration public AxisLabel(AxisLabel rhs) Parameters Type Name Description AxisLabel rhs the AxisLabel instance to be copied. Fields | Improve this Doc View Source schema3 Current schema value that defines the version of the serialized file Declaration public const int schema3 = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source IsOmitMag Gets or sets the property that controls whether or not the magnitude factor (power of 10) for this scale will be included in the label. Declaration public bool IsOmitMag { get; set; } Property Value Type Description Boolean true to show the magnitude value, false to hide it Remarks For large scale values, a \"magnitude\" value (power of 10) is automatically used for scaling the graph. This magnitude value is automatically appended to the end of the Axis Title (e.g., \"(10^4)\") to indicate that a magnitude is in use. This property controls whether or not the magnitude is included in the title. Note that it only affects the axis title; a magnitude value may still be used even if it is not shown in the title. See Also Title Mag Format | Improve this Doc View Source IsTitleAtCross Gets or sets a value that determines whether the Axis title is located at the Cross value or at the normal position (outside the Rect ). Declaration public bool IsTitleAtCross { get; set; } Property Value Type Description Boolean Remarks This value only applies if CrossAuto is false. Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public AxisLabel Clone() Returns Type Description AxisLabel A new, independent copy of this class | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides GapLabel.GetObjectData(SerializationInfo, StreamingContext) Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.AxisType.html": {
    "href": "api/ZedGraph.AxisType.html",
    "title": "Enum AxisType",
    "keywords": "Enum AxisType Enumeration type for the various axis types that are available Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public enum AxisType Fields Name Description Date A cartesian axis with calendar dates or times DateAsOrdinal An ordinal axis that will have labels formatted with ordinal values corresponding to the number of values in each CurveItem . Exponent An exponential axis Linear An ordinary, cartesian axis LinearAsOrdinal An ordinal axis that will have labels formatted with values from the actual data values of the first CurveItem in the CurveList . Log A base 10 log axis Ordinal An ordinal axis with regular numeric labels. An ordinal axis means that all data points are evenly spaced at integral values, and the actual coordinate values for points corresponding to that axis are ignored. That is, if the X axis is an ordinal type, then all X values associated with the curves are ignored. Text An ordinal axis with user-defined text labels. An ordinal axis means that all data points are evenly spaced at integral values, and the actual coordinate values for points corresponding to that axis are ignored. That is, if the X axis is an ordinal type, then all X values associated with the curves are ignored. See Also Type"
  },
  "api/ZedGraph.Bar.Default.html": {
    "href": "api/ZedGraph.Bar.Default.html",
    "title": "Struct Bar.Default",
    "keywords": "Struct Bar.Default A simple struct that defines the default property values for the Bar class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source BorderColor The default color for drawing frames around bars ( Color property). Declaration public static Color BorderColor Field Value Type Description Color | Improve this Doc View Source BorderWidth The default pen width to be used for drawing the border around the bars ( Width property). Units are points. Declaration public static float BorderWidth Field Value Type Description Single | Improve this Doc View Source FillBrush The default custom brush for filling in the bars ( Brush property). Declaration public static Brush FillBrush Field Value Type Description Brush | Improve this Doc View Source FillColor The default color for filling in the bars ( Color property). Declaration public static Color FillColor Field Value Type Description Color | Improve this Doc View Source FillType The default fill mode for bars ( Type property). Declaration public static FillType FillType Field Value Type Description FillType | Improve this Doc View Source IsBorderVisible The default border mode for bars ( IsVisible property). true to display frames around bars, false otherwise Declaration public static bool IsBorderVisible Field Value Type Description Boolean"
  },
  "api/ZedGraph.Bar.html": {
    "href": "api/ZedGraph.Bar.html",
    "title": "Class Bar",
    "keywords": "Class Bar A class representing all the characteristics of the bar segments that make up a curve on the graph. Inheritance Object Bar Implements ICloneable ISerializable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class Bar : ICloneable, ISerializable Constructors | Improve this Doc View Source Bar() Default constructor that sets all Bar properties to default values as defined in the Bar.Default class. Declaration public Bar() | Improve this Doc View Source Bar(Color) Default constructor that sets the Color as specified, and the remaining Bar properties to default values as defined in the Bar.Default class. The specified color is only applied to the Color , and the Color will be defaulted. Declaration public Bar(Color color) Parameters Type Name Description Color color A Color value indicating the Color of the Bar. | Improve this Doc View Source Bar(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected Bar(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source Bar(Bar) The Copy Constructor Declaration public Bar(Bar rhs) Parameters Type Name Description Bar rhs The Bar object from which to copy Fields | Improve this Doc View Source schema Current schema value that defines the version of the serialized file Declaration public const int schema = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source Border The Border object used to draw the border around the Bar . Declaration public Border Border { get; set; } Property Value Type Description Border See Also IsBorderVisible BorderWidth BorderColor | Improve this Doc View Source Fill Gets or sets the Fill data for this Bar . Declaration public Fill Fill { get; set; } Property Value Type Description Fill Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public Bar Clone() Returns Type Description Bar A new, independent copy of this class | Improve this Doc View Source Draw(Graphics, GraphPane, RectangleF, Single, Boolean, Boolean, PointPair) Draw the Bar to the specified Graphics device at the specified location. This routine draws a single bar. Declaration public void Draw(Graphics g, GraphPane pane, RectangleF rect, float scaleFactor, bool fullFrame, bool isSelected, PointPair dataValue) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. RectangleF rect The rectangle (pixels) to contain the bar Single scaleFactor The scaling factor for the features of the graph based on the BaseDimension . This scaling factor is calculated by the CalcScaleFactor() method. The scale factor represents a linear multiple to be applied to font sizes, symbol sizes, etc. Boolean fullFrame true to draw the bottom portion of the border around the bar (this is for legend entries) Boolean isSelected Indicates that the Bar should be drawn with attributes from the Selection class. PointPair dataValue The data value to be used for a value-based color gradient. This is only applicable for GradientByX , GradientByY or GradientByZ . | Improve this Doc View Source Draw(Graphics, GraphPane, Single, Single, Single, Single, Single, Boolean, Boolean, PointPair) Draw the Bar to the specified Graphics device at the specified location. This routine draws a single bar. Declaration public void Draw(Graphics g, GraphPane pane, float left, float right, float top, float bottom, float scaleFactor, bool fullFrame, bool isSelected, PointPair dataValue) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Single left The x position of the left side of the bar in pixel units Single right The x position of the right side of the bar in pixel units Single top The y position of the top of the bar in pixel units Single bottom The y position of the bottom of the bar in pixel units Single scaleFactor The scaling factor for the features of the graph based on the BaseDimension . This scaling factor is calculated by the CalcScaleFactor() method. The scale factor represents a linear multiple to be applied to font sizes, symbol sizes, etc. Boolean fullFrame true to draw the bottom portion of the border around the bar (this is for legend entries) Boolean isSelected Indicates that the Bar should be drawn with attributes from the Selection class. PointPair dataValue The data value to be used for a value-based color gradient. This is only applicable for GradientByX , GradientByY or GradientByZ . | Improve this Doc View Source DrawBars(Graphics, GraphPane, CurveItem, Axis, Axis, Single, Int32, Single) Draw the this Bar to the specified Graphics device as a bar at each defined point. This method is normally only called by the Draw(Graphics, GraphPane, Int32, Single) method of the BarItem object Declaration public void DrawBars(Graphics g, GraphPane pane, CurveItem curve, Axis baseAxis, Axis valueAxis, float barWidth, int pos, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. CurveItem curve A CurveItem object representing the Bar 's to be drawn. Axis baseAxis The Axis class instance that defines the base (independent) axis for the Bar Axis valueAxis The Axis class instance that defines the value (dependent) axis for the Bar Single barWidth The width of each bar, in pixels. Int32 pos The ordinal position of the this bar series (0=first bar, 1=second bar, etc.) in the cluster of bars. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. | Improve this Doc View Source DrawSingleBar(Graphics, GraphPane, CurveItem, Int32, Int32, Axis, Axis, Single, Single) Protected internal routine that draws the specified single bar (an individual \"point\") of this series to the specified Graphics device. Declaration protected virtual void DrawSingleBar(Graphics g, GraphPane pane, CurveItem curve, int index, int pos, Axis baseAxis, Axis valueAxis, float barWidth, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. CurveItem curve A CurveItem object representing the Bar 's to be drawn. Int32 index The zero-based index number for the single bar to be drawn. Int32 pos The ordinal position of the this bar series (0=first bar, 1=second bar, etc.) in the cluster of bars. Axis baseAxis The Axis class instance that defines the base (independent) axis for the Bar Axis valueAxis The Axis class instance that defines the value (dependent) axis for the Bar Single barWidth The width of each bar, in pixels. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. | Improve this Doc View Source DrawSingleBar(Graphics, GraphPane, CurveItem, Axis, Axis, Int32, Int32, Single, Single) Draw the specified single bar (an individual \"point\") of this series to the specified Graphics device. This method is not as efficient as DrawBars(Graphics, GraphPane, CurveItem, Axis, Axis, Single, Int32, Single) , which draws the bars for all points. It is intended to be used only for SortedOverlay , which requires special handling of each bar. Declaration public void DrawSingleBar(Graphics g, GraphPane pane, CurveItem curve, Axis baseAxis, Axis valueAxis, int pos, int index, float barWidth, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. CurveItem curve A CurveItem object representing the Bar 's to be drawn. Axis baseAxis The Axis class instance that defines the base (independent) axis for the Bar Axis valueAxis The Axis class instance that defines the value (dependent) axis for the Bar Int32 pos The ordinal position of the this bar series (0=first bar, 1=second bar, etc.) in the cluster of bars. Int32 index The zero-based index number for the single bar to be drawn. Single barWidth The width of each bar, in pixels. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public virtual void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.BarBase.html": {
    "href": "api/ZedGraph.BarBase.html",
    "title": "Enum BarBase",
    "keywords": "Enum BarBase Enumeration type that defines the base axis from which Bar graphs are displayed. The bars can be drawn on any of the four axes ( XAxis , X2Axis , YAxis , and Y2Axis ). Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public enum BarBase Fields Name Description X Draw the Bar chart based from the XAxis . X2 Draw the Bar chart based from the X2Axis . Y Draw the Bar chart based from the YAxis . Y2 Draw the Bar chart based from the Y2Axis . See Also Base"
  },
  "api/ZedGraph.BarItem.html": {
    "href": "api/ZedGraph.BarItem.html",
    "title": "Class BarItem",
    "keywords": "Class BarItem Encapsulates a bar type that displays vertical or horizontal bars Inheritance Object CurveItem BarItem HiLowBarItem Implements ICloneable ISerializable Inherited Members CurveItem._isX2Axis CurveItem._isY2Axis CurveItem._yAxisIndex CurveItem._isVisible CurveItem._isSelected CurveItem._isSelectable CurveItem._isOverrideOrdinal CurveItem._points CurveItem.Tag CurveItem.schema CurveItem.Label CurveItem.Color CurveItem.IsVisible CurveItem.IsSelected CurveItem.IsSelectable CurveItem.IsOverrideOrdinal CurveItem.IsX2Axis CurveItem.IsY2Axis CurveItem.YAxisIndex CurveItem.IsBar CurveItem.IsPie CurveItem.IsLine CurveItem.NPts CurveItem.Points CurveItem.Item[Int32] CurveItem.Link CurveItem.AddPoint(Double, Double) CurveItem.AddPoint(PointPair) CurveItem.Clear() CurveItem.RemovePoint(Int32) CurveItem.GetXAxis(GraphPane) CurveItem.GetYAxis(GraphPane) CurveItem.GetYAxisIndex(GraphPane) CurveItem.MakeUnique() CurveItem.MakeUnique(ColorSymbolRotator) CurveItem.GetRange(Double, Double, Double, Double, Boolean, Boolean, GraphPane) CurveItem.BaseAxis(GraphPane) CurveItem.ValueAxis(GraphPane) CurveItem.GetBarWidth(GraphPane) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class BarItem : CurveItem, ICloneable, ISerializable Remarks The orientation of the bars depends on the state of Base , and the bars can be stacked or clustered, depending on the state of Type Constructors | Improve this Doc View Source BarItem(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected BarItem(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source BarItem(String) Create a new BarItem , specifying only the legend label for the bar. Declaration public BarItem(string label) Parameters Type Name Description String label The label that will appear in the legend. | Improve this Doc View Source BarItem(String, Double[], Double[], Color) Create a new BarItem using the specified properties. Declaration public BarItem(string label, double[] x, double[] y, Color color) Parameters Type Name Description String label The label that will appear in the legend. Double [] x An array of double precision values that define the independent (X axis) values for this curve Double [] y An array of double precision values that define the dependent (Y axis) values for this curve Color color A Color value that will be applied to the Fill and Border properties. | Improve this Doc View Source BarItem(String, IPointList, Color) Create a new BarItem using the specified properties. Declaration public BarItem(string label, IPointList points, Color color) Parameters Type Name Description String label The label that will appear in the legend. IPointList points A IPointList of double precision value pairs that define the X and Y values for this curve Color color A Color value that will be applied to the Fill and Border properties. | Improve this Doc View Source BarItem(BarItem) The Copy Constructor Declaration public BarItem(BarItem rhs) Parameters Type Name Description BarItem rhs The BarItem object from which to copy Fields | Improve this Doc View Source _bar Private field that stores a reference to the Bar class defined for this BarItem . Use the public property Bar to access this value. Declaration [CLSCompliant(false)] protected Bar _bar Field Value Type Description Bar | Improve this Doc View Source schema2 Current schema value that defines the version of the serialized file Declaration public const int schema2 = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source Bar Gets a reference to the Bar class defined for this BarItem . Declaration public Bar Bar { get; } Property Value Type Description Bar Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public BarItem Clone() Returns Type Description BarItem A new, independent copy of this class | Improve this Doc View Source CreateBarLabels(GraphPane, Boolean, String) Create a TextObj for each bar in the GraphPane . Declaration public static void CreateBarLabels(GraphPane pane, bool isBarCenter, string valueFormat) Parameters Type Name Description GraphPane pane The GraphPane in which to place the text labels. Boolean isBarCenter true to center the labels inside the bars, false to place the labels just above the top of the bar. String valueFormat The double.ToString string format to use for creating the labels. Remarks This method will go through the bars, create a label that corresponds to the bar value, and place it on the graph depending on user preferences. This works for horizontal or vertical bars in clusters or stacks, but only for BarItem types. This method does not apply to ErrorBarItem or HiLowBarItem objects. Call this method only after calling AxisChange() . | Improve this Doc View Source CreateBarLabels(GraphPane, Boolean, String, String, Single, Color, Boolean, Boolean, Boolean) Create a TextObj for each bar in the GraphPane . Declaration public static void CreateBarLabels(GraphPane pane, bool isBarCenter, string valueFormat, string fontFamily, float fontSize, Color fontColor, bool isBold, bool isItalic, bool isUnderline) Parameters Type Name Description GraphPane pane The GraphPane in which to place the text labels. Boolean isBarCenter true to center the labels inside the bars, false to place the labels just above the top of the bar. String valueFormat The double.ToString string format to use for creating the labels. String fontFamily The string name of the font family to use for the labels Single fontSize The floating point size of the font, in scaled points Color fontColor The color in which to draw the labels Boolean isBold true for a bold font type, false otherwise Boolean isItalic true for an italic font type, false otherwise Boolean isUnderline true for an underline font type, false otherwise Remarks This method will go through the bars, create a label that corresponds to the bar value, and place it on the graph depending on user preferences. This works for horizontal or vertical bars in clusters or stacks, but only for BarItem types. This method does not apply to ErrorBarItem or HiLowBarItem objects. Call this method only after calling AxisChange() . | Improve this Doc View Source Draw(Graphics, GraphPane, Int32, Single) Do all rendering associated with this BarItem to the specified Graphics device. This method is normally only called by the Draw method of the parent CurveList collection object. Declaration public override void Draw(Graphics g, GraphPane pane, int pos, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Int32 pos The ordinal position of the current Bar curve. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Overrides CurveItem.Draw(Graphics, GraphPane, Int32, Single) | Improve this Doc View Source DrawLegendKey(Graphics, GraphPane, RectangleF, Single) Draw a legend key entry for this BarItem at the specified location Declaration public override void DrawLegendKey(Graphics g, GraphPane pane, RectangleF rect, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. RectangleF rect The RectangleF struct that specifies the location for the legend key Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Overrides CurveItem.DrawLegendKey(Graphics, GraphPane, RectangleF, Single) | Improve this Doc View Source GetCoords(GraphPane, Int32, out String) Determine the coords for the rectangle associated with a specified point for this CurveItem Declaration public override bool GetCoords(GraphPane pane, int i, out string coords) Parameters Type Name Description GraphPane pane The GraphPane to which this curve belongs Int32 i The index of the point of interest String coords A list of coordinates that represents the \"rect\" for this point (used in an html AREA tag) Returns Type Description Boolean true if it's a valid point, false otherwise Overrides CurveItem.GetCoords(GraphPane, Int32, out String) | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides CurveItem.GetObjectData(SerializationInfo, StreamingContext) Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.BarSettings.Default.html": {
    "href": "api/ZedGraph.BarSettings.Default.html",
    "title": "Struct BarSettings.Default",
    "keywords": "Struct BarSettings.Default A simple struct that defines the default property values for the BarSettings class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source Base The default value for the Base , which determines the base Axis from which the Bar graphs will be displayed. Declaration public static BarBase Base Field Value Type Description BarBase See Also Base | Improve this Doc View Source ClusterScaleWidth The default width of a bar cluster on a Bar graph. This value only applies to Bar graphs, and only when the Type is Linear , Log or Date . This dimension is expressed in terms of X scale user units. Declaration public static double ClusterScaleWidth Field Value Type Description Double See Also MinClusterGap MinBarGap | Improve this Doc View Source ClusterScaleWidthAuto The default value for ClusterScaleWidthAuto . Declaration public static bool ClusterScaleWidthAuto Field Value Type Description Boolean | Improve this Doc View Source MinBarGap The default dimension gap between each individual bar within a bar cluster on a Bar graph. This dimension is expressed in terms of the normal bar width. Declaration public static float MinBarGap Field Value Type Description Single See Also MinClusterGap MinBarGap | Improve this Doc View Source MinClusterGap The default dimension gap between clusters of bars on a Bar graph. This dimension is expressed in terms of the normal bar width. Declaration public static float MinClusterGap Field Value Type Description Single See Also MinBarGap MinClusterGap | Improve this Doc View Source Type The default value for the Type property, which determines if the bars are drawn overlapping eachother in a \"stacked\" format, or side-by-side in a \"cluster\" format. See the BarType for more information. Declaration public static BarType Type Field Value Type Description BarType See Also Type"
  },
  "api/ZedGraph.BarSettings.html": {
    "href": "api/ZedGraph.BarSettings.html",
    "title": "Class BarSettings",
    "keywords": "Class BarSettings Class that handles the global settings for bar charts Inheritance Object BarSettings Implements ISerializable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class BarSettings : ISerializable Constructors | Improve this Doc View Source BarSettings(BarSettings, GraphPane) Copy constructor Declaration public BarSettings(BarSettings rhs, GraphPane parentPane) Parameters Type Name Description BarSettings rhs the BarSettings instance to be copied. GraphPane parentPane The GraphPane that will be the parent of this new BarSettings object. | Improve this Doc View Source BarSettings(GraphPane) Constructor to build a BarSettings instance from the defaults. Declaration public BarSettings(GraphPane parentPane) Parameters Type Name Description GraphPane parentPane Fields | Improve this Doc View Source schema Current schema value that defines the version of the serialized file Declaration public const int schema = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source Base Determines the base axis from which Bar graphs will be displayed. Declaration public BarBase Base { get; set; } Property Value Type Description BarBase Remarks The base axis is the axis from which the bars grow with increasing value. The value is of the enumeration type BarBase . See Also Base | Improve this Doc View Source ClusterScaleWidth The width of an individual bar cluster on a Bar graph. This value only applies to bar graphs plotted on non-ordinal X axis types ( Linear , Log , and Date . Declaration public double ClusterScaleWidth { get; set; } Property Value Type Description Double Remarks This value can be calculated automatically if ClusterScaleWidthAuto is set to true. In this case, ClusterScaleWidth will be calculated if Base refers to an Axis of a non-ordinal type ( IsAnyOrdinal is false). The ClusterScaleWidth is calculated from the minimum difference found between any two points on the Base Axis for any BarItem in the CurveList . The ClusterScaleWidth is set automatically each time AxisChange() is called. Calculations are done by the CalcClusterScaleWidth() method. See Also ClusterScaleWidth ClusterScaleWidthAuto MinBarGap MinClusterGap | Improve this Doc View Source ClusterScaleWidthAuto Gets or sets a property that determines if the ClusterScaleWidth will be calculated automatically. Declaration public bool ClusterScaleWidthAuto { get; set; } Property Value Type Description Boolean Remarks true for the ClusterScaleWidth to be calculated automatically based on the available data, false otherwise. This value will be set to false automatically if the ClusterScaleWidth value is changed by the user. See Also ClusterScaleWidthAuto ClusterScaleWidth | Improve this Doc View Source MinBarGap The minimum space between individual Bar within a cluster, expressed as a fraction of the bar size. Declaration public float MinBarGap { get; set; } Property Value Type Description Single See Also MinBarGap MinClusterGap ClusterScaleWidth | Improve this Doc View Source MinClusterGap The minimum space between Bar clusters, expressed as a fraction of the bar size. Declaration public float MinClusterGap { get; set; } Property Value Type Description Single See Also MinClusterGap MinBarGap ClusterScaleWidth | Improve this Doc View Source Type Determines how the BarItem graphs will be displayed. See the BarType enum for the individual types available. Declaration public BarType Type { get; set; } Property Value Type Description BarType See Also Type Methods | Improve this Doc View Source BarBaseAxis() Determine the Axis from which the Bar charts are based. Declaration public Axis BarBaseAxis() Returns Type Description Axis The Axis class for the axis from which the bars are based See Also BarBase BarSettings Base GetClusterWidth(GraphPane) | Improve this Doc View Source CalcClusterScaleWidth() Calculate the width of an individual bar cluster on a BarItem graph. This value only applies to bar graphs plotted on non-ordinal X axis types ( IsAnyOrdinal is false). Declaration public void CalcClusterScaleWidth() Remarks This value can be calculated automatically if ClusterScaleWidthAuto is set to true. In this case, ClusterScaleWidth will be calculated if Base refers to an Axis of a non-ordinal type ( IsAnyOrdinal is false). The ClusterScaleWidth is calculated from the minimum difference found between any two points on the Base Axis for any BarItem in the CurveList . The ClusterScaleWidth is set automatically each time AxisChange() is called. See Also ClusterScaleWidth ClusterScaleWidthAuto MinBarGap MinClusterGap | Improve this Doc View Source GetClusterWidth() Determine the width, in screen pixel units, of each bar cluster including the cluster gaps and bar gaps. Declaration public float GetClusterWidth() Returns Type Description Single The width of each bar cluster, in pixel units Remarks This method calls the GetClusterWidth(GraphPane) method for the base Axis for Bar graphs (the base Axis is assigned by the Base property). See Also BarBase BarSettings GetClusterWidth(GraphPane) Type | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public virtual void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Implements System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.BarType.html": {
    "href": "api/ZedGraph.BarType.html",
    "title": "Enum BarType",
    "keywords": "Enum BarType Enumeration type that defines the available types of BarItem graphs. Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public enum BarType Fields Name Description Cluster Draw each BarItem side by side in clusters. Overlay Draw the BarItem bars one on top of the other. The bars will be drawn such that the last bar in the CurveList will be behind all other bars. Note that the bar values are not summed up for the overlay mode. The data values must be summed before being passed to AddBar(String, IPointList, Color) . For example, if the first bar of the first BarItem has a value of 100, and the first bar of the second BarItem has a value of 120, then that bar will appear to be 20 units on top of the first bar. PercentStack Draw the BarItem bars in a format whereby the height of each represents the percentage of the total each one represents. Negative values are displayed below the zero line as percentages of the absolute total of all values. SortedOverlay Draw the BarItem bars one on top of the other. The bars will be drawn such that the bars are sorted according to the maximum value, with the tallest bar at each point at the back and the shortest bar at the front. This is similar to the Overlay mode, but the bars are sorted at each base value. The data values must be summed before being passed to AddBar(String, IPointList, Color) . For example, if the first bar of the first BarItem has a value of 100, and the first bar of the second BarItem has a value of 120, then that bar will appear to be 20 units on top of the first bar. Stack Draw the BarItem bars in an additive format so that they stack on top of one another. The value of the last bar drawn will be the sum of the values of all prior bars. See Also Type"
  },
  "api/ZedGraph.BasicArrayPointList.html": {
    "href": "api/ZedGraph.BasicArrayPointList.html",
    "title": "Class BasicArrayPointList",
    "keywords": "Class BasicArrayPointList A data collection class for ZedGraph, provided as an alternative to PointPairList . Inheritance Object BasicArrayPointList Implements IPointList ICloneable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class BasicArrayPointList : IPointList, ICloneable Remarks The data storage class for ZedGraph can be any type, so long as it uses the IPointList interface. This class, albeit simple, is a demonstration of implementing the IPointList interface to provide a simple data collection using only two arrays. The IPointList interface can also be used as a layer between ZedGraph and a database, for example. Constructors | Improve this Doc View Source BasicArrayPointList(Double[], Double[]) Constructor to initialize the PointPairList from two arrays of type double. Declaration public BasicArrayPointList(double[] x, double[] y) Parameters Type Name Description Double [] x Double [] y | Improve this Doc View Source BasicArrayPointList(BasicArrayPointList) The Copy Constructor Declaration public BasicArrayPointList(BasicArrayPointList rhs) Parameters Type Name Description BasicArrayPointList rhs The PointPairList from which to copy Fields | Improve this Doc View Source x Instance of an array of x values Declaration public double[] x Field Value Type Description Double [] | Improve this Doc View Source y Instance of an array of x values Declaration public double[] y Field Value Type Description Double [] Properties | Improve this Doc View Source Count Returns the number of points available in the arrays. Count will be the greater of the lengths of the X and Y arrays. Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source Item[Int32] Indexer to access the specified PointPair object by its ordinal position in the list. Declaration public PointPair this[int index] { get; set; } Parameters Type Name Description Int32 index The ordinal position (zero-based) of the PointPair object to be accessed. Property Value Type Description PointPair A PointPair object reference. Remarks Returns Missing for any value of that is outside of its corresponding array bounds. Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public BasicArrayPointList Clone() Returns Type Description BasicArrayPointList A new, independent copy of this class Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements IPointList System.ICloneable See Also PointPairList IPointList"
  },
  "api/ZedGraph.Border.Default.html": {
    "href": "api/ZedGraph.Border.Default.html",
    "title": "Struct Border.Default",
    "keywords": "Struct Border.Default A simple struct that defines the default property values for the Fill class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source InflateFactor The default value for InflateFactor , in units of points (1/72 inch). Declaration public static float InflateFactor Field Value Type Description Single See Also InflateFactor"
  },
  "api/ZedGraph.Border.html": {
    "href": "api/ZedGraph.Border.html",
    "title": "Class Border",
    "keywords": "Class Border A class that encapsulates Border (frame) properties for an object. The Border class is used in a variety of ZedGraph objects to handle the drawing of the Border around the object. Inheritance Object LineBase Border Implements ISerializable ICloneable Inherited Members LineBase.Color LineBase.Style LineBase.DashOn LineBase.DashOff LineBase.Width LineBase.IsVisible LineBase.IsAntiAlias LineBase.GradientFill LineBase.schema0 LineBase.GetPen(PaneBase, Single) LineBase.GetPen(PaneBase, Single, PointPair) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class Border : LineBase, ISerializable, ICloneable Constructors | Improve this Doc View Source Border() The default constructor. Initialized to default values. Declaration public Border() | Improve this Doc View Source Border(Boolean, Color, Single) Constructor that specifies the visibility, color and penWidth of the Border. Declaration public Border(bool isVisible, Color color, float width) Parameters Type Name Description Boolean isVisible Determines whether or not the Border will be drawn. Color color The color of the Border Single width The width, in points (1/72 inch), for the Border. | Improve this Doc View Source Border(Color, Single) Constructor that specifies the color and penWidth of the Border. Declaration public Border(Color color, float width) Parameters Type Name Description Color color The color of the Border Single width The width, in points (1/72 inch), for the Border. | Improve this Doc View Source Border(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected Border(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source Border(Border) The Copy Constructor Declaration public Border(Border rhs) Parameters Type Name Description Border rhs The Border object from which to copy Fields | Improve this Doc View Source schema Current schema value that defines the version of the serialized file Declaration public const int schema = 11 Field Value Type Description Int32 Properties | Improve this Doc View Source InflateFactor Gets or sets the amount of inflation to be done on the rectangle before rendering. Declaration public float InflateFactor { get; set; } Property Value Type Description Single Remarks This allows the border to be inset or outset relative to the actual rectangle area. Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public Border Clone() Returns Type Description Border A new, independent copy of this class | Improve this Doc View Source Draw(Graphics, PaneBase, Single, RectangleF) Draw the specified Border ( RectangleF ) using the properties of this Border object. Declaration public void Draw(Graphics g, PaneBase pane, float scaleFactor, RectangleF rect) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. PaneBase pane A reference to the PaneBase object that is the parent or owner of this object. Single scaleFactor The scaling factor for the features of the graph based on the BaseDimension . This scaling factor is calculated by the CalcScaleFactor() method. The scale factor represents a linear multiple to be applied to font sizes, symbol sizes, etc. RectangleF rect A RectangleF struct to be drawn. | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides LineBase.GetObjectData(SerializationInfo, StreamingContext) Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.Runtime.Serialization.ISerializable System.ICloneable"
  },
  "api/ZedGraph.BoxObj.Default.html": {
    "href": "api/ZedGraph.BoxObj.Default.html",
    "title": "Struct BoxObj.Default",
    "keywords": "Struct BoxObj.Default A simple struct that defines the default property values for the ArrowObj class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source BorderColor The default color used for the BoxObj border ( Color property). Declaration public static Color BorderColor Field Value Type Description Color | Improve this Doc View Source FillColor The default color used for the BoxObj fill ( Color property). Declaration public static Color FillColor Field Value Type Description Color | Improve this Doc View Source PenWidth The default pen width used for the BoxObj border ( Width property). Units are points (1/72 inch). Declaration public static float PenWidth Field Value Type Description Single"
  },
  "api/ZedGraph.BoxObj.html": {
    "href": "api/ZedGraph.BoxObj.html",
    "title": "Class BoxObj",
    "keywords": "Class BoxObj A class that represents a bordered and/or filled box (rectangle) object on the graph. A list of BoxObj objects is maintained by the GraphObjList collection class. Inheritance Object GraphObj BoxObj EllipseObj PolyObj Implements ICloneable ISerializable Inherited Members GraphObj._location GraphObj._isVisible GraphObj._isClippedToChartRect GraphObj.Tag GraphObj.Location GraphObj.ZOrder GraphObj.IsVisible GraphObj.IsClippedToChartRect GraphObj.Link GraphObj.IsInFrontOfData GraphObj.schema Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class BoxObj : GraphObj, ICloneable, ISerializable Constructors | Improve this Doc View Source BoxObj() A default constructor that creates a BoxObj using a location of (0,0), and a width,height of (1,1). Other properties are defaulted. Declaration public BoxObj() | Improve this Doc View Source BoxObj(Double, Double, Double, Double) A constructor that allows the position of the BoxObj to be pre-specified. Other properties are defaulted. Declaration public BoxObj(double x, double y, double width, double height) Parameters Type Name Description Double x The x location for this BoxObj . This will be in units determined by CoordinateFrame . Double y The y location for this BoxObj . This will be in units determined by CoordinateFrame . Double width The width of this BoxObj . This will be in units determined by CoordinateFrame . Double height The height of this BoxObj . This will be in units determined by CoordinateFrame . | Improve this Doc View Source BoxObj(Double, Double, Double, Double, Color, Color) A constructor that allows the position, border color, and solid fill color of the BoxObj to be pre-specified. Declaration public BoxObj(double x, double y, double width, double height, Color borderColor, Color fillColor) Parameters Type Name Description Double x The x location for this BoxObj . This will be in units determined by CoordinateFrame . Double y The y location for this BoxObj . This will be in units determined by CoordinateFrame . Double width The width of this BoxObj . This will be in units determined by CoordinateFrame . Double height The height of this BoxObj . This will be in units determined by CoordinateFrame . Color borderColor An arbitrary Color specification for the box border Color fillColor An arbitrary Color specification for the box fill (will be a solid color fill) | Improve this Doc View Source BoxObj(Double, Double, Double, Double, Color, Color, Color) A constructor that allows the position, border color, and two-color gradient fill colors of the BoxObj to be pre-specified. Declaration public BoxObj(double x, double y, double width, double height, Color borderColor, Color fillColor1, Color fillColor2) Parameters Type Name Description Double x The x location for this BoxObj . This will be in units determined by CoordinateFrame . Double y The y location for this BoxObj . This will be in units determined by CoordinateFrame . Double width The width of this BoxObj . This will be in units determined by CoordinateFrame . Double height The height of this BoxObj . This will be in units determined by CoordinateFrame . Color borderColor An arbitrary Color specification for the box border Color fillColor1 An arbitrary Color specification for the start of the box gradient fill Color fillColor2 An arbitrary Color specification for the end of the box gradient fill | Improve this Doc View Source BoxObj(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected BoxObj(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source BoxObj(BoxObj) The Copy Constructor Declaration public BoxObj(BoxObj rhs) Parameters Type Name Description BoxObj rhs The BoxObj object from which to copy Fields | Improve this Doc View Source _border Private field that determines the properties of the border around this BoxObj Use the public property Border to access this value. Declaration [CLSCompliant(false)] protected Border _border Field Value Type Description Border | Improve this Doc View Source _fill Private field that stores the Fill data for this BoxObj . Use the public property Fill to access this value. Declaration [CLSCompliant(false)] protected Fill _fill Field Value Type Description Fill | Improve this Doc View Source schema2 Current schema value that defines the version of the serialized file Declaration public const int schema2 = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source Border Gets or sets the Border object, which determines the properties of the border around this BoxObj Declaration public Border Border { get; set; } Property Value Type Description Border | Improve this Doc View Source Fill Gets or sets the Fill data for this BoxObj . Declaration public Fill Fill { get; set; } Property Value Type Description Fill Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public BoxObj Clone() Returns Type Description BoxObj A new, independent copy of this class | Improve this Doc View Source Draw(Graphics, PaneBase, Single) Render this object to the specified Graphics device. Declaration public override void Draw(Graphics g, PaneBase pane, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. PaneBase pane A reference to the PaneBase object that is the parent or owner of this object. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Overrides GraphObj.Draw(Graphics, PaneBase, Single) Remarks This method is normally only called by the Draw method of the parent GraphObjList collection object. | Improve this Doc View Source GetCoords(PaneBase, Graphics, Single, out String, out String) Determines the shape type and Coords values for this GraphObj Declaration public override void GetCoords(PaneBase pane, Graphics g, float scaleFactor, out string shape, out string coords) Parameters Type Name Description PaneBase pane Graphics g Single scaleFactor String shape String coords Overrides GraphObj.GetCoords(PaneBase, Graphics, Single, out String, out String) | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides GraphObj.GetObjectData(SerializationInfo, StreamingContext) | Improve this Doc View Source PointInBox(PointF, PaneBase, Graphics, Single) Determine if the specified screen point lies inside the bounding box of this BoxObj . Declaration public override bool PointInBox(PointF pt, PaneBase pane, Graphics g, float scaleFactor) Parameters Type Name Description PointF pt The screen point, in pixels PaneBase pane A reference to the PaneBase object that is the parent or owner of this object. Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Returns Type Description Boolean true if the point lies in the bounding box, false otherwise Overrides GraphObj.PointInBox(PointF, PaneBase, Graphics, Single) Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.Chart.Default.html": {
    "href": "api/ZedGraph.Chart.Default.html",
    "title": "Struct Chart.Default",
    "keywords": "Struct Chart.Default A simple struct that defines the default property values for the Chart class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source BorderColor The default color for the Chart border. ( Border property). Declaration public static Color BorderColor Field Value Type Description Color | Improve this Doc View Source BorderPenWidth The default pen width for drawing the Chart border ( Border property). Units are in points (1/72 inch). Declaration public static float BorderPenWidth Field Value Type Description Single | Improve this Doc View Source FillBrush The default brush for the Chart background. ( Brush property of Fill ). Declaration public static Brush FillBrush Field Value Type Description Brush | Improve this Doc View Source FillColor The default color for the Chart background. ( Fill property). Declaration public static Color FillColor Field Value Type Description Color | Improve this Doc View Source FillType The default FillType for the Chart background. ( Type property of Fill ). Declaration public static FillType FillType Field Value Type Description FillType | Improve this Doc View Source IsBorderVisible The default display mode for the Chart border ( Border property). true to show the border border, false to omit the border Declaration public static bool IsBorderVisible Field Value Type Description Boolean"
  },
  "api/ZedGraph.Chart.html": {
    "href": "api/ZedGraph.Chart.html",
    "title": "Class Chart",
    "keywords": "Class Chart Class that handles the properties of the charting area (where the curves are actually drawn), which is bounded by the XAxis , YAxis , and Y2Axis . Inheritance Object Chart Implements ICloneable ISerializable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class Chart : ICloneable, ISerializable Constructors | Improve this Doc View Source Chart() Default constructor. Declaration public Chart() | Improve this Doc View Source Chart(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected Chart(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source Chart(Chart) Copy constructor Declaration public Chart(Chart rhs) Parameters Type Name Description Chart rhs The source Chart to be copied. Fields | Improve this Doc View Source schema Current schema value that defines the version of the serialized file Declaration public const int schema = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source Border Gets or sets the Border class for drawing the border border around the Chart Declaration public Border Border { get; set; } Property Value Type Description Border See Also BorderColor BorderPenWidth | Improve this Doc View Source Fill Gets or sets the Fill data for this Chart . Declaration public Fill Fill { get; set; } Property Value Type Description Fill | Improve this Doc View Source IsRectAuto Gets or sets a boolean value that determines whether or not the Rect will be calculated automatically (almost always true). Declaration public bool IsRectAuto { get; set; } Property Value Type Description Boolean true to have ZedGraph calculate the ChartRect, false to do it yourself Remarks If you have a need to set the ChartRect manually, such as you have multiple graphs on a page and you want to line up the edges perfectly, you can set this value to false. If you set this value to false, you must also manually set the Rect property. You can easily determine the ChartRect that ZedGraph would have calculated by calling the CalcChartRect(Graphics) method, which returns a chart rect sized for the current data range, scale sizes, etc. | Improve this Doc View Source Rect Gets or sets the rectangle that contains the area bounded by the axes ( XAxis , YAxis , and Y2Axis ). If you set this value manually, then the IsRectAuto value will automatically be set to false. Declaration public RectangleF Rect { get; set; } Property Value Type Description RectangleF The rectangle units are in screen pixels Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public Chart Clone() Returns Type Description Chart A new, independent copy of this class | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public virtual void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.CollectionPlus.html": {
    "href": "api/ZedGraph.CollectionPlus.html",
    "title": "Class CollectionPlus",
    "keywords": "Class CollectionPlus A collection base class containing basic extra functionality to be inherited by CurveList , IPointList , GraphObjList . Inheritance Object CollectionBase CollectionPlus Implements IList ICollection IEnumerable Inherited Members System.Collections.CollectionBase.System.Collections.IList.get_Item(System.Int32) System.Collections.CollectionBase.System.Collections.IList.set_Item(System.Int32, System.Object) CollectionBase.Clear() CollectionBase.GetEnumerator() CollectionBase.OnClear() CollectionBase.OnClearComplete() CollectionBase.OnInsert(Int32, Object) CollectionBase.OnInsertComplete(Int32, Object) CollectionBase.OnRemove(Int32, Object) CollectionBase.OnRemoveComplete(Int32, Object) CollectionBase.OnSet(Int32, Object, Object) CollectionBase.OnSetComplete(Int32, Object, Object) CollectionBase.OnValidate(Object) CollectionBase.RemoveAt(Int32) CollectionBase.ICollection.CopyTo(Array, Int32) CollectionBase.IList.Add(Object) CollectionBase.IList.Contains(Object) CollectionBase.IList.IndexOf(Object) CollectionBase.IList.Insert(Int32, Object) CollectionBase.IList.Remove(Object) CollectionBase.Capacity CollectionBase.Count CollectionBase.InnerList CollectionBase.List CollectionBase.ICollection.IsSynchronized CollectionBase.ICollection.SyncRoot CollectionBase.IList.IsFixedSize CollectionBase.IList.IsReadOnly CollectionBase.IList.Item[Int32] Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class CollectionPlus : CollectionBase, IList, ICollection, IEnumerable Remarks The methods in this collection operate on basic Object types. Therefore, in order to make sure that the derived classes remain strongly-typed, there are no Add() or Insert() methods here, and no methods that return an object. Only Remove(), Move(), IndexOf(), etc. methods are included. Constructors | Improve this Doc View Source CollectionPlus() Default Constructor Declaration public CollectionPlus() Methods | Improve this Doc View Source IndexOf(Object) Return the zero-based position index of the specified object in the collection. Declaration public int IndexOf(object item) Parameters Type Name Description Object item A reference to the object that is to be found. Returns Type Description Int32 The zero-based index of the specified object, or -1 if the object is not in the list See Also IndexOf(Object) | Improve this Doc View Source Move(Int32, Int32) Move the position of the object at the specified index to the new relative position in the list. Declaration public int Move(int index, int relativePos) Parameters Type Name Description Int32 index The zero-based index of the object to be moved. Int32 relativePos The relative number of positions to move the object. A value of -1 will move the object one position earlier in the list, a value of 1 will move it one position later. To move an item to the beginning of the list, use a large negative value (such as -999). To move it to the end of the list, use a large positive value. Returns Type Description Int32 The new position for the object, or -1 if the object was not found. Remarks For Graphic type objects, this method controls the Z-Order of the items. Objects at the beginning of the list appear in front of objects at the end of the list. | Improve this Doc View Source Remove(Int32) Remove an object from the collection at the specified ordinal location. Declaration public void Remove(int index) Parameters Type Name Description Int32 index An ordinal position in the list at which the object to be removed is located. See Also Remove(Object) | Improve this Doc View Source Remove(Object) Remove an object from the collection based on an object reference. Declaration public void Remove(object item) Parameters Type Name Description Object item A reference to the object that is to be removed. See Also Remove(Object) Implements System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api/ZedGraph.ColorSymbolRotator.html": {
    "href": "api/ZedGraph.ColorSymbolRotator.html",
    "title": "Class ColorSymbolRotator",
    "keywords": "Class ColorSymbolRotator Class used to get the next color/symbol for GraphPane.AddCurve methods. Inheritance Object ColorSymbolRotator Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public class ColorSymbolRotator Fields | Improve this Doc View Source colorIndex The index of the next color to be used. Note: may be COLORS.Length, it is reset to 0 on the next call if it is. Declaration protected int colorIndex Field Value Type Description Int32 | Improve this Doc View Source COLORS The Color s ColorSymbolRotator rotates through. Declaration public static readonly Color[] COLORS Field Value Type Description Color [] | Improve this Doc View Source symbolIndex The index of the next symbol to be used. Note: may be SYMBOLS.Length, it is reset to 0 on the next call if it is. Declaration protected int symbolIndex Field Value Type Description Int32 | Improve this Doc View Source SYMBOLS The SymbolType s ColorSymbolRotator rotates through. Declaration public static readonly SymbolType[] SYMBOLS Field Value Type Description SymbolType [] Properties | Improve this Doc View Source NextColor Retrieves the next color in the rotation Calling this method has the side effect of incrementing the color index. NextSymbol NextColorIndex Declaration public Color NextColor { get; } Property Value Type Description Color | Improve this Doc View Source NextColorIndex Retrieves the index of the next color to be used. Calling this method has the side effect of incrementing the color index. Declaration public int NextColorIndex { get; set; } Property Value Type Description Int32 | Improve this Doc View Source NextSymbol Retrieves the next color in the rotation. Calling this method has the side effect of incrementing the symbol index. NextColor NextSymbolIndex Declaration public SymbolType NextSymbol { get; } Property Value Type Description SymbolType | Improve this Doc View Source NextSymbolIndex Retrieves the index of the next symbol to be used. Calling this method has the side effect of incrementing the symbol index. Declaration public int NextSymbolIndex { get; set; } Property Value Type Description Int32 | Improve this Doc View Source StaticInstance Retrieves the ColorSymbolRotator instance used by the static methods. StaticNextColor StaticNextSymbol Declaration public static ColorSymbolRotator StaticInstance { get; } Property Value Type Description ColorSymbolRotator | Improve this Doc View Source StaticNextColor Retrieves the next color from this class's static ColorSymbolRotator instance StaticInstance StaticNextSymbol Declaration public static Color StaticNextColor { get; } Property Value Type Description Color | Improve this Doc View Source StaticNextSymbol Retrieves the next symbol type from this class's static ColorSymbolRotator instance StaticInstance StaticNextColor Declaration public static SymbolType StaticNextSymbol { get; } Property Value Type Description SymbolType"
  },
  "api/ZedGraph.CoordType.html": {
    "href": "api/ZedGraph.CoordType.html",
    "title": "Enum CoordType",
    "keywords": "Enum CoordType Enumeration type for the user-defined coordinate types available. These coordinate types are used the ArrowObj objects and TextObj objects only. Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public enum CoordType Fields Name Description AxisXY2Scale Coordinates are specified according to the user axis scales for the XAxis and Y2Axis . AxisXYScale Coordinates are specified according to the user axis scales for the XAxis and YAxis . ChartFraction Coordinates are specified as a fraction of the Rect . That is, for the X coordinate, 0.0 is at the left edge of the ChartRect and 1.0 is at the right edge of the ChartRect. A value less than zero is left of the ChartRect and a value greater than 1.0 is right of the ChartRect. For the Y coordinate, 0.0 is the top and 1.0 is the bottom. PaneFraction Coordinates are specified as a fraction of the Rect . That is, for the X coordinate, 0.0 is at the left edge of the Rect and 1.0 is at the right edge of the Rect. A value less than zero is left of the Rect and a value greater than 1.0 is right of the Rect. For the Y coordinate, 0.0 is the top and 1.0 is the bottom. Note that any value less than zero or greater than 1.0 will be outside the Rect, and therefore clipped. XChartFractionY2Scale The X coordinate is specified as a fraction of the Rect and the Y coordinate is specified as a Y2 scale value. XChartFractionYPaneFraction The X coordinate is specified as a fraction of the Rect , and the Y coordinate is specified as a fraction of the Rect . XChartFractionYScale The X coordinate is specified as a fraction of the Rect and the Y coordinate is specified as a Y scale value. XPaneFractionYChartFraction The X coordinate is specified as a fraction of the Rect , and the Y coordinate is specified as a fraction of the Rect . XScaleYChartFraction The X coordinate is specified as an X Scale value, and the Y coordinate is specified as a fraction of the Rect . See Also CoordinateFrame"
  },
  "api/ZedGraph.CurveItem.Comparer.html": {
    "href": "api/ZedGraph.CurveItem.Comparer.html",
    "title": "Class CurveItem.Comparer",
    "keywords": "Class CurveItem.Comparer Compares CurveItem 's based on the point value at the specified index and for the specified axis. Sort() Inheritance Object CurveItem.Comparer Implements IComparer < CurveItem > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public class Comparer : IComparer<CurveItem> Constructors | Improve this Doc View Source Comparer(SortType, Int32) Constructor for Comparer. Declaration public Comparer(SortType type, int index) Parameters Type Name Description SortType type The axis type on which to sort. Int32 index The index number of the point on which to sort Methods | Improve this Doc View Source Compare(CurveItem, CurveItem) Compares two CurveItem s using the previously specified index value and axis. Sorts in descending order. Declaration public int Compare(CurveItem l, CurveItem r) Parameters Type Name Description CurveItem l Curve to the left. CurveItem r Curve to the right. Returns Type Description Int32 -1, 0, or 1 depending on l.X's relation to r.X Implements System.Collections.Generic.IComparer<T>"
  },
  "api/ZedGraph.CurveItem.html": {
    "href": "api/ZedGraph.CurveItem.html",
    "title": "Class CurveItem",
    "keywords": "Class CurveItem This class contains the data and methods for an individual curve within a graph pane. It carries the settings for the curve including the key and item names, colors, symbols and sizes, linetypes, etc. Inheritance Object CurveItem BarItem ErrorBarItem GasGaugeNeedle GasGaugeRegion JapaneseCandleStickItem LineItem OHLCBarItem PieItem Implements ISerializable ICloneable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public abstract class CurveItem : ISerializable, ICloneable Constructors | Improve this Doc View Source CurveItem() Declaration public CurveItem() | Improve this Doc View Source CurveItem(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected CurveItem(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source CurveItem(String) CurveItem constructor that specifies the label of the CurveItem. This is the same as CurveItem(label, null, null) . CurveItem(String, Double[], Double[]) Declaration public CurveItem(string label) Parameters Type Name Description String label A string label (legend entry) for this curve | Improve this Doc View Source CurveItem(String, Double[], Double[]) CurveItem constructor the pre-specifies the curve label, the x and y data values as a IPointList , the curve type (Bar or Line/Symbol), the Color , and the SymbolType . Other properties of the curve are defaulted to the values in the GraphPane.Default class. Declaration public CurveItem(string label, double[] x, double[] y) Parameters Type Name Description String label A string label (legend entry) for this curve Double [] x An array of double precision values that define the independent (X axis) values for this curve Double [] y An array of double precision values that define the dependent (Y axis) values for this curve | Improve this Doc View Source CurveItem(String, IPointList) CurveItem constructor the pre-specifies the curve label, the x and y data values as a IPointList , the curve type (Bar or Line/Symbol), the Color , and the SymbolType . Other properties of the curve are defaulted to the values in the GraphPane.Default class. Declaration public CurveItem(string label, IPointList points) Parameters Type Name Description String label A string label (legend entry) for this curve IPointList points A IPointList of double precision value pairs that define the X and Y values for this curve | Improve this Doc View Source CurveItem(CurveItem) The Copy Constructor Declaration public CurveItem(CurveItem rhs) Parameters Type Name Description CurveItem rhs The CurveItem object from which to copy Fields | Improve this Doc View Source _isOverrideOrdinal protected field that stores a boolean value which allows you to override the normal ordinal axis behavior. Use the public property IsOverrideOrdinal to access this value. Declaration [CLSCompliant(false)] protected bool _isOverrideOrdinal Field Value Type Description Boolean | Improve this Doc View Source _isSelectable Protected field that stores the boolean value that determines whether this CurveItem can be selected in the graph. Declaration [CLSCompliant(false)] protected bool _isSelectable Field Value Type Description Boolean | Improve this Doc View Source _isSelected Protected field that stores the boolean value that determines whether this CurveItem is selected on the graph. Use the public property IsSelected to access this value. Note that this value changes the curve display color, but it does not affect the display of the legend entry. To hide the legend entry, you have to set IsVisible to false. Declaration [CLSCompliant(false)] protected bool _isSelected Field Value Type Description Boolean | Improve this Doc View Source _isVisible protected field that stores the boolean value that determines whether this CurveItem is visible on the graph. Use the public property IsVisible to access this value. Note that this value turns the curve display on or off, but it does not affect the display of the legend entry. To hide the legend entry, you have to set IsVisible to false. Declaration [CLSCompliant(false)] protected bool _isVisible Field Value Type Description Boolean | Improve this Doc View Source _isX2Axis protected field that stores the boolean value that determines whether this CurveItem is on the bottom X axis or the top X axis (X2). Use the public property IsX2Axis to access this value. Declaration [CLSCompliant(false)] protected bool _isX2Axis Field Value Type Description Boolean | Improve this Doc View Source _isY2Axis protected field that stores the boolean value that determines whether this CurveItem is on the left Y axis or the right Y axis (Y2). Use the public property IsY2Axis to access this value. Declaration [CLSCompliant(false)] protected bool _isY2Axis Field Value Type Description Boolean | Improve this Doc View Source _points The IPointList of value sets that represent this CurveItem . The size of this list determines the number of points that are plotted. Note that values defined as System.Double.MaxValue are considered \"missing\" values (see Missing ), and are not plotted. The curve will have a break at these points to indicate the values are missing. Declaration [CLSCompliant(false)] protected IPointList _points Field Value Type Description IPointList | Improve this Doc View Source _yAxisIndex protected field that stores the index number of the Y Axis to which this CurveItem belongs. Use the public property YAxisIndex to access this value. Declaration [CLSCompliant(false)] protected int _yAxisIndex Field Value Type Description Int32 | Improve this Doc View Source schema Current schema value that defines the version of the serialized file Declaration public const int schema = 11 Field Value Type Description Int32 | Improve this Doc View Source Tag A tag object for use by the user. This can be used to store additional information associated with the CurveItem . ZedGraph does not use this value for any purpose. Declaration public object Tag Field Value Type Description Object Remarks Note that, if you are going to Serialize ZedGraph data, then any type that you store in Tag must be a serializable type (or it will cause an exception). Properties | Improve this Doc View Source Color The Line / Symbol / Bar color (FillColor for the Bar). This is a common access to Color , Color , and Color properties for this curve. Declaration public Color Color { get; set; } Property Value Type Description Color | Improve this Doc View Source IsBar Determines whether this CurveItem is a BarItem . Declaration public bool IsBar { get; } Property Value Type Description Boolean true for a bar chart, or false for a line or pie graph | Improve this Doc View Source IsLine Determines whether this CurveItem is a LineItem . Declaration public bool IsLine { get; } Property Value Type Description Boolean true for a line chart, or false for a bar type | Improve this Doc View Source IsOverrideOrdinal Gets or sets a value which allows you to override the normal ordinal axis behavior. Declaration public bool IsOverrideOrdinal { get; set; } Property Value Type Description Boolean Remarks Normally for an ordinal axis type, the actual data values corresponding to the ordinal axis will be ignored (essentially they are replaced by ordinal values, e.g., 1, 2, 3, etc). If IsOverrideOrdinal is true, then the user data values will be used (even if they don't make sense). Fractional values are allowed, such that a value of 1.5 is between the first and second ordinal position, etc. See Also Ordinal Text | Improve this Doc View Source IsPie Determines whether this CurveItem is a PieItem . Declaration public bool IsPie { get; } Property Value Type Description Boolean true for a pie chart, or false for a line or bar graph | Improve this Doc View Source IsSelectable Determines whether this CurveItem can be selected in the graph. Declaration public bool IsSelectable { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsSelected Determines whether this CurveItem is selected on the graph. Note that this value changes the curve displayed color, but it does not affect the display of the legend entry. To hide the legend entry, you have to set IsVisible to false. Declaration public bool IsSelected { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsVisible Determines whether this CurveItem is visible on the graph. Note that this value turns the curve display on or off, but it does not affect the display of the legend entry. To hide the legend entry, you have to set IsVisible to false. Declaration public bool IsVisible { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsX2Axis Gets or sets a value that determines which X axis this CurveItem is assigned to. Declaration public bool IsX2Axis { get; set; } Property Value Type Description Boolean true to assign the curve to the X2Axis , false to assign the curve to the XAxis Remarks The XAxis is on the bottom side of the graph and the X2Axis is on the top side. Assignment to an axis determines the scale that is used to draw the curve on the graph. | Improve this Doc View Source IsY2Axis Gets or sets a value that determines which Y axis this CurveItem is assigned to. Declaration public bool IsY2Axis { get; set; } Property Value Type Description Boolean true to assign the curve to the Y2Axis , false to assign the curve to the YAxis Remarks The YAxis is on the left side of the graph and the Y2Axis is on the right side. Assignment to an axis determines the scale that is used to draw the curve on the graph. Note that this value is used in combination with the YAxisIndex to determine which of the Y Axes (if there are multiples) this curve belongs to. | Improve this Doc View Source Item[Int32] An accessor for the PointPair datum for this CurveItem . Index is the ordinal reference (zero based) of the point. Declaration public PointPair this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description PointPair | Improve this Doc View Source Label A Label instance that represents the Legend entry for the this CurveItem object Declaration public Label Label { get; set; } Property Value Type Description Label | Improve this Doc View Source Link Gets or sets the hyperlink information for this CurveItem . Declaration public Link Link { get; set; } Property Value Type Description Link | Improve this Doc View Source NPts Readonly property that gives the number of points that define this CurveItem object, which is the number of points in the Points data collection. Declaration public int NPts { get; } Property Value Type Description Int32 | Improve this Doc View Source Points The IPointList of X,Y point sets that represent this CurveItem . Declaration public IPointList Points { get; set; } Property Value Type Description IPointList | Improve this Doc View Source YAxisIndex Gets or sets the index number of the Y Axis to which this CurveItem belongs. Declaration public int YAxisIndex { get; set; } Property Value Type Description Int32 Remarks This value is essentially an index number into the YAxisList or Y2AxisList , depending on the setting of IsY2Axis . Methods | Improve this Doc View Source AddPoint(Double, Double) Add a single x,y coordinate point to the end of the points collection for this curve. Declaration public void AddPoint(double x, double y) Parameters Type Name Description Double x The X coordinate value Double y The Y coordinate value | Improve this Doc View Source AddPoint(PointPair) Add a PointPair object to the end of the points collection for this curve. Declaration public void AddPoint(PointPair point) Parameters Type Name Description PointPair point A reference to the PointPair object to be added Remarks This method will only work if the IPointList instance reference at Points supports the IPointListEdit interface. Otherwise, it does nothing. | Improve this Doc View Source BaseAxis(GraphPane) Returns a reference to the Axis object that is the \"base\" (independent axis) from which the values are drawn. Declaration public virtual Axis BaseAxis(GraphPane pane) Parameters Type Name Description GraphPane pane Returns Type Description Axis Remarks This property is determined by the value of Base for BarItem , ErrorBarItem , and HiLowBarItem types. It is always the X axis for regular LineItem types. Note that the Base setting can override the IsY2Axis and YAxisIndex settings for bar types (this is because all the bars that are clustered together must share the same base axis). See Also BarBase ValueAxis(GraphPane) | Improve this Doc View Source Clear() Clears the points from this CurveItem . This is the same as CurveItem.Points.Clear() . Declaration public void Clear() Remarks This method will only work if the IPointList instance reference at Points supports the IPointListEdit interface. Otherwise, it does nothing. | Improve this Doc View Source Draw(Graphics, GraphPane, Int32, Single) Do all rendering associated with this CurveItem to the specified Graphics device. This method is normally only called by the Draw method of the parent CurveList collection object. Declaration public abstract void Draw(Graphics g, GraphPane pane, int pos, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Int32 pos The ordinal position of the current Bar curve. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. | Improve this Doc View Source DrawLegendKey(Graphics, GraphPane, RectangleF, Single) Draw a legend key entry for this CurveItem at the specified location. This abstract base method passes through to DrawLegendKey(Graphics, GraphPane, RectangleF, Single) or DrawLegendKey(Graphics, GraphPane, RectangleF, Single) to do the rendering. Declaration public abstract void DrawLegendKey(Graphics g, GraphPane pane, RectangleF rect, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. RectangleF rect The RectangleF struct that specifies the location for the legend key Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. | Improve this Doc View Source GetBarWidth(GraphPane) Calculate the width of each bar, depending on the actual bar type Declaration public float GetBarWidth(GraphPane pane) Parameters Type Name Description GraphPane pane Returns Type Description Single The width for an individual bar, in pixel units | Improve this Doc View Source GetCoords(GraphPane, Int32, out String) Determine the coords for the rectangle associated with a specified point for this CurveItem Declaration public abstract bool GetCoords(GraphPane pane, int i, out string coords) Parameters Type Name Description GraphPane pane The GraphPane to which this curve belongs Int32 i The index of the point of interest String coords A list of coordinates that represents the \"rect\" for this point (used in an html AREA tag) Returns Type Description Boolean true if it's a valid point, false otherwise | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public virtual void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source GetRange(out Double, out Double, out Double, out Double, Boolean, Boolean, GraphPane) Go through the list of PointPair data values for this CurveItem and determine the minimum and maximum values in the data. Declaration public virtual void GetRange(out double xMin, out double xMax, out double yMin, out double yMax, bool ignoreInitial, bool isBoundedRanges, GraphPane pane) Parameters Type Name Description Double xMin The minimum X value in the range of data Double xMax The maximum X value in the range of data Double yMin The minimum Y value in the range of data Double yMax The maximum Y value in the range of data Boolean ignoreInitial ignoreInitial is a boolean value that affects the data range that is considered for the automatic scale ranging (see IsIgnoreInitial ). If true, then initial data points where the Y value is zero are not included when automatically determining the scale Min , Max , and MajorStep size. All data after the first non-zero Y value are included. Boolean isBoundedRanges Determines if the auto-scaled axis ranges will subset the data points based on any manually set scale range values. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. See Also IsBoundedRanges | Improve this Doc View Source GetXAxis(GraphPane) Get the X Axis instance (either XAxis or X2Axis ) to which this CurveItem belongs. Declaration public Axis GetXAxis(GraphPane pane) Parameters Type Name Description GraphPane pane The GraphPane object to which this curve belongs. Returns Type Description Axis Either a XAxis or X2Axis to which this CurveItem belongs. | Improve this Doc View Source GetYAxis(GraphPane) Get the Y Axis instance (either YAxis or Y2Axis ) to which this CurveItem belongs. Declaration public Axis GetYAxis(GraphPane pane) Parameters Type Name Description GraphPane pane The GraphPane object to which this curve belongs. Returns Type Description Axis Either a YAxis or Y2Axis to which this CurveItem belongs. Remarks This method safely retrieves a Y Axis instance from either the YAxisList or the Y2AxisList using the values of YAxisIndex and IsY2Axis . If the value of YAxisIndex is out of bounds, the default YAxis or Y2Axis is used. | Improve this Doc View Source GetYAxisIndex(GraphPane) Get the index of the Y Axis in the YAxis or Y2Axis list to which this CurveItem belongs. Declaration public int GetYAxisIndex(GraphPane pane) Parameters Type Name Description GraphPane pane The GraphPane object to which this curve belongs. Returns Type Description Int32 An integer value indicating which index position in the list applies to this CurveItem Remarks This method safely retrieves a Y Axis index into either the YAxisList or the Y2AxisList using the values of YAxisIndex and IsY2Axis . If the value of YAxisIndex is out of bounds, the default YAxis or Y2Axis is used, which is index zero. | Improve this Doc View Source MakeUnique() Loads some pseudo unique colors/symbols into this CurveItem. This is the same as MakeUnique(ColorSymbolRotator.StaticInstance) . StaticInstance ColorSymbolRotator MakeUnique(ColorSymbolRotator) Declaration public void MakeUnique() | Improve this Doc View Source MakeUnique(ColorSymbolRotator) Loads some pseudo unique colors/symbols into this CurveItem. This is mainly useful for differentiating a set of new CurveItems without having to pick your own colors/symbols. MakeUnique(ColorSymbolRotator) Declaration public virtual void MakeUnique(ColorSymbolRotator rotator) Parameters Type Name Description ColorSymbolRotator rotator The ColorSymbolRotator that is used to pick the color and symbol for this method call. | Improve this Doc View Source RemovePoint(Int32) Removes a single point from this CurveItem . Declaration public void RemovePoint(int index) Parameters Type Name Description Int32 index The ordinal position of the point to be removed. Remarks This method will only work if the IPointList instance reference at Points supports the IPointListEdit interface. Otherwise, it does nothing. | Improve this Doc View Source ValueAxis(GraphPane) Returns a reference to the Axis object that is the \"value\" (dependent axis) from which the points are drawn. Declaration public virtual Axis ValueAxis(GraphPane pane) Parameters Type Name Description GraphPane pane Returns Type Description Axis Remarks This property is determined by the value of Base for BarItem , ErrorBarItem , and HiLowBarItem types. It is always the Y axis for regular LineItem types. See Also BarBase BaseAxis(GraphPane) Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone. Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Remarks Note that this method must be called with an explicit cast to ICloneable, and that it is inherently virtual. For example: ParentClass foo = new ChildClass(); ChildClass bar = (ChildClass) ((ICloneable)foo).Clone(); Assume that ChildClass is inherited from ParentClass. Even though foo is declared with ParentClass, it is actually an instance of ChildClass. Calling the ICloneable implementation of Clone() on foo actually calls ChildClass.Clone() as if it were a virtual function. Implements System.Runtime.Serialization.ISerializable System.ICloneable"
  },
  "api/ZedGraph.CurveList.html": {
    "href": "api/ZedGraph.CurveList.html",
    "title": "Class CurveList",
    "keywords": "Class CurveList A collection class containing a list of CurveItem objects that define the set of curves to be displayed on the graph. Inheritance Object List < CurveItem > CurveList Selection Implements IList < CurveItem > ICollection < CurveItem > IEnumerable < CurveItem > IList ICollection IEnumerable ICloneable Inherited Members System.Collections.Generic.List<ZedGraph.CurveItem>.System.Collections.IList.get_Item(System.Int32) System.Collections.Generic.List<ZedGraph.CurveItem>.System.Collections.IList.set_Item(System.Int32, System.Object) List<CurveItem>.Add(CurveItem) List<CurveItem>.AddRange(IEnumerable<CurveItem>) List<CurveItem>.AsReadOnly() List<CurveItem>.BinarySearch(Int32, Int32, CurveItem, IComparer<CurveItem>) List<CurveItem>.BinarySearch(CurveItem) List<CurveItem>.BinarySearch(CurveItem, IComparer<CurveItem>) List<CurveItem>.Clear() List<CurveItem>.Contains(CurveItem) List<CurveItem>.ConvertAll<TOutput>(Converter<CurveItem, TOutput>) List<CurveItem>.CopyTo(Int32, CurveItem[], Int32, Int32) List<CurveItem>.CopyTo(CurveItem[]) List<CurveItem>.CopyTo(CurveItem[], Int32) List<CurveItem>.Exists(Predicate<CurveItem>) List<CurveItem>.Find(Predicate<CurveItem>) List<CurveItem>.FindAll(Predicate<CurveItem>) List<CurveItem>.FindIndex(Int32, Int32, Predicate<CurveItem>) List<CurveItem>.FindIndex(Int32, Predicate<CurveItem>) List<CurveItem>.FindIndex(Predicate<CurveItem>) List<CurveItem>.FindLast(Predicate<CurveItem>) List<CurveItem>.FindLastIndex(Int32, Int32, Predicate<CurveItem>) List<CurveItem>.FindLastIndex(Int32, Predicate<CurveItem>) List<CurveItem>.FindLastIndex(Predicate<CurveItem>) List<CurveItem>.ForEach(Action<CurveItem>) List<CurveItem>.GetEnumerator() List<CurveItem>.GetRange(Int32, Int32) List<CurveItem>.IndexOf(CurveItem) List<CurveItem>.IndexOf(CurveItem, Int32) List<CurveItem>.IndexOf(CurveItem, Int32, Int32) List<CurveItem>.Insert(Int32, CurveItem) List<CurveItem>.InsertRange(Int32, IEnumerable<CurveItem>) List<CurveItem>.LastIndexOf(CurveItem) List<CurveItem>.LastIndexOf(CurveItem, Int32) List<CurveItem>.LastIndexOf(CurveItem, Int32, Int32) List<CurveItem>.Remove(CurveItem) List<CurveItem>.RemoveAll(Predicate<CurveItem>) List<CurveItem>.RemoveAt(Int32) List<CurveItem>.RemoveRange(Int32, Int32) List<CurveItem>.Reverse() List<CurveItem>.Reverse(Int32, Int32) List<CurveItem>.Sort() List<CurveItem>.Sort(IComparer<CurveItem>) List<CurveItem>.Sort(Comparison<CurveItem>) List<CurveItem>.Sort(Int32, Int32, IComparer<CurveItem>) List<CurveItem>.IEnumerable<CurveItem>.GetEnumerator() List<CurveItem>.ICollection.CopyTo(Array, Int32) List<CurveItem>.IEnumerable.GetEnumerator() List<CurveItem>.IList.Add(Object) List<CurveItem>.IList.Contains(Object) List<CurveItem>.IList.IndexOf(Object) List<CurveItem>.IList.Insert(Int32, Object) List<CurveItem>.IList.Remove(Object) List<CurveItem>.ToArray() List<CurveItem>.TrimExcess() List<CurveItem>.TrueForAll(Predicate<CurveItem>) List<CurveItem>.Capacity List<CurveItem>.Count List<CurveItem>.Item[Int32] List<CurveItem>.ICollection<CurveItem>.IsReadOnly List<CurveItem>.ICollection.IsSynchronized List<CurveItem>.ICollection.SyncRoot List<CurveItem>.IList.IsFixedSize List<CurveItem>.IList.IsReadOnly List<CurveItem>.IList.Item[Int32] Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class CurveList : List<CurveItem>, IList<CurveItem>, ICollection<CurveItem>, IEnumerable<CurveItem>, IList, ICollection, IEnumerable, ICloneable Constructors | Improve this Doc View Source CurveList() Default constructor for the collection class Declaration public CurveList() | Improve this Doc View Source CurveList(CurveList) The Copy Constructor Declaration public CurveList(CurveList rhs) Parameters Type Name Description CurveList rhs The XAxis object from which to copy Properties | Improve this Doc View Source Backward Iterate backwards through the CurveList items. Declaration public IEnumerable<CurveItem> Backward { get; } Property Value Type Description IEnumerable < CurveItem > | Improve this Doc View Source Forward Iterate forward through the CurveList items. Declaration public IEnumerable<CurveItem> Forward { get; } Property Value Type Description IEnumerable < CurveItem > | Improve this Doc View Source IsPieOnly Read only property that determines if all items in the CurveList are Pies. Declaration public bool IsPieOnly { get; } Property Value Type Description Boolean | Improve this Doc View Source Item[String] Indexer to access the specified CurveItem object by its Label string. Declaration public CurveItem this[string label] { get; } Parameters Type Name Description String label The string label of the CurveItem object to be accessed. Property Value Type Description CurveItem A CurveItem object reference. | Improve this Doc View Source MaxPts Read only value for the maximum number of points in any of the curves in the list. Declaration public int MaxPts { get; } Property Value Type Description Int32 | Improve this Doc View Source NumBars Read only property that returns the number of curves in the list that are of type BarItem . This does not include HiLowBarItem or ErrorBarItem types. Declaration public int NumBars { get; } Property Value Type Description Int32 | Improve this Doc View Source NumClusterableBars Read only property that returns the number of curves in the list that are potentially \"clusterable\", which includes BarItem and HiLowBarItem types. This does not include ErrorBarItem , OHLCBarItem , JapaneseCandleStickItem , etc. types. Declaration public int NumClusterableBars { get; } Property Value Type Description Int32 Remarks Note that this property is only the number of bars that COULD BE clustered. The actual cluster settings are not considered. | Improve this Doc View Source NumPies Read only property that returns the number of pie slices in the list (class type is PieItem ). Declaration public int NumPies { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public CurveList Clone() Returns Type Description CurveList A new, independent copy of this class | Improve this Doc View Source Draw(Graphics, GraphPane, Single) Render all the CurveItem objects in the list to the specified Graphics device by calling the Draw(Graphics, GraphPane, Int32, Single) member function of each CurveItem object. Declaration public void Draw(Graphics g, GraphPane pane, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. | Improve this Doc View Source GetBarItemPos(GraphPane, BarItem) Find the ordinal position of the specified BarItem within the CurveList . This position only counts types, ignoring all other types. Declaration public int GetBarItemPos(GraphPane pane, BarItem barItem) Parameters Type Name Description GraphPane pane The GraphPane of interest BarItem barItem The BarItem for which to search. Returns Type Description Int32 The ordinal position of the specified bar, or -1 if the bar was not found. | Improve this Doc View Source GetRange(Boolean, Boolean, GraphPane) Go through each CurveItem object in the collection, calling the GetRange(out Double, out Double, out Double, out Double, Boolean, Boolean, GraphPane) member to determine the minimum and maximum values in the Points list of data value pairs. If the curves include a stack bar, handle within the current GetRange method. In the event that no data are available, a default range of min=0.0 and max=1.0 are returned. If the Y axis has a valid data range and the Y2 axis not, then the Y2 range will be a duplicate of the Y range. Vice-versa for the Y2 axis having valid data when the Y axis does not. If any CurveItem in the list has a missing PointPairList , a new empty one will be generated. Declaration public void GetRange(bool bIgnoreInitial, bool isBoundedRanges, GraphPane pane) Parameters Type Name Description Boolean bIgnoreInitial ignoreInitial is a boolean value that affects the data range that is considered for the automatic scale ranging (see IsIgnoreInitial ). If true, then initial data points where the Y value is zero are not included when automatically determining the scale Min , Max , and MajorStep size. All data after the first non-zero Y value are included. Boolean isBoundedRanges Determines if the auto-scaled axis ranges will subset the data points based on any manually set scale range values. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. See Also IsBoundedRanges | Improve this Doc View Source HasData() Determine if there is any data in any of the CurveItem objects for this graph. This method does not verify valid data, it only checks to see if NPts > 0. Declaration public bool HasData() Returns Type Description Boolean true if there is any data, false otherwise | Improve this Doc View Source IndexOf(String) Return the zero-based position index of the CurveItem with the specified Label . Declaration public int IndexOf(string label) Parameters Type Name Description String label The String label that is in the Label attribute of the item to be found. Returns Type Description Int32 The zero-based index of the specified CurveItem , or -1 if the CurveItem is not in the list See Also IndexOfTag(String) | Improve this Doc View Source IndexOfTag(String) Return the zero-based position index of the CurveItem with the specified Tag . Declaration public int IndexOfTag(string tag) Parameters Type Name Description String tag The String tag that is in the Tag attribute of the item to be found. Returns Type Description Int32 The zero-based index of the specified CurveItem , or -1 if the CurveItem is not in the list Remarks In order for this method to work, the Tag property must be of type String . | Improve this Doc View Source Move(Int32, Int32) Move the position of the object at the specified index to the new relative position in the list. Declaration public int Move(int index, int relativePos) Parameters Type Name Description Int32 index The zero-based index of the object to be moved. Int32 relativePos The relative number of positions to move the object. A value of -1 will move the object one position earlier in the list, a value of 1 will move it one position later. To move an item to the beginning of the list, use a large negative value (such as -999). To move it to the end of the list, use a large positive value. Returns Type Description Int32 The new position for the object, or -1 if the object was not found. Remarks For Graphic type objects, this method controls the Z-Order of the items. Objects at the beginning of the list appear in front of objects at the end of the list. | Improve this Doc View Source Sort(SortType, Int32) Sorts the list according to the point values at the specified index and for the specified axis. Declaration public void Sort(SortType type, int index) Parameters Type Name Description SortType type Int32 index Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable System.ICloneable"
  },
  "api/ZedGraph.DataPoint.html": {
    "href": "api/ZedGraph.DataPoint.html",
    "title": "Struct DataPoint",
    "keywords": "Struct DataPoint A simple storage struct to maintain an individual sampling of data. This only contains two data values in order to reduce to memory load for large datasets. (e.g., no Tag or Z property) Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct DataPoint Fields | Improve this Doc View Source X The X value for the point, stored as a double type. Declaration public double X Field Value Type Description Double | Improve this Doc View Source Y The Y value for the point, stored as a double type. Declaration public double Y Field Value Type Description Double"
  },
  "api/ZedGraph.DataSourcePointList.html": {
    "href": "api/ZedGraph.DataSourcePointList.html",
    "title": "Class DataSourcePointList",
    "keywords": "Class DataSourcePointList Inheritance Object DataSourcePointList Implements IPointList ICloneable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.WinForms.dll Syntax [Serializable] public class DataSourcePointList : IPointList, ICloneable Constructors | Improve this Doc View Source DataSourcePointList() Default Constructor Declaration public DataSourcePointList() | Improve this Doc View Source DataSourcePointList(DataSourcePointList) Constructor to initialize the DataSourcePointList from an existing DataSourcePointList Declaration public DataSourcePointList(DataSourcePointList rhs) Parameters Type Name Description DataSourcePointList rhs Properties | Improve this Doc View Source BindingSource The BindingSource object from which to get the bound data Declaration public BindingSource BindingSource { get; } Property Value Type Description BindingSource Remarks Typically, you set the DataSource property to a reference to your database, table or list object. The DataMember property would be set to the name of the datatable within the DataSource , if applicable. | Improve this Doc View Source Count gets the number of points available in the list Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source DataSource The table or list object from which to extract the data values. Declaration public object DataSource { get; set; } Property Value Type Description Object Remarks This property is just an alias for DataSource . | Improve this Doc View Source Item[Int32] Indexer to access the specified PointPair object by its ordinal position in the list. Declaration public PointPair this[int index] { get; } Parameters Type Name Description Int32 index The ordinal position (zero-based) of the PointPair object to be accessed. Property Value Type Description PointPair A PointPair object reference. | Improve this Doc View Source TagDataMember The String name of the property or column from which to obtain the tag values for the chart. Declaration public string TagDataMember { get; set; } Property Value Type Description String Remarks Set this to null leave the tag values set to null. If this references string data, then the tags may be used as tooltips using the IsShowPointValues option. | Improve this Doc View Source XDataMember The String name of the property or column from which to obtain the X data values for the chart. Declaration public string XDataMember { get; set; } Property Value Type Description String Remarks Set this to null leave the X data values set to Missing | Improve this Doc View Source YDataMember The String name of the property or column from which to obtain the Y data values for the chart. Declaration public string YDataMember { get; set; } Property Value Type Description String Remarks Set this to null leave the Y data values set to Missing | Improve this Doc View Source ZDataMember The String name of the property or column from which to obtain the Z data values for the chart. Declaration public string ZDataMember { get; set; } Property Value Type Description String Remarks Set this to null leave the Z data values set to Missing Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public DataSourcePointList Clone() Returns Type Description DataSourcePointList A new, independent copy of this class Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements IPointList System.ICloneable See Also IPointList IPointListEdit"
  },
  "api/ZedGraph.DateUnit.html": {
    "href": "api/ZedGraph.DateUnit.html",
    "title": "Enum DateUnit",
    "keywords": "Enum DateUnit Enumeration type for the various axis date and time unit types that are available Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public enum DateUnit Fields Name Description Day Daily units MajorUnit and MinorUnit Hour Hourly units MajorUnit and MinorUnit Millisecond Millisecond units MajorUnit and MinorUnit Minute Minute units MajorUnit and MinorUnit Month Monthly units MajorUnit and MinorUnit Second Second units MajorUnit and MinorUnit Year Yearly units MajorUnit and MinorUnit"
  },
  "api/ZedGraph.EllipseObj.html": {
    "href": "api/ZedGraph.EllipseObj.html",
    "title": "Class EllipseObj",
    "keywords": "Class EllipseObj A class that represents a bordered and/or filled ellipse object on the graph. A list of EllipseObj objects is maintained by the GraphObjList collection class. The ellipse is defined as the ellipse that would be contained by the rectangular box as defined by the Location property. Inheritance Object GraphObj BoxObj EllipseObj Implements ICloneable ISerializable Inherited Members BoxObj._fill BoxObj._border BoxObj.Fill BoxObj.Border BoxObj.schema2 BoxObj.GetCoords(PaneBase, Graphics, Single, String, String) GraphObj._location GraphObj._isVisible GraphObj._isClippedToChartRect GraphObj.Tag GraphObj.Location GraphObj.ZOrder GraphObj.IsVisible GraphObj.IsClippedToChartRect GraphObj.Link GraphObj.IsInFrontOfData GraphObj.schema Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class EllipseObj : BoxObj, ICloneable, ISerializable Constructors | Improve this Doc View Source EllipseObj() A default constructor that places the EllipseObj at location (0,0), with width/height of (1,1). Other properties are defaulted. Declaration public EllipseObj() | Improve this Doc View Source EllipseObj(Double, Double, Double, Double) A constructor that allows the position and size of the EllipseObj to be pre-specified. Other properties are defaulted. Declaration public EllipseObj(double x, double y, double width, double height) Parameters Type Name Description Double x The x location for this BoxObj . This will be in units determined by CoordinateFrame . Double y The y location for this BoxObj . This will be in units determined by CoordinateFrame . Double width The width of this BoxObj . This will be in units determined by CoordinateFrame . Double height The height of this BoxObj . This will be in units determined by CoordinateFrame . | Improve this Doc View Source EllipseObj(Double, Double, Double, Double, Color, Color) A constructor that allows the position, border color, and solid fill color of the EllipseObj to be pre-specified. Declaration public EllipseObj(double x, double y, double width, double height, Color borderColor, Color fillColor) Parameters Type Name Description Double x The x location for this BoxObj . This will be in units determined by CoordinateFrame . Double y The y location for this BoxObj . This will be in units determined by CoordinateFrame . Double width The width of this BoxObj . This will be in units determined by CoordinateFrame . Double height The height of this BoxObj . This will be in units determined by CoordinateFrame . Color borderColor An arbitrary Color specification for the ellipse border Color fillColor An arbitrary Color specification for the ellipse fill (will be a solid color fill) | Improve this Doc View Source EllipseObj(Double, Double, Double, Double, Color, Color, Color) A constructor that allows the position, border color, and two-color gradient fill colors of the EllipseObj to be pre-specified. Declaration public EllipseObj(double x, double y, double width, double height, Color borderColor, Color fillColor1, Color fillColor2) Parameters Type Name Description Double x The x location for this BoxObj . This will be in units determined by CoordinateFrame . Double y The y location for this BoxObj . This will be in units determined by CoordinateFrame . Double width The width of this BoxObj . This will be in units determined by CoordinateFrame . Double height The height of this BoxObj . This will be in units determined by CoordinateFrame . Color borderColor An arbitrary Color specification for the ellipse border Color fillColor1 An arbitrary Color specification for the start of the ellipse gradient fill Color fillColor2 An arbitrary Color specification for the end of the ellipse gradient fill | Improve this Doc View Source EllipseObj(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected EllipseObj(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source EllipseObj(BoxObj) The Copy Constructor Declaration public EllipseObj(BoxObj rhs) Parameters Type Name Description BoxObj rhs The EllipseObj object from which to copy Fields | Improve this Doc View Source schema3 Current schema value that defines the version of the serialized file Declaration public const int schema3 = 10 Field Value Type Description Int32 Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public EllipseObj Clone() Returns Type Description EllipseObj A new, independent copy of this class | Improve this Doc View Source Draw(Graphics, PaneBase, Single) Render this object to the specified Graphics device. Declaration public override void Draw(Graphics g, PaneBase pane, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. PaneBase pane A reference to the PaneBase object that is the parent or owner of this object. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Overrides BoxObj.Draw(Graphics, PaneBase, Single) Remarks This method is normally only called by the Draw method of the parent GraphObjList collection object. | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides BoxObj.GetObjectData(SerializationInfo, StreamingContext) | Improve this Doc View Source PointInBox(PointF, PaneBase, Graphics, Single) Determine if the specified screen point lies inside the bounding box of this BoxObj . Declaration public override bool PointInBox(PointF pt, PaneBase pane, Graphics g, float scaleFactor) Parameters Type Name Description PointF pt The screen point, in pixels PaneBase pane A reference to the PaneBase object that is the parent or owner of this object. Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Returns Type Description Boolean true if the point lies in the bounding box, false otherwise Overrides BoxObj.PointInBox(PointF, PaneBase, Graphics, Single) Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.ErrorBar.Default.html": {
    "href": "api/ZedGraph.ErrorBar.Default.html",
    "title": "Struct ErrorBar.Default",
    "keywords": "Struct ErrorBar.Default A simple struct that defines the default property values for the ErrorBar class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source Color The default color for drawing error bars ( Color property). Declaration public static Color Color Field Value Type Description Color | Improve this Doc View Source IsVisible The default display mode for symbols ( IsVisible property). true to display symbols, false to hide them. Declaration public static bool IsVisible Field Value Type Description Boolean | Improve this Doc View Source PenWidth The default pen width to be used for drawing error bars ( PenWidth property). Units are points. Declaration public static float PenWidth Field Value Type Description Single | Improve this Doc View Source Size The default size for curve symbols ( Size property), in units of points. Declaration public static float Size Field Value Type Description Single | Improve this Doc View Source Type The default symbol for drawing at the top and bottom of the error bar (see Symbol ). Declaration public static SymbolType Type Field Value Type Description SymbolType"
  },
  "api/ZedGraph.ErrorBar.html": {
    "href": "api/ZedGraph.ErrorBar.html",
    "title": "Class ErrorBar",
    "keywords": "Class ErrorBar This class handles the drawing of the curve ErrorBar objects. The Error Bars are the vertical lines with a symbol at each end. Inheritance Object ErrorBar Implements ICloneable ISerializable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class ErrorBar : ICloneable, ISerializable Remarks To draw \"I-Beam\" bars, the symbol type defaults to HDash , which is just a horizontal line. If BarBase is Y-oriented, then the symbol type should be set to VDash to get the same effect. Constructors | Improve this Doc View Source ErrorBar() Default constructor that sets all ErrorBar properties to default values as defined in the ErrorBar.Default class. Declaration public ErrorBar() | Improve this Doc View Source ErrorBar(Color) Default constructor that sets the Color as specified, and the remaining ErrorBar properties to default values as defined in the ErrorBar.Default class. Declaration public ErrorBar(Color color) Parameters Type Name Description Color color A Color value indicating the color of the symbol | Improve this Doc View Source ErrorBar(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected ErrorBar(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source ErrorBar(ErrorBar) The Copy Constructor Declaration public ErrorBar(ErrorBar rhs) Parameters Type Name Description ErrorBar rhs The ErrorBar object from which to copy Fields | Improve this Doc View Source schema Current schema value that defines the version of the serialized file Declaration public const int schema = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source Color Gets or sets the Color data for this ErrorBar . Declaration public Color Color { get; set; } Property Value Type Description Color Remarks This property only controls the color of the vertical line. The symbol color is controlled separately in the Symbol property. | Improve this Doc View Source IsVisible Gets or sets a property that shows or hides the ErrorBar . Declaration public bool IsVisible { get; set; } Property Value Type Description Boolean true to show the error bar, false to hide it See Also IsVisible | Improve this Doc View Source PenWidth The pen width to be used for drawing error bars Units are points. Declaration public float PenWidth { get; set; } Property Value Type Description Single Remarks This property only controls the pen width for the vertical line. The pen width for the symbol outline is controlled separately by the Symbol property. | Improve this Doc View Source Symbol Contains the symbol element that will be drawn at the top and bottom of the error bar. Declaration public Symbol Symbol { get; set; } Property Value Type Description Symbol Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public ErrorBar Clone() Returns Type Description ErrorBar A new, independent copy of this class | Improve this Doc View Source Draw(Graphics, GraphPane, Boolean, Single, Single, Single, Single, Pen, Boolean, PointPair) Draw the ErrorBar to the specified Graphics device at the specified location. Declaration public void Draw(Graphics g, GraphPane pane, bool isXBase, float pixBase, float pixValue, float pixLowValue, float scaleFactor, Pen pen, bool isSelected, PointPair dataValue) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Boolean isXBase boolean value that indicates if the \"base\" axis for this ErrorBar is the X axis. True for an XAxis base, false for a YAxis or Y2Axis base. Single pixBase The independent axis position of the center of the error bar in pixel units Single pixValue The dependent axis position of the top of the error bar in pixel units Single pixLowValue The dependent axis position of the bottom of the error bar in pixel units Single scaleFactor The scaling factor for the features of the graph based on the BaseDimension . This scaling factor is calculated by the CalcScaleFactor() method. The scale factor represents a linear multiple to be applied to font sizes, symbol sizes, etc. Pen pen A pen with attributes of Color and PenWidth for this ErrorBar Boolean isSelected Indicates that the ErrorBar should be drawn with attributes from the Selection class. PointPair dataValue The data value to be used for a value-based color gradient. This is only applicable for GradientByX , GradientByY or GradientByZ . | Improve this Doc View Source Draw(Graphics, GraphPane, ErrorBarItem, Axis, Axis, Single) Draw all the ErrorBar 's to the specified Graphics device as a an error bar at each defined point. Declaration public void Draw(Graphics g, GraphPane pane, ErrorBarItem curve, Axis baseAxis, Axis valueAxis, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. ErrorBarItem curve A CurveItem object representing the Bar 's to be drawn. Axis baseAxis The Axis class instance that defines the base (independent) axis for the Bar Axis valueAxis The Axis class instance that defines the value (dependent) axis for the Bar Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public virtual void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.ErrorBarItem.html": {
    "href": "api/ZedGraph.ErrorBarItem.html",
    "title": "Class ErrorBarItem",
    "keywords": "Class ErrorBarItem Encapsulates an \"Error Bar\" curve type that displays a vertical or horizontal line with a symbol at each end. Inheritance Object CurveItem ErrorBarItem Implements ICloneable ISerializable Inherited Members CurveItem._isX2Axis CurveItem._isY2Axis CurveItem._yAxisIndex CurveItem._isVisible CurveItem._isSelected CurveItem._isSelectable CurveItem._isOverrideOrdinal CurveItem._points CurveItem.Tag CurveItem.schema CurveItem.Label CurveItem.Color CurveItem.IsVisible CurveItem.IsSelected CurveItem.IsSelectable CurveItem.IsOverrideOrdinal CurveItem.IsX2Axis CurveItem.IsY2Axis CurveItem.YAxisIndex CurveItem.IsBar CurveItem.IsPie CurveItem.IsLine CurveItem.NPts CurveItem.Points CurveItem.Item[Int32] CurveItem.Link CurveItem.AddPoint(Double, Double) CurveItem.AddPoint(PointPair) CurveItem.Clear() CurveItem.RemovePoint(Int32) CurveItem.GetXAxis(GraphPane) CurveItem.GetYAxis(GraphPane) CurveItem.GetYAxisIndex(GraphPane) CurveItem.MakeUnique() CurveItem.MakeUnique(ColorSymbolRotator) CurveItem.GetRange(Double, Double, Double, Double, Boolean, Boolean, GraphPane) CurveItem.BaseAxis(GraphPane) CurveItem.ValueAxis(GraphPane) CurveItem.GetBarWidth(GraphPane) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class ErrorBarItem : CurveItem, ICloneable, ISerializable Remarks The ErrorBarItem type is intended for displaying confidence intervals, candlesticks, stock High-Low charts, etc. It is technically not a bar, since it is drawn as a vertical or horizontal line. The default symbol at each end of the \"bar\" is HDash , which creates an \"I-Beam\". For horizontal bars ( Y or Y2 ), you will need to change the symbol to VDash to get horizontal \"I-Beams\". Since the horizontal segments are actually symbols, their widths are controlled by the symbol size in Symbol , specified in points (1/72nd inch). The position of each \"I-Beam\" is set according to the PointPair values. The independent axis is assigned with Base , and is a BarBase enum type. Constructors | Improve this Doc View Source ErrorBarItem(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected ErrorBarItem(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source ErrorBarItem(String) Create a new ErrorBarItem , specifying only the legend label. Declaration public ErrorBarItem(string label) Parameters Type Name Description String label The label that will appear in the legend. | Improve this Doc View Source ErrorBarItem(String, Double[], Double[], Double[], Color) Create a new ErrorBarItem using the specified properties. Declaration public ErrorBarItem(string label, double[] x, double[] y, double[] lowValue, Color color) Parameters Type Name Description String label The label that will appear in the legend. Double [] x An array of double precision values that define the X axis values for this curve Double [] y An array of double precision values that define the Y axis values for this curve Double [] lowValue An array of double precision values that define the lower dependent values for this curve Color color A Color value that will be applied to the Line properties. | Improve this Doc View Source ErrorBarItem(String, IPointList, Color) Create a new ErrorBarItem using the specified properties. Declaration public ErrorBarItem(string label, IPointList points, Color color) Parameters Type Name Description String label The label that will appear in the legend. IPointList points A IPointList of double precision values that define the X, Y and lower dependent values for this curve Color color A Color value that will be applied to the Line properties. | Improve this Doc View Source ErrorBarItem(ErrorBarItem) The Copy Constructor Declaration public ErrorBarItem(ErrorBarItem rhs) Parameters Type Name Description ErrorBarItem rhs The ErrorBarItem object from which to copy Fields | Improve this Doc View Source schema2 Current schema value that defines the version of the serialized file Declaration public const int schema2 = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source Bar Gets a reference to the ErrorBar class defined for this ErrorBarItem . Declaration public ErrorBar Bar { get; } Property Value Type Description ErrorBar Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public ErrorBarItem Clone() Returns Type Description ErrorBarItem A new, independent copy of this class | Improve this Doc View Source Draw(Graphics, GraphPane, Int32, Single) Do all rendering associated with this ErrorBarItem to the specified Graphics device. This method is normally only called by the Draw method of the parent CurveList collection object. Declaration public override void Draw(Graphics g, GraphPane pane, int pos, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Int32 pos The ordinal position of the current ErrorBarItem curve. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Overrides CurveItem.Draw(Graphics, GraphPane, Int32, Single) | Improve this Doc View Source DrawLegendKey(Graphics, GraphPane, RectangleF, Single) Draw a legend key entry for this ErrorBarItem at the specified location Declaration public override void DrawLegendKey(Graphics g, GraphPane pane, RectangleF rect, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. RectangleF rect The RectangleF struct that specifies the location for the legend key Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Overrides CurveItem.DrawLegendKey(Graphics, GraphPane, RectangleF, Single) | Improve this Doc View Source GetCoords(GraphPane, Int32, out String) Determine the coords for the rectangle associated with a specified point for this CurveItem Declaration public override bool GetCoords(GraphPane pane, int i, out string coords) Parameters Type Name Description GraphPane pane The GraphPane to which this curve belongs Int32 i The index of the point of interest String coords A list of coordinates that represents the \"rect\" for this point (used in an html AREA tag) Returns Type Description Boolean true if it's a valid point, false otherwise Overrides CurveItem.GetCoords(GraphPane, Int32, out String) | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides CurveItem.GetObjectData(SerializationInfo, StreamingContext) Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.Fill.Default.html": {
    "href": "api/ZedGraph.Fill.Default.html",
    "title": "Struct Fill.Default",
    "keywords": "Struct Fill.Default A simple struct that defines the default property values for the Fill class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source AlignH The default horizontal alignment for Brush fills. This is the default value for the AlignH property. Declaration public static AlignH AlignH Field Value Type Description AlignH | Improve this Doc View Source AlignV The default vertical alignment for Brush fills. This is the default value for the AlignV property. Declaration public static AlignV AlignV Field Value Type Description AlignV | Improve this Doc View Source IsScaled The default scaling mode for Brush fills. This is the default value for the IsScaled property. Declaration public static bool IsScaled Field Value Type Description Boolean"
  },
  "api/ZedGraph.Fill.html": {
    "href": "api/ZedGraph.Fill.html",
    "title": "Class Fill",
    "keywords": "Class Fill A class that encapsulates color-fill properties for an object. The Fill class is used in Rect , Rect , Legend , Bar , and Line objects. Inheritance Object Fill Implements ISerializable ICloneable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class Fill : ISerializable, ICloneable Constructors | Improve this Doc View Source Fill() The default constructor. Initialized to no fill. Declaration public Fill() | Improve this Doc View Source Fill(Brush) Constructor that creates a Brush fill, using a user-supplied, custom Brush . The brush will be scaled to fit the destination screen object unless you manually change IsScaled to false; Declaration public Fill(Brush brush) Parameters Type Name Description Brush brush The Brush to use for fancy fills. Typically, this would be a LinearGradientBrush or a TextureBrush class | Improve this Doc View Source Fill(Brush, Boolean) Constructor that creates a Brush fill, using a user-supplied, custom Brush . The brush will be scaled to fit the destination screen object according to the parameter. Declaration public Fill(Brush brush, bool isScaled) Parameters Type Name Description Brush brush The Brush to use for fancy fills. Typically, this would be a LinearGradientBrush or a TextureBrush class Boolean isScaled Determines if the brush will be scaled to fit the bounding box of the destination object. true to scale it, false to leave it unscaled | Improve this Doc View Source Fill(Brush, AlignH, AlignV) Constructor that creates a Brush fill, using a user-supplied, custom Brush . This constructor will make the brush unscaled (see IsScaled ), but it provides and parameters to control alignment of the brush with respect to the filled object. Declaration public Fill(Brush brush, AlignH alignH, AlignV alignV) Parameters Type Name Description Brush brush The Brush to use for fancy fills. Typically, this would be a LinearGradientBrush or a TextureBrush class AlignH alignH Controls the horizontal alignment of the brush within the filled object (see AlignH AlignV alignV Controls the vertical alignment of the brush within the filled object (see AlignV | Improve this Doc View Source Fill(Color) Constructor that creates a solid color-fill, setting Type to Solid , and setting Color to the specified color value. Declaration public Fill(Color color) Parameters Type Name Description Color color The color of the solid fill | Improve this Doc View Source Fill(Color, Brush, FillType) Constructor that specifies the color, brush, and type for this fill. Declaration public Fill(Color color, Brush brush, FillType type) Parameters Type Name Description Color color The color of the fill for solid fills Brush brush A custom brush for fills. Can be a SolidBrush , LinearGradientBrush , or TextureBrush . FillType type The FillType for this fill. | Improve this Doc View Source Fill(Color, Color) Constructor that creates a linear gradient color-fill, setting Type to Brush using the specified colors. Declaration public Fill(Color color1, Color color2) Parameters Type Name Description Color color1 The first color for the gradient fill Color color2 The second color for the gradient fill | Improve this Doc View Source Fill(Color, Color, Color) Constructor that creates a linear gradient color-fill, setting Type to Brush using the specified colors. This gradient fill consists of three colors. Declaration public Fill(Color color1, Color color2, Color color3) Parameters Type Name Description Color color1 The first color for the gradient fill Color color2 The second color for the gradient fill Color color3 The third color for the gradient fill | Improve this Doc View Source Fill(Color, Color, Color, Single) Constructor that creates a linear gradient color-fill, setting Type to Brush using the specified colors. This gradient fill consists of three colors Declaration public Fill(Color color1, Color color2, Color color3, float angle) Parameters Type Name Description Color color1 The first color for the gradient fill Color color2 The second color for the gradient fill Color color3 The third color for the gradient fill Single angle The angle (degrees) of the gradient fill | Improve this Doc View Source Fill(Color, Color, Single) Constructor that creates a linear gradient color-fill, setting Type to Brush using the specified colors and angle. Declaration public Fill(Color color1, Color color2, float angle) Parameters Type Name Description Color color1 The first color for the gradient fill Color color2 The second color for the gradient fill Single angle The angle (degrees) of the gradient fill | Improve this Doc View Source Fill(Color[]) Constructor that creates a linear gradient multi-color-fill, setting Type to Brush using the specified colors. This gradient fill consists of many colors based on an array of Color objects, drawn at an angle of zero (degrees). The array is used to create a ColorBlend object assuming a even linear distribution of the colors across the gradient. Declaration public Fill(Color[] colors) Parameters Type Name Description Color [] colors The array of Color objects that defines the colors along the gradient. | Improve this Doc View Source Fill(Color[], Single) Constructor that creates a linear gradient multi-color-fill, setting Type to Brush using the specified colors. This gradient fill consists of many colors based on an array of Color objects, drawn at the specified angle (degrees). The array is used to create a ColorBlend object assuming a even linear distribution of the colors across the gradient. Declaration public Fill(Color[] colors, float angle) Parameters Type Name Description Color [] colors The array of Color objects that defines the colors along the gradient. Single angle The angle (degrees) of the gradient fill | Improve this Doc View Source Fill(Color[], Single[]) Constructor that creates a linear gradient multi-color-fill, setting Type to Brush using the specified colors. This gradient fill consists of many colors based on an array of Color objects, drawn at the an angle of zero (degrees). The array is used to create a ColorBlend object assuming a even linear distribution of the colors across the gradient. Declaration public Fill(Color[] colors, float[] positions) Parameters Type Name Description Color [] colors The array of Color objects that defines the colors along the gradient. Single [] positions The array of floating point values that defines the color positions along the gradient. Values should range from 0 to 1. | Improve this Doc View Source Fill(Color[], Single[], Single) Constructor that creates a linear gradient multi-color-fill, setting Type to Brush using the specified colors. This gradient fill consists of many colors based on an array of Color objects, drawn at the specified angle (degrees). The array is used to create a ColorBlend object assuming a even linear distribution of the colors across the gradient. Declaration public Fill(Color[] colors, float[] positions, float angle) Parameters Type Name Description Color [] colors The array of Color objects that defines the colors along the gradient. Single [] positions The array of floating point values that defines the color positions along the gradient. Values should range from 0 to 1. Single angle The angle (degrees) of the gradient fill | Improve this Doc View Source Fill(ColorBlend) Constructor that creates a linear gradient multi-color-fill, setting Type to Brush using the specified colors. This gradient fill consists of many colors based on a ColorBlend object. The gradient angle is defaulted to zero. Declaration public Fill(ColorBlend blend) Parameters Type Name Description ColorBlend blend The ColorBlend object that defines the colors and positions along the gradient. | Improve this Doc View Source Fill(ColorBlend, Single) Constructor that creates a linear gradient multi-color-fill, setting Type to Brush using the specified colors. This gradient fill consists of many colors based on a ColorBlend object, drawn at the specified angle (degrees). Declaration public Fill(ColorBlend blend, float angle) Parameters Type Name Description ColorBlend blend The ColorBlend object that defines the colors and positions along the gradient. Single angle The angle (degrees) of the gradient fill | Improve this Doc View Source Fill(Image, WrapMode) Constructor that creates a texture fill, setting Type to Brush and using the specified image. Declaration public Fill(Image image, WrapMode wrapMode) Parameters Type Name Description Image image The Image to use for filling WrapMode wrapMode The WrapMode class that controls the image wrapping properties | Improve this Doc View Source Fill(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected Fill(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source Fill(Fill) The Copy Constructor Declaration public Fill(Fill rhs) Parameters Type Name Description Fill rhs The Fill object from which to copy Fields | Improve this Doc View Source _brush Private field that stores the custom fill brush. Use the public property Brush to access this value. This property is only applicable if the Type property is set to Brush . Declaration [CLSCompliant(false)] protected Brush _brush Field Value Type Description Brush | Improve this Doc View Source schema Current schema value that defines the version of the serialized file Declaration public const int schema = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source AlignH Determines how the brush will be aligned with the filled object in the horizontal direction. This value is a AlignH enumeration. This field only applies if IsScaled is false. Declaration public AlignH AlignH { get; set; } Property Value Type Description AlignH See Also AlignV | Improve this Doc View Source AlignV Determines how the brush will be aligned with the filled object in the vertical direction. This value is a AlignV enumeration. This field only applies if IsScaled is false. Declaration public AlignV AlignV { get; set; } Property Value Type Description AlignV See Also AlignH | Improve this Doc View Source Brush The custom fill brush. This can be a SolidBrush , a LinearGradientBrush , or a TextureBrush . This property is only applicable if the Type property is set to Brush . Declaration public Brush Brush { get; set; } Property Value Type Description Brush | Improve this Doc View Source Color The fill color. This property is used as a single color to make a solid fill ( Type is Solid ), or it can be used in combination with White to make a LinearGradientBrush when Type is Brush and Brush is null. Declaration public Color Color { get; set; } Property Value Type Description Color See Also Type | Improve this Doc View Source IsGradientValueType Returns a boolean value indicating whether or not this fill is a \"Gradient-By-Value\" type. This is true for GradientByX , GradientByY , or GradientByZ . Declaration public bool IsGradientValueType { get; } Property Value Type Description Boolean true if this is a Gradient-by-value type, false otherwise Remarks The gradient by value fill method allows the fill color for each point or bar to be based on a value for that point (either X, Y, or Z in the IPointList . For example, assume a Fill class is defined with a linear gradient ranging from Blue to Red and the Type is set to GradientByY . If RangeMin is set to 100.0 and RangeMax is set to 200.0, then a point that has a Y value of 100 or less will be colored blue, a point with a Y value of 200 or more will be colored red, and a point between 100 and 200 will have a color based on a linear scale between blue and red. Note that the fill color is always solid for any given point. You can use the Z value from IPointList along with GradientByZ to color individual points according to some property that is independent of the X,Y point pair. See Also GradientByX GradientByY GradientByZ | Improve this Doc View Source IsScaled Determines if the brush will be scaled to the bounding box of the filled object. If this value is false, then the brush will only be aligned with the filled object based on the AlignH and AlignV properties. Declaration public bool IsScaled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsVisible This property determines the type of color fill. Returns true if the Type property is either Solid or Brush . If set to true, this property will automatically set the Type to Brush . If set to false, this property will automatically set the Type to None . In order to get a regular solid-color fill, you have to manually set Type to Solid . Declaration public bool IsVisible { get; set; } Property Value Type Description Boolean See Also Color Brush Type | Improve this Doc View Source RangeDefault The default user-scale value for the gradient-by-value determination. This defines the value that will be used when there is no point value available, or the actual point value is invalid. Declaration public double RangeDefault { get; set; } Property Value Type Description Double A double value, in user scale unit Remarks Note that this value, when defined, will determine the color that is used in the legend. If this value is set to double.MaxValue, then it remains \"undefined.\" In this case, the legend symbols will actually be filled with a color gradient representing the range of colors. See Also GradientByX GradientByY GradientByZ IsGradientValueType RangeMin RangeMax | Improve this Doc View Source RangeMax The maximum user-scale value for the gradient-by-value determination. This defines the user-scale value for the end of the gradient. Declaration public double RangeMax { get; set; } Property Value Type Description Double A double value, in user scale unit See Also GradientByX GradientByY GradientByZ IsGradientValueType RangeMin RangeDefault | Improve this Doc View Source RangeMin The minimum user-scale value for the gradient-by-value determination. This defines the user-scale value for the start of the gradient. Declaration public double RangeMin { get; set; } Property Value Type Description Double A double value, in user scale unit See Also GradientByX GradientByY GradientByZ IsGradientValueType RangeMax RangeDefault | Improve this Doc View Source SecondaryValueGradientColor Gets or sets the secondary color for gradientByValue fills. Declaration public Color SecondaryValueGradientColor { get; set; } Property Value Type Description Color Remarks This property is only applicable if the Type is GradientByX , GradientByY , or GradientByZ . Once the gradient-by-value logic picks a color, a new gradient will be created using the SecondaryValueGradientColor, the resulting gradient-by-value color, and the angle setting for this Fill . Use a value of Empty to have a solid-color Fill resulting from a gradient-by-value FillType . | Improve this Doc View Source Type Determines the type of fill, which can be either solid color ( Solid ) or a custom brush ( Brush ). See Type for more information. Declaration public FillType Type { get; set; } Property Value Type Description FillType See Also Color Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public Fill Clone() Returns Type Description Fill A new, independent copy of this class | Improve this Doc View Source Draw(Graphics, RectangleF) Fill the background of the RectangleF area, using the fill type from this Fill . Declaration public void Draw(Graphics g, RectangleF rect) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. RectangleF rect The RectangleF struct specifying the area to be filled | Improve this Doc View Source Draw(Graphics, RectangleF, PointPair) Fill the background of the RectangleF area, using the fill type from this Fill . Declaration public void Draw(Graphics g, RectangleF rect, PointPair pt) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. RectangleF rect The RectangleF struct specifying the area to be filled PointPair pt The data value to be used in case it's a GradientByX , GradientByY , or GradientByZ FillType . | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public virtual void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source MakeBrush(RectangleF) Create a fill brush using current properties. This method will construct a brush based on the settings of Type , Color and Brush . If Type is set to Brush and Brush is null, then a LinearGradientBrush will be created between the colors of White and Color . Declaration public Brush MakeBrush(RectangleF rect) Parameters Type Name Description RectangleF rect A rectangle that bounds the object to be filled. This determines the start and end of the gradient fill. Returns Type Description Brush A Brush class representing the fill brush | Improve this Doc View Source MakeBrush(RectangleF, PointPair) Create a fill brush using current properties. This method will construct a brush based on the settings of Type , Color and Brush . If Type is set to Brush and Brush is null, then a LinearGradientBrush will be created between the colors of White and Color . Declaration public Brush MakeBrush(RectangleF rect, PointPair dataValue) Parameters Type Name Description RectangleF rect A rectangle that bounds the object to be filled. This determines the start and end of the gradient fill. PointPair dataValue The data value to be used for a value-based color gradient. This is only applicable for GradientByX , GradientByY or GradientByZ . Returns Type Description Brush A Brush class representing the fill brush Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.Runtime.Serialization.ISerializable System.ICloneable"
  },
  "api/ZedGraph.FillType.html": {
    "href": "api/ZedGraph.FillType.html",
    "title": "Enum FillType",
    "keywords": "Enum FillType Enumeration type for the various types of fills that can be used with Bar charts. Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public enum FillType Fields Name Description Brush A custom fill using either LinearGradientBrush or TextureBrush GradientByColorValue Fill with a single solid color based on the \"ColorValue\" property of the data. GradientByX Fill with a single solid color based on the X value of the data. GradientByY Fill with a single solid color based on the Z value of the data. GradientByZ Fill with a single solid color based on the Z value of the data. None No fill Solid A solid fill using SolidBrush"
  },
  "api/ZedGraph.FilteredPointList.html": {
    "href": "api/ZedGraph.FilteredPointList.html",
    "title": "Class FilteredPointList",
    "keywords": "Class FilteredPointList An example of an IPointList implementation that stores large datasets, and selectively filters the output data depending on the displayed range. Inheritance Object FilteredPointList Implements IPointList ICloneable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class FilteredPointList : IPointList, ICloneable Remarks This class will refilter the data points each time SetBounds(Double, Double, Int32) is called. The data are filtered down to MaxPts points, within the data bounds of a minimum and maximum data range. The data are filtered by simply skipping points to achieve the desired total number of points. Input arrays are assumed to be monotonically increasing in X, and evenly spaced in X. Constructors | Improve this Doc View Source FilteredPointList(Double[], Double[]) Constructor to initialize the PointPairList from two arrays of type double. Declaration public FilteredPointList(double[] x, double[] y) Parameters Type Name Description Double [] x Double [] y | Improve this Doc View Source FilteredPointList(FilteredPointList) The Copy Constructor Declaration public FilteredPointList(FilteredPointList rhs) Parameters Type Name Description FilteredPointList rhs The FilteredPointList from which to copy Properties | Improve this Doc View Source Count Returns the number of points according to the current state of the filter. Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source Item[Int32] Indexer to access the specified PointPair object by its ordinal position in the list. Declaration public PointPair this[int index] { get; set; } Parameters Type Name Description Int32 index The ordinal position (zero-based) of the PointPair object to be accessed. Property Value Type Description PointPair A PointPair object reference. Remarks Returns Missing for any value of that is outside of its corresponding array bounds. | Improve this Doc View Source MaxPts Gets the desired number of filtered points to output. You can set this value by calling SetBounds(Double, Double, Int32) . Declaration public int MaxPts { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Clone() Deep-copy clone routine Declaration public virtual object Clone() Returns Type Description Object A new, independent copy of the FilteredPointList | Improve this Doc View Source SetBounds(Double, Double, Int32) Set the data bounds to the specified minimum, maximum, and point count. Use values of min=double.MinValue and max=double.MaxValue to get the full range of data. Use maxPts=-1 to not limit the number of points. Call this method anytime the zoom range is changed. Declaration public void SetBounds(double min, double max, int maxPts) Parameters Type Name Description Double min The lower bound for the X data of interest Double max The upper bound for the X data of interest Int32 maxPts The maximum number of points allowed to be output by the filter Implements IPointList System.ICloneable See Also PointPairList BasicArrayPointList IPointList IPointListEdit"
  },
  "api/ZedGraph.FontSpec.Default.html": {
    "href": "api/ZedGraph.FontSpec.Default.html",
    "title": "Struct FontSpec.Default",
    "keywords": "Struct FontSpec.Default A simple struct that defines the default property values for the FontSpec class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source DropShadowAngle Default value for DropShadowAngle , which determines the offset angle of the drop shadow for this FontSpec . Declaration public static float DropShadowAngle Field Value Type Description Single | Improve this Doc View Source DropShadowColor Default value for DropShadowColor , which determines the color of the drop shadow for this FontSpec . Declaration public static Color DropShadowColor Field Value Type Description Color | Improve this Doc View Source DropShadowOffset Default value for DropShadowOffset , which determines the offset distance of the drop shadow for this FontSpec . Declaration public static float DropShadowOffset Field Value Type Description Single | Improve this Doc View Source FillBrush The default custom brush for filling in this FontSpec ( Brush property). Declaration public static Brush FillBrush Field Value Type Description Brush | Improve this Doc View Source FillColor The default color for filling in the background of the text block ( Color property). Declaration public static Color FillColor Field Value Type Description Color | Improve this Doc View Source FillType The default fill mode for this FontSpec ( Type property). Declaration public static FillType FillType Field Value Type Description FillType | Improve this Doc View Source IsAntiAlias Default value for IsAntiAlias , which determines if anti-aliasing logic is used for this FontSpec . Declaration public static bool IsAntiAlias Field Value Type Description Boolean | Improve this Doc View Source IsDropShadow Default value for IsDropShadow , which determines if the drop shadow is displayed for this FontSpec . Declaration public static bool IsDropShadow Field Value Type Description Boolean | Improve this Doc View Source StringAlignment Default value for the alignment with which this FontSpec object is drawn. This alignment really only affects multi-line strings. Declaration public static StringAlignment StringAlignment Field Value Type Description StringAlignment A StringAlignment enumeration. | Improve this Doc View Source SuperShift The default shift fraction of the superscript, expressed as a fraction of the superscripted character height. This is the height above the main font (a zero shift means the main font and the superscript font have the tops aligned). Declaration public static float SuperShift Field Value Type Description Single | Improve this Doc View Source SuperSize The default size fraction of the superscript font, expressed as a fraction of the size of the main font. Declaration public static float SuperSize Field Value Type Description Single"
  },
  "api/ZedGraph.FontSpec.html": {
    "href": "api/ZedGraph.FontSpec.html",
    "title": "Class FontSpec",
    "keywords": "Class FontSpec The FontSpec class is a generic font class that maintains the font family, attributes, colors, border and fill modes, font size, and angle information. This class can render text with a variety of alignment options using the AlignH and AlignV parameters in the Draw(Graphics, PaneBase, String, Single, Single, AlignH, AlignV, Single) method. Inheritance Object FontSpec Implements ICloneable ISerializable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class FontSpec : ICloneable, ISerializable Constructors | Improve this Doc View Source FontSpec() Construct a FontSpec object with default properties. Declaration public FontSpec() | Improve this Doc View Source FontSpec(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected FontSpec(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source FontSpec(String, Single, Color, Boolean, Boolean, Boolean) Construct a FontSpec object with the given properties. All other properties are defaulted according to the values specified in the FontSpec.Default default class. Declaration public FontSpec(string family, float size, Color color, bool isBold, bool isItalic, bool isUnderline) Parameters Type Name Description String family A text string representing the font family (default is \"Arial\") Single size A size of the font in points. This size will be scaled based on the ratio of the Rect dimension to the BaseDimension of the GraphPane object. Color color The color with which to render the font Boolean isBold true for a bold typeface, false otherwise Boolean isItalic true for an italic typeface, false otherwise Boolean isUnderline true for an underlined font, false otherwise | Improve this Doc View Source FontSpec(String, Single, Color, Boolean, Boolean, Boolean, Color, Brush, FillType) Construct a FontSpec object with the given properties. All other properties are defaulted according to the values specified in the FontSpec.Default default class. Declaration public FontSpec(string family, float size, Color color, bool isBold, bool isItalic, bool isUnderline, Color fillColor, Brush fillBrush, FillType fillType) Parameters Type Name Description String family A text string representing the font family (default is \"Arial\") Single size A size of the font in points. This size will be scaled based on the ratio of the Rect dimension to the BaseDimension of the GraphPane object. Color color The color with which to render the font Boolean isBold true for a bold typeface, false otherwise Boolean isItalic true for an italic typeface, false otherwise Boolean isUnderline true for an underlined font, false otherwise Color fillColor The Color to use for filling in the text background Brush fillBrush The Brush to use for filling in the text background FillType fillType The FillType to use for the text background | Improve this Doc View Source FontSpec(FontSpec) The Copy Constructor Declaration public FontSpec(FontSpec rhs) Parameters Type Name Description FontSpec rhs The FontSpec object from which to copy Fields | Improve this Doc View Source schema Current schema value that defines the version of the serialized file Declaration public const int schema = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source Angle The angle at which this FontSpec object is drawn. Declaration public float Angle { get; set; } Property Value Type Description Single The angle of the font, measured in anti-clockwise degrees from horizontal. Negative values are permitted. | Improve this Doc View Source Border Gets or sets the Border class used to draw the border border around this text. Declaration public Border Border { get; set; } Property Value Type Description Border | Improve this Doc View Source DropShadowAngle Gets or sets the offset angle of the drop shadow for this FontSpec . Declaration public float DropShadowAngle { get; set; } Property Value Type Description Single The angle, measured in anti-clockwise degrees from horizontal. Negative values are permitted. Remarks This value only applies if IsDropShadow is true. See Also IsDropShadow DropShadowColor DropShadowOffset | Improve this Doc View Source DropShadowColor Gets or sets the color of the drop shadow for this FontSpec . Declaration public Color DropShadowColor { get; set; } Property Value Type Description Color Remarks This value only applies if IsDropShadow is true. See Also IsDropShadow DropShadowAngle DropShadowOffset | Improve this Doc View Source DropShadowOffset Gets or sets the offset distance of the drop shadow for this FontSpec . Declaration public float DropShadowOffset { get; set; } Property Value Type Description Single The offset distance, measured as a fraction of the scaled font height. Remarks This value only applies if IsDropShadow is true. See Also IsDropShadow DropShadowColor DropShadowAngle | Improve this Doc View Source Family The font family name for this FontSpec . Declaration public string Family { get; set; } Property Value Type Description String A text string with the font family name, e.g., \"Arial\" | Improve this Doc View Source Fill Gets or sets the Fill data for this FontSpec , which controls how the background behind the text is filled. Declaration public Fill Fill { get; set; } Property Value Type Description Fill | Improve this Doc View Source FontColor The color of the font characters for this FontSpec . Note that the border and background colors are set using the Color and Color properties, respectively. Declaration public Color FontColor { get; set; } Property Value Type Description Color A system Color reference. | Improve this Doc View Source IsAntiAlias Gets or sets a value that determines if the FontSpec will be drawn using anti-aliasing logic within GDI+. Declaration public bool IsAntiAlias { get; set; } Property Value Type Description Boolean Remarks If this property is set to true, it will override the current setting of SmoothingMode by setting the value temporarily to HighQuality . If this property is set to false, the the current setting of SmoothingMode will be left as-is. | Improve this Doc View Source IsBold Determines whether this FontSpec is drawn with bold typeface. Declaration public bool IsBold { get; set; } Property Value Type Description Boolean A boolean value, true for bold, false for normal | Improve this Doc View Source IsDropShadow Gets or sets a value that determines if the FontSpec will be displayed with a drop shadow. Declaration public bool IsDropShadow { get; set; } Property Value Type Description Boolean See Also DropShadowColor DropShadowAngle DropShadowOffset | Improve this Doc View Source IsItalic Determines whether this FontSpec is drawn with italic typeface. Declaration public bool IsItalic { get; set; } Property Value Type Description Boolean A boolean value, true for italic, false for normal | Improve this Doc View Source IsUnderline Determines whether this FontSpec is drawn with underlined typeface. Declaration public bool IsUnderline { get; set; } Property Value Type Description Boolean A boolean value, true for underline, false for normal | Improve this Doc View Source Size The size of the font for this FontSpec object. Declaration public float Size { get; set; } Property Value Type Description Single The size of the font, measured in points (1/72 inch). | Improve this Doc View Source StringAlignment Determines the alignment with which this FontSpec object is drawn. This alignment really only affects multi-line strings. Declaration public StringAlignment StringAlignment { get; set; } Property Value Type Description StringAlignment A StringAlignment enumeration. Methods | Improve this Doc View Source BoundingBox(Graphics, String, Single) Get a SizeF struct representing the width and height of the bounding box for the specified text string, based on the scaled font size. Declaration public SizeF BoundingBox(Graphics g, string text, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. String text The text string for which the width is to be calculated Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Returns Type Description SizeF The scaled text dimensions, in pixels, in the form of a SizeF struct Remarks This routine differs from MeasureString(Graphics, String, Single) in that it takes into account the rotation angle of the font, and gives the dimensions of the bounding box that encloses the text at the specified angle. | Improve this Doc View Source BoundingBox(Graphics, String, Single, SizeF) Get a SizeF struct representing the width and height of the bounding box for the specified text string, based on the scaled font size. Declaration public SizeF BoundingBox(Graphics g, string text, float scaleFactor, SizeF layoutArea) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. String text The text string for which the width is to be calculated Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. SizeF layoutArea The limiting area ( SizeF ) into which the text must fit. The actual rectangle may be smaller than this, but the text will be wrapped to accomodate the area. Returns Type Description SizeF The scaled text dimensions, in pixels, in the form of a SizeF struct Remarks This routine differs from MeasureString(Graphics, String, Single) in that it takes into account the rotation angle of the font, and gives the dimensions of the bounding box that encloses the text at the specified angle. | Improve this Doc View Source BoundingBoxTenPower(Graphics, String, Single) Get a SizeF struct representing the width and height of the bounding box for the specified text string, based on the scaled font size. Declaration public SizeF BoundingBoxTenPower(Graphics g, string text, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. String text The text string for which the width is to be calculated Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Returns Type Description SizeF The scaled text dimensions, in pixels, in the form of a SizeF struct Remarks This special case method will show the specified string as a power of 10, superscripted and downsized according to the SuperSize and SuperShift . This routine differs from MeasureString(Graphics, String, Single) in that it takes into account the rotation angle of the font, and gives the dimensions of the bounding box that encloses the text at the specified angle. | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public FontSpec Clone() Returns Type Description FontSpec A new, independent copy of this class | Improve this Doc View Source Draw(Graphics, PaneBase, String, Single, Single, AlignH, AlignV, Single) Render the specified text to the specifed Graphics device. The text, border, and fill options will be rendered as required. Declaration public void Draw(Graphics g, PaneBase pane, string text, float x, float y, AlignH alignH, AlignV alignV, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. PaneBase pane A reference to the PaneBase object that is the parent or owner of this object. String text A string value containing the text to be displayed. This can be multiple lines, separated by newline ('\\n') characters Single x The X location to display the text, in screen coordinates, relative to the horizontal ( AlignH ) alignment parameter alignH Single y The Y location to display the text, in screen coordinates, relative to the vertical ( AlignV alignment parameter alignV AlignH alignH A horizontal alignment parameter specified using the AlignH enum type AlignV alignV A vertical alignment parameter specified using the AlignV enum type Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. | Improve this Doc View Source Draw(Graphics, PaneBase, String, Single, Single, AlignH, AlignV, Single, SizeF) Render the specified text to the specifed Graphics device. The text, border, and fill options will be rendered as required. Declaration public void Draw(Graphics g, PaneBase pane, string text, float x, float y, AlignH alignH, AlignV alignV, float scaleFactor, SizeF layoutArea) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. PaneBase pane A reference to the PaneBase object that is the parent or owner of this object. String text A string value containing the text to be displayed. This can be multiple lines, separated by newline ('\\n') characters Single x The X location to display the text, in screen coordinates, relative to the horizontal ( AlignH ) alignment parameter alignH Single y The Y location to display the text, in screen coordinates, relative to the vertical ( AlignV alignment parameter alignV AlignH alignH A horizontal alignment parameter specified using the AlignH enum type AlignV alignV A vertical alignment parameter specified using the AlignV enum type Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. SizeF layoutArea The limiting area ( SizeF ) into which the text must fit. The actual rectangle may be smaller than this, but the text will be wrapped to accomodate the area. | Improve this Doc View Source DrawTenPower(Graphics, GraphPane, String, Single, Single, AlignH, AlignV, Single) Render the specified text to the specifed Graphics device. The text, border, and fill options will be rendered as required. This special case method will show the specified text as a power of 10, using the SuperSize and SuperShift . Declaration public void DrawTenPower(Graphics g, GraphPane pane, string text, float x, float y, AlignH alignH, AlignV alignV, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. String text A string value containing the text to be displayed. This can be multiple lines, separated by newline ('\\n') characters Single x The X location to display the text, in screen coordinates, relative to the horizontal ( AlignH ) alignment parameter alignH Single y The Y location to display the text, in screen coordinates, relative to the vertical ( AlignV alignment parameter alignV AlignH alignH A horizontal alignment parameter specified using the AlignH enum type AlignV alignV A vertical alignment parameter specified using the AlignV enum type Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. | Improve this Doc View Source GetBox(Graphics, String, Single, Single, AlignH, AlignV, Single, SizeF) Returns a polygon that defines the bounding box of the text, taking into account alignment and rotation parameters. Declaration public PointF[] GetBox(Graphics g, string text, float x, float y, AlignH alignH, AlignV alignV, float scaleFactor, SizeF layoutArea) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. String text A string value containing the text to be displayed. This can be multiple lines, separated by newline ('\\n') characters Single x The X location to display the text, in screen coordinates, relative to the horizontal ( AlignH ) alignment parameter alignH Single y The Y location to display the text, in screen coordinates, relative to the vertical ( AlignV alignment parameter alignV AlignH alignH A horizontal alignment parameter specified using the AlignH enum type AlignV alignV A vertical alignment parameter specified using the AlignV enum type Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. SizeF layoutArea The limiting area ( SizeF ) into which the text must fit. The actual rectangle may be smaller than this, but the text will be wrapped to accomodate the area. Returns Type Description PointF [] A polygon of 4 points defining the area of this text | Improve this Doc View Source GetFont(Single) Get the Font class for the current scaled font. Declaration public Font GetFont(float scaleFactor) Parameters Type Name Description Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Returns Type Description Font Returns a reference to a Font object with a size of ZedGraph.FontSpec._scaledSize , and font Family . | Improve this Doc View Source GetHeight(Single) Get the height of the scaled font Declaration public float GetHeight(float scaleFactor) Parameters Type Name Description Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Returns Type Description Single The scaled font height, in pixels | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public virtual void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source GetWidth(Graphics, Single) Get the average character width of the scaled font. The average width is based on the character 'x' Declaration public float GetWidth(Graphics g, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Returns Type Description Single The scaled font width, in pixels | Improve this Doc View Source GetWidth(Graphics, String, Single) Get the total width of the specified text string Declaration public float GetWidth(Graphics g, string text, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. String text The text string for which the width is to be calculated Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Returns Type Description Single The scaled text width, in pixels | Improve this Doc View Source MeasureString(Graphics, String, Single) Get a SizeF struct representing the width and height of the specified text string, based on the scaled font size Declaration public SizeF MeasureString(Graphics g, string text, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. String text The text string for which the width is to be calculated Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Returns Type Description SizeF The scaled text dimensions, in pixels, in the form of a SizeF struct | Improve this Doc View Source MeasureString(Graphics, String, Single, SizeF) Get a SizeF struct representing the width and height of the specified text string, based on the scaled font size, and using the specified SizeF as an outer limit. Declaration public SizeF MeasureString(Graphics g, string text, float scaleFactor, SizeF layoutArea) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. String text The text string for which the width is to be calculated Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. SizeF layoutArea The limiting area ( SizeF ) into which the text must fit. The actual rectangle may be smaller than this, but the text will be wrapped to accomodate the area. Returns Type Description SizeF The scaled text dimensions, in pixels, in the form of a SizeF struct Remarks This method will allow the text to wrap as necessary to fit the . | Improve this Doc View Source PointInBox(PointF, Graphics, String, Single, Single, AlignH, AlignV, Single) Determines if the specified screen point lies within the bounding box of the text, taking into account alignment and rotation parameters. Declaration public bool PointInBox(PointF pt, Graphics g, string text, float x, float y, AlignH alignH, AlignV alignV, float scaleFactor) Parameters Type Name Description PointF pt The screen point, in pixel units Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. String text A string value containing the text to be displayed. This can be multiple lines, separated by newline ('\\n') characters Single x The X location to display the text, in screen coordinates, relative to the horizontal ( AlignH ) alignment parameter alignH Single y The Y location to display the text, in screen coordinates, relative to the vertical ( AlignV alignment parameter alignV AlignH alignH A horizontal alignment parameter specified using the AlignH enum type AlignV alignV A vertical alignment parameter specified using the AlignV enum type Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Returns Type Description Boolean true if the point lies within the bounding box, false otherwise | Improve this Doc View Source PointInBox(PointF, Graphics, String, Single, Single, AlignH, AlignV, Single, SizeF) Determines if the specified screen point lies within the bounding box of the text, taking into account alignment and rotation parameters. Declaration public bool PointInBox(PointF pt, Graphics g, string text, float x, float y, AlignH alignH, AlignV alignV, float scaleFactor, SizeF layoutArea) Parameters Type Name Description PointF pt The screen point, in pixel units Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. String text A string value containing the text to be displayed. This can be multiple lines, separated by newline ('\\n') characters Single x The X location to display the text, in screen coordinates, relative to the horizontal ( AlignH ) alignment parameter alignH Single y The Y location to display the text, in screen coordinates, relative to the vertical ( AlignV alignment parameter alignV AlignH alignH A horizontal alignment parameter specified using the AlignH enum type AlignV alignV A vertical alignment parameter specified using the AlignV enum type Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. SizeF layoutArea The limiting area ( SizeF ) into which the text must fit. The actual rectangle may be smaller than this, but the text will be wrapped to accomodate the area. Returns Type Description Boolean true if the point lies within the bounding box, false otherwise Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.GapLabel.Default.html": {
    "href": "api/ZedGraph.GapLabel.Default.html",
    "title": "Struct GapLabel.Default",
    "keywords": "Struct GapLabel.Default A simple struct that defines the default property values for the GapLabel class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source Gap The default Gap setting. Declaration public static float Gap Field Value Type Description Single"
  },
  "api/ZedGraph.GapLabel.html": {
    "href": "api/ZedGraph.GapLabel.html",
    "title": "Class GapLabel",
    "keywords": "Class GapLabel Class that handles the data associated with a text title and its associated font properties. Inherits from Label , and adds the Gap property for use by the Axis and PaneBase objects. Inheritance Object Label GapLabel AxisLabel Implements ICloneable ISerializable Inherited Members Label.Text Label.FontSpec Label.IsVisible Label.schema Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class GapLabel : Label, ICloneable, ISerializable Constructors | Improve this Doc View Source GapLabel(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected GapLabel(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source GapLabel(String, String, Single, Color, Boolean, Boolean, Boolean) Constructor to build a GapLabel from the text and the associated font properties. Declaration public GapLabel(string text, string fontFamily, float fontSize, Color color, bool isBold, bool isItalic, bool isUnderline) Parameters Type Name Description String text The String representing the text to be displayed String fontFamily The String font family name Single fontSize The size of the font in points and scaled according to the CalcScaleFactor() logic. Color color The Color instance representing the color of the font Boolean isBold true for a bold font face Boolean isItalic true for an italic font face Boolean isUnderline true for an underline font face | Improve this Doc View Source GapLabel(GapLabel) Copy constructor Declaration public GapLabel(GapLabel rhs) Parameters Type Name Description GapLabel rhs the AxisLabel instance to be copied. Fields | Improve this Doc View Source schema2 Current schema value that defines the version of the serialized file Declaration public const int schema2 = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source Gap Gets or sets the gap factor between this label and the opposing Axis or Chart . Declaration public float Gap { get; set; } Property Value Type Description Single Remarks This value is expressed as a fraction of the character height for the GapLabel . Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public GapLabel Clone() Returns Type Description GapLabel A new, independent copy of this class | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides Label.GetObjectData(SerializationInfo, StreamingContext) | Improve this Doc View Source GetScaledGap(Single) Calculate the size of the Gap based on the FontSpec height, in pixel units and scaled according to . Declaration public float GetScaledGap(float scaleFactor) Parameters Type Name Description Single scaleFactor The scaling factor to be applied Returns Type Description Single Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.GasGaugeNeedle.Default.html": {
    "href": "api/ZedGraph.GasGaugeNeedle.Default.html",
    "title": "Struct GasGaugeNeedle.Default",
    "keywords": "Struct GasGaugeNeedle.Default Specify the default property values for the GasGaugeNeedle class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source BorderColor The default color for drawing frames around GasGaugeNeedle ( Color property). Declaration public static Color BorderColor Field Value Type Description Color | Improve this Doc View Source BorderWidth The default pen width to be used for drawing the border around the GasGaugeNeedle ( Width property). Units are points. Declaration public static float BorderWidth Field Value Type Description Single | Improve this Doc View Source FillBrush The default custom brush for filling in the GasGaugeNeedle. ( Brush property). Declaration public static Brush FillBrush Field Value Type Description Brush | Improve this Doc View Source FillColor The default color for filling in the GasGaugeNeedle ( Color property). Declaration public static Color FillColor Field Value Type Description Color | Improve this Doc View Source FillType The default fill type for filling the GasGaugeNeedle. Declaration public static FillType FillType Field Value Type Description FillType | Improve this Doc View Source FontSize The default font size for LabelDetail entries ( Size property). Units are in points (1/72 inch). Declaration public static float FontSize Field Value Type Description Single | Improve this Doc View Source IsBorderVisible The default border mode for GasGaugeNeedle ( IsVisible property). true to display frame around GasGaugeNeedle, false otherwise Declaration public static bool IsBorderVisible Field Value Type Description Boolean | Improve this Doc View Source isVisible Default value for controlling GasGaugeNeedle display. Declaration public static bool isVisible Field Value Type Description Boolean | Improve this Doc View Source NeedleWidth The default width of the gas gauge needle. Units are points, scaled according to CalcScaleFactor() Declaration public static float NeedleWidth Field Value Type Description Single"
  },
  "api/ZedGraph.GasGaugeNeedle.html": {
    "href": "api/ZedGraph.GasGaugeNeedle.html",
    "title": "Class GasGaugeNeedle",
    "keywords": "Class GasGaugeNeedle A class representing a needle on the GasGuage chart GasGaugeNeedle s. Inheritance Object CurveItem GasGaugeNeedle Implements ICloneable ISerializable Inherited Members CurveItem._isX2Axis CurveItem._isY2Axis CurveItem._yAxisIndex CurveItem._isVisible CurveItem._isSelected CurveItem._isSelectable CurveItem._isOverrideOrdinal CurveItem._points CurveItem.Tag CurveItem.schema CurveItem.Label CurveItem.Color CurveItem.IsVisible CurveItem.IsSelected CurveItem.IsSelectable CurveItem.IsOverrideOrdinal CurveItem.IsX2Axis CurveItem.IsY2Axis CurveItem.YAxisIndex CurveItem.IsBar CurveItem.IsPie CurveItem.IsLine CurveItem.NPts CurveItem.Points CurveItem.Item[Int32] CurveItem.Link CurveItem.AddPoint(Double, Double) CurveItem.AddPoint(PointPair) CurveItem.Clear() CurveItem.RemovePoint(Int32) CurveItem.GetXAxis(GraphPane) CurveItem.GetYAxis(GraphPane) CurveItem.GetYAxisIndex(GraphPane) CurveItem.MakeUnique() CurveItem.MakeUnique(ColorSymbolRotator) CurveItem.GetRange(Double, Double, Double, Double, Boolean, Boolean, GraphPane) CurveItem.BaseAxis(GraphPane) CurveItem.ValueAxis(GraphPane) CurveItem.GetBarWidth(GraphPane) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class GasGaugeNeedle : CurveItem, ICloneable, ISerializable Constructors | Improve this Doc View Source GasGaugeNeedle(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected GasGaugeNeedle(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source GasGaugeNeedle(String, Double, Color) Create a new GasGaugeNeedle Declaration public GasGaugeNeedle(string label, double val, Color color) Parameters Type Name Description String label The value associated with this GasGaugeNeedle instance. Double val The value of this GasGaugeNeedle . Color color The display color for this GasGaugeNeedle instance. | Improve this Doc View Source GasGaugeNeedle(GasGaugeNeedle) The Copy Constructor Declaration public GasGaugeNeedle(GasGaugeNeedle ggn) Parameters Type Name Description GasGaugeNeedle ggn The GasGaugeNeedle object from which to copy Fields | Improve this Doc View Source schema2 Current schema value that defines the version of the serialized file Declaration public const int schema2 = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source Border Gets or Sets the Border of this GasGaugeNeedle Declaration public Border Border { get; set; } Property Value Type Description Border | Improve this Doc View Source Fill Gets or Sets the Fill of this GasGaugeNeedle Declaration public Fill Fill { get; set; } Property Value Type Description Fill | Improve this Doc View Source LabelDetail Gets or Sets the LableDetail of this GasGaugeNeedle Declaration public TextObj LabelDetail { get; set; } Property Value Type Description TextObj | Improve this Doc View Source NeedleColor Gets or Sets the NeedelColor of this GasGaugeNeedle Declaration public Color NeedleColor { get; set; } Property Value Type Description Color | Improve this Doc View Source NeedleValue Gets or Sets the NeedleValue of this GasGaugeNeedle Declaration public double NeedleValue { get; set; } Property Value Type Description Double | Improve this Doc View Source NeedleWidth Gets or Sets the NeedleWidth of this GasGaugeNeedle Declaration public float NeedleWidth { get; set; } Property Value Type Description Single | Improve this Doc View Source SlicePath Gets or Sets the SlicePath of this GasGaugeNeedle Declaration public GraphicsPath SlicePath { get; } Property Value Type Description GraphicsPath Methods | Improve this Doc View Source CalcRectangle(Graphics, GraphPane, Single, RectangleF) Calculate the RectangleF that will be used to define the bounding rectangle of the GasGaugeNeedle. Declaration public static RectangleF CalcRectangle(Graphics g, GraphPane pane, float scaleFactor, RectangleF chartRect) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. RectangleF chartRect The RectangleF (normally the Rect ) that bounds this pie. Returns Type Description RectangleF Remarks This rectangle always lies inside of the Rect , and it is normally a square so that the pie itself is not oval-shaped. | Improve this Doc View Source CalculateGasGaugeParameters(GraphPane) Calculate the values needed to properly display this GasGaugeNeedle . Declaration public static void CalculateGasGaugeParameters(GraphPane pane) Parameters Type Name Description GraphPane pane A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public GasGaugeNeedle Clone() Returns Type Description GasGaugeNeedle A new, independent copy of this class | Improve this Doc View Source Draw(Graphics, GraphPane, Int32, Single) Do all rendering associated with this GasGaugeNeedle item to the specified Graphics device. This method is normally only called by the Draw method of the parent CurveList collection object. Declaration public override void Draw(Graphics g, GraphPane pane, int pos, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Int32 pos Not used for rendering GasGaugeNeedle Single scaleFactor Not used for rendering GasGaugeNeedle Overrides CurveItem.Draw(Graphics, GraphPane, Int32, Single) | Improve this Doc View Source DrawLegendKey(Graphics, GraphPane, RectangleF, Single) Render the label for this GasGaugeNeedle . Declaration public override void DrawLegendKey(Graphics g, GraphPane pane, RectangleF rect, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. RectangleF rect Bounding rectangle for this GasGaugeNeedle . Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Overrides CurveItem.DrawLegendKey(Graphics, GraphPane, RectangleF, Single) | Improve this Doc View Source GetCoords(GraphPane, Int32, out String) Determine the coords for the rectangle associated with a specified point for this CurveItem Declaration public override bool GetCoords(GraphPane pane, int i, out string coords) Parameters Type Name Description GraphPane pane The GraphPane to which this curve belongs Int32 i The index of the point of interest String coords A list of coordinates that represents the \"rect\" for this point (used in an html AREA tag) Returns Type Description Boolean true if it's a valid point, false otherwise Overrides CurveItem.GetCoords(GraphPane, Int32, out String) | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides CurveItem.GetObjectData(SerializationInfo, StreamingContext) Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.GasGaugeRegion.Default.html": {
    "href": "api/ZedGraph.GasGaugeRegion.Default.html",
    "title": "Struct GasGaugeRegion.Default",
    "keywords": "Struct GasGaugeRegion.Default Specify the default property values for the GasGaugeRegion class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source BorderColor The default value for the color of the GasGaugeRegion border Declaration public static Color BorderColor Field Value Type Description Color | Improve this Doc View Source BorderWidth The default border pen width for the GasGaugeRegion Declaration public static float BorderWidth Field Value Type Description Single | Improve this Doc View Source FillBrush The default value for the fill brush of the GasGaugeRegion Declaration public static Brush FillBrush Field Value Type Description Brush | Improve this Doc View Source FillColor The default value for the color of the GasGaugeRegion fill Declaration public static Color FillColor Field Value Type Description Color | Improve this Doc View Source FillType The default fill type for the GasGaugeRegion Declaration public static FillType FillType Field Value Type Description FillType | Improve this Doc View Source FontSize The default value for the font size of the GasGaugeRegion labels. Declaration public static float FontSize Field Value Type Description Single | Improve this Doc View Source IsBorderVisible The default value for the visibility of the GasGaugeRegion border. Declaration public static bool IsBorderVisible Field Value Type Description Boolean | Improve this Doc View Source isVisible The default value for the visibility of the GasGaugeRegion fill. Declaration public static bool isVisible Field Value Type Description Boolean"
  },
  "api/ZedGraph.GasGaugeRegion.html": {
    "href": "api/ZedGraph.GasGaugeRegion.html",
    "title": "Class GasGaugeRegion",
    "keywords": "Class GasGaugeRegion A class representing a region on the GasGuage chart GasGaugeRegion s. Inheritance Object CurveItem GasGaugeRegion Implements ICloneable ISerializable Inherited Members CurveItem._isX2Axis CurveItem._isY2Axis CurveItem._yAxisIndex CurveItem._isVisible CurveItem._isSelected CurveItem._isSelectable CurveItem._isOverrideOrdinal CurveItem._points CurveItem.Tag CurveItem.schema CurveItem.Label CurveItem.Color CurveItem.IsVisible CurveItem.IsSelected CurveItem.IsSelectable CurveItem.IsOverrideOrdinal CurveItem.IsX2Axis CurveItem.IsY2Axis CurveItem.YAxisIndex CurveItem.IsBar CurveItem.IsPie CurveItem.IsLine CurveItem.NPts CurveItem.Points CurveItem.Item[Int32] CurveItem.Link CurveItem.AddPoint(Double, Double) CurveItem.AddPoint(PointPair) CurveItem.Clear() CurveItem.RemovePoint(Int32) CurveItem.GetXAxis(GraphPane) CurveItem.GetYAxis(GraphPane) CurveItem.GetYAxisIndex(GraphPane) CurveItem.MakeUnique() CurveItem.MakeUnique(ColorSymbolRotator) CurveItem.GetRange(Double, Double, Double, Double, Boolean, Boolean, GraphPane) CurveItem.BaseAxis(GraphPane) CurveItem.ValueAxis(GraphPane) CurveItem.GetBarWidth(GraphPane) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class GasGaugeRegion : CurveItem, ICloneable, ISerializable Constructors | Improve this Doc View Source GasGaugeRegion(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected GasGaugeRegion(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source GasGaugeRegion(String, Double, Double, Color) Create a new GasGaugeRegion Declaration public GasGaugeRegion(string label, double minVal, double maxVal, Color color) Parameters Type Name Description String label The value associated with this GasGaugeRegion instance. Double minVal The minimum value of this GasGaugeNeedle . Double maxVal The maximum value of this GasGaugeNeedle . Color color The display color for this GasGaugeRegion instance. | Improve this Doc View Source GasGaugeRegion(GasGaugeRegion) The Copy Constructor Declaration public GasGaugeRegion(GasGaugeRegion ggr) Parameters Type Name Description GasGaugeRegion ggr The GasGaugeRegion object from which to copy Fields | Improve this Doc View Source schema2 Current schema value that defines the version of the serialized file Declaration public const int schema2 = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source Border Gets or sets the Border of this GasGaugeRegion Declaration public Border Border { get; set; } Property Value Type Description Border | Improve this Doc View Source Fill Gets or sets the Fill of this GasGaugeRegion Declaration public Fill Fill { get; set; } Property Value Type Description Fill | Improve this Doc View Source LabelDetail Gets or sets the LabelDetail of this GasGaugeRegion Declaration public TextObj LabelDetail { get; set; } Property Value Type Description TextObj | Improve this Doc View Source MaxValue Gets or sets the MaxValue of this GasGaugeRegion Declaration public double MaxValue { get; set; } Property Value Type Description Double | Improve this Doc View Source MinValue Gets or sets the MinValue of this GasGaugeRegion Declaration public double MinValue { get; set; } Property Value Type Description Double | Improve this Doc View Source RegionColor Gets or sets the RegionColor of this GasGaugeRegion Declaration public Color RegionColor { get; set; } Property Value Type Description Color | Improve this Doc View Source SlicePath Gets or sets the SlicePath of this GasGaugeRegion Declaration public GraphicsPath SlicePath { get; } Property Value Type Description GraphicsPath Methods | Improve this Doc View Source CalcRectangle(Graphics, GraphPane, Single, RectangleF) Calculate the RectangleF that will be used to define the bounding rectangle of the GasGaugeNeedle. Declaration public static RectangleF CalcRectangle(Graphics g, GraphPane pane, float scaleFactor, RectangleF chartRect) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. RectangleF chartRect The RectangleF (normally the Rect ) that bounds this pie. Returns Type Description RectangleF Remarks This rectangle always lies inside of the Rect , and it is normally a square so that the pie itself is not oval-shaped. | Improve this Doc View Source CalculateGasGuageParameters(GraphPane) Calculate the values needed to properly display this GasGaugeRegion . Declaration public static void CalculateGasGuageParameters(GraphPane pane) Parameters Type Name Description GraphPane pane A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public GasGaugeRegion Clone() Returns Type Description GasGaugeRegion A new, independent copy of this class | Improve this Doc View Source Draw(Graphics, GraphPane, Int32, Single) Do all rendering associated with this GasGaugeRegion item to the specified Graphics device. This method is normally only called by the Draw method of the parent CurveList collection object. Declaration public override void Draw(Graphics g, GraphPane pane, int pos, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Int32 pos Not used for rendering GasGaugeNeedle Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Overrides CurveItem.Draw(Graphics, GraphPane, Int32, Single) | Improve this Doc View Source DrawLegendKey(Graphics, GraphPane, RectangleF, Single) Render the label for this GasGaugeRegion . Declaration public override void DrawLegendKey(Graphics g, GraphPane pane, RectangleF rect, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. RectangleF rect Bounding rectangle for this GasGaugeRegion . Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Overrides CurveItem.DrawLegendKey(Graphics, GraphPane, RectangleF, Single) | Improve this Doc View Source GetCoords(GraphPane, Int32, out String) Determine the coords for the rectangle associated with a specified point for this CurveItem Declaration public override bool GetCoords(GraphPane pane, int i, out string coords) Parameters Type Name Description GraphPane pane The GraphPane to which this curve belongs Int32 i The index of the point of interest String coords A list of coordinates that represents the \"rect\" for this point (used in an html AREA tag) Returns Type Description Boolean true if it's a valid point, false otherwise Overrides CurveItem.GetCoords(GraphPane, Int32, out String) | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides CurveItem.GetObjectData(SerializationInfo, StreamingContext) Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.GraphObj.Default.html": {
    "href": "api/ZedGraph.GraphObj.Default.html",
    "title": "Struct GraphObj.Default",
    "keywords": "Struct GraphObj.Default A simple struct that defines the default property values for the GraphObj class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source AlignH Default value for the horizontal GraphObj text alignment ( Location property). This is specified using the AlignH enum type. Declaration public static AlignH AlignH Field Value Type Description AlignH | Improve this Doc View Source AlignV Default value for the vertical GraphObj text alignment ( Location property). This is specified using the AlignV enum type. Declaration public static AlignV AlignV Field Value Type Description AlignV | Improve this Doc View Source CoordFrame The default coordinate system to be used for defining the GraphObj location coordinates ( Location property). Declaration public static CoordType CoordFrame Field Value Type Description CoordType The coordinate system is defined with the CoordType enum | Improve this Doc View Source IsClippedToChartRect The default value for IsClippedToChartRect . Declaration public static bool IsClippedToChartRect Field Value Type Description Boolean"
  },
  "api/ZedGraph.GraphObj.html": {
    "href": "api/ZedGraph.GraphObj.html",
    "title": "Class GraphObj",
    "keywords": "Class GraphObj An abstract base class that represents a text object on the graph. A list of GraphObj objects is maintained by the GraphObjList collection class. Inheritance Object GraphObj BoxObj ImageObj LineObj TextObj Implements ISerializable ICloneable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public abstract class GraphObj : ISerializable, ICloneable Constructors | Improve this Doc View Source GraphObj() Default constructor that sets all GraphObj properties to default values as defined in the GraphObj.Default class. Declaration public GraphObj() | Improve this Doc View Source GraphObj(Double, Double) Constructor that sets all GraphObj properties to default values as defined in the GraphObj.Default class. Declaration public GraphObj(double x, double y) Parameters Type Name Description Double x The x position of the text. The units of this position are specified by the CoordinateFrame property. The text will be aligned to this position based on the AlignH property. Double y The y position of the text. The units of this position are specified by the CoordinateFrame property. The text will be aligned to this position based on the AlignV property. | Improve this Doc View Source GraphObj(Double, Double, Double, Double) Constructor that creates a GraphObj with the specified coordinates and all other properties to defaults as specified in the GraphObj.Default class.. Declaration public GraphObj(double x, double y, double x2, double y2) Parameters Type Name Description Double x The x position of the item. Double y The y position of the item. Double x2 The x2 position of the item. Double y2 The x2 position of the item. Remarks The four coordinates define the starting point and ending point for ArrowObj 's, or the topleft and bottomright points for ImageObj 's. For GraphObj 's that only require one point, the and values will be ignored. The units of the coordinates are specified by the CoordinateFrame property. | Improve this Doc View Source GraphObj(Double, Double, Double, Double, CoordType, AlignH, AlignV) Constructor that creates a GraphObj with the specified position, CoordType , AlignH , and AlignV . Other properties are set to default values as defined in the GraphObj.Default class. Declaration public GraphObj(double x, double y, double x2, double y2, CoordType coordType, AlignH alignH, AlignV alignV) Parameters Type Name Description Double x The x position of the item. Double y The y position of the item. Double x2 The x2 position of the item. Double y2 The x2 position of the item. CoordType coordType The CoordType enum value that indicates what type of coordinate system the x and y parameters are referenced to. AlignH alignH The AlignH enum that specifies the horizontal alignment of the object with respect to the (x,y) location AlignV alignV The AlignV enum that specifies the vertical alignment of the object with respect to the (x,y) location Remarks The four coordinates define the starting point and ending point for ArrowObj 's, or the topleft and bottomright points for ImageObj 's. For GraphObj 's that only require one point, the and values will be ignored. The units of the coordinates are specified by the CoordinateFrame property. | Improve this Doc View Source GraphObj(Double, Double, CoordType) Constructor that creates a GraphObj with the specified position and CoordType . Other properties are set to default values as defined in the GraphObj.Default class. Declaration public GraphObj(double x, double y, CoordType coordType) Parameters Type Name Description Double x The x position of the item. The item will be aligned to this position based on the AlignH property. Double y The y position of the item. The item will be aligned to this position based on the AlignV property. CoordType coordType The CoordType enum value that indicates what type of coordinate system the x and y parameters are referenced to. Remarks The two coordinates define the location point for the object. The units of the coordinates are specified by the CoordinateFrame property. | Improve this Doc View Source GraphObj(Double, Double, CoordType, AlignH, AlignV) Constructor that creates a GraphObj with the specified position, CoordType , AlignH , and AlignV . Other properties are set to default values as defined in the GraphObj.Default class. Declaration public GraphObj(double x, double y, CoordType coordType, AlignH alignH, AlignV alignV) Parameters Type Name Description Double x The x position of the item. The item will be aligned to this position based on the AlignH property. Double y The y position of the text. The units of this position are specified by the CoordinateFrame property. The text will be aligned to this position based on the AlignV property. CoordType coordType The CoordType enum value that indicates what type of coordinate system the x and y parameters are referenced to. AlignH alignH The AlignH enum that specifies the horizontal alignment of the object with respect to the (x,y) location AlignV alignV The AlignV enum that specifies the vertical alignment of the object with respect to the (x,y) location Remarks The two coordinates define the location point for the object. The units of the coordinates are specified by the CoordinateFrame property. | Improve this Doc View Source GraphObj(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected GraphObj(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source GraphObj(GraphObj) The Copy Constructor Declaration public GraphObj(GraphObj rhs) Parameters Type Name Description GraphObj rhs The GraphObj object from which to copy Fields | Improve this Doc View Source _isClippedToChartRect Protected field that determines whether or not the rendering of this GraphObj will be clipped to the ChartRect. Use the public property IsClippedToChartRect to access this value. Declaration [CLSCompliant(false)] protected bool _isClippedToChartRect Field Value Type Description Boolean | Improve this Doc View Source _isVisible Protected field that determines whether or not this GraphObj is visible in the graph. Use the public property IsVisible to access this value. Declaration [CLSCompliant(false)] protected bool _isVisible Field Value Type Description Boolean | Improve this Doc View Source _location Protected field that stores the location of this GraphObj . Use the public property Location to access this value. Declaration [CLSCompliant(false)] protected Location _location Field Value Type Description Location | Improve this Doc View Source schema Current schema value that defines the version of the serialized file Declaration public const int schema = 10 Field Value Type Description Int32 Remarks schema changed to 2 when isClippedToChartRect was added. | Improve this Doc View Source Tag A tag object for use by the user. This can be used to store additional information associated with the GraphObj . ZedGraph does not use this value for any purpose. Declaration public object Tag Field Value Type Description Object Remarks Note that, if you are going to Serialize ZedGraph data, then any type that you store in Tag must be a serializable type (or it will cause an exception). Properties | Improve this Doc View Source IsClippedToChartRect Gets or sets a value that determines whether or not the rendering of this GraphObj will be clipped to the Rect . Declaration public bool IsClippedToChartRect { get; set; } Property Value Type Description Boolean true to clip the GraphObj to the Rect bounds, false to leave it unclipped. | Improve this Doc View Source IsInFrontOfData true if the ZOrder of this object is set to put it in front of the CurveItem data points. Declaration public bool IsInFrontOfData { get; } Property Value Type Description Boolean | Improve this Doc View Source IsVisible Gets or sets a value that determines if this GraphObj will be visible in the graph. true displays the item, false hides it. Declaration public bool IsVisible { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Link Gets or sets the hyperlink information for this GraphObj . Declaration public Link Link { get; set; } Property Value Type Description Link | Improve this Doc View Source Location The Location struct that describes the location for this GraphObj . Declaration public Location Location { get; set; } Property Value Type Description Location | Improve this Doc View Source ZOrder Gets or sets a value that determines the z-order \"depth\" of this item relative to other graphic objects. Declaration public ZOrder ZOrder { get; set; } Property Value Type Description ZOrder Remarks Note that this controls the z-order with respect to other elements such as CurveItem 's, Axis objects, etc. The order of GraphObj objects having the same ZOrder value is controlled by their order in the GraphObjList . The first GraphObj in the list is drawn in front of other GraphObj objects having the same ZOrder value. Methods | Improve this Doc View Source Draw(Graphics, PaneBase, Single) Render this GraphObj object to the specified Graphics device. Declaration public abstract void Draw(Graphics g, PaneBase pane, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. PaneBase pane A reference to the PaneBase object that is the parent or owner of this object. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent PaneBase object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Remarks This method is normally only called by the Draw method of the parent GraphObjList collection object. | Improve this Doc View Source GetCoords(PaneBase, Graphics, Single, out String, out String) Determines the shape type and Coords values for this GraphObj Declaration public abstract void GetCoords(PaneBase pane, Graphics g, float scaleFactor, out string shape, out string coords) Parameters Type Name Description PaneBase pane Graphics g Single scaleFactor String shape String coords | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public virtual void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source PointInBox(PointF, PaneBase, Graphics, Single) Determine if the specified screen point lies inside the bounding box of this GraphObj . Declaration public virtual bool PointInBox(PointF pt, PaneBase pane, Graphics g, float scaleFactor) Parameters Type Name Description PointF pt The screen point, in pixels PaneBase pane A reference to the PaneBase object that is the parent or owner of this object. Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent PaneBase object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Returns Type Description Boolean true if the point lies in the bounding box, false otherwise Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone. Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Remarks Note that this method must be called with an explicit cast to ICloneable, and that it is inherently virtual. For example: ParentClass foo = new ChildClass(); ChildClass bar = (ChildClass) ((ICloneable)foo).Clone(); Assume that ChildClass is inherited from ParentClass. Even though foo is declared with ParentClass, it is actually an instance of ChildClass. Calling the ICloneable implementation of Clone() on foo actually calls ChildClass.Clone() as if it were a virtual function. Implements System.Runtime.Serialization.ISerializable System.ICloneable"
  },
  "api/ZedGraph.GraphObjList.html": {
    "href": "api/ZedGraph.GraphObjList.html",
    "title": "Class GraphObjList",
    "keywords": "Class GraphObjList A collection class containing a list of TextObj objects to be displayed on the graph. Inheritance Object List < GraphObj > GraphObjList Implements IList < GraphObj > ICollection < GraphObj > IEnumerable < GraphObj > IList ICollection IEnumerable ICloneable Inherited Members System.Collections.Generic.List<ZedGraph.GraphObj>.System.Collections.IList.get_Item(System.Int32) System.Collections.Generic.List<ZedGraph.GraphObj>.System.Collections.IList.set_Item(System.Int32, System.Object) List<GraphObj>.Add(GraphObj) List<GraphObj>.AddRange(IEnumerable<GraphObj>) List<GraphObj>.AsReadOnly() List<GraphObj>.BinarySearch(Int32, Int32, GraphObj, IComparer<GraphObj>) List<GraphObj>.BinarySearch(GraphObj) List<GraphObj>.BinarySearch(GraphObj, IComparer<GraphObj>) List<GraphObj>.Clear() List<GraphObj>.Contains(GraphObj) List<GraphObj>.ConvertAll<TOutput>(Converter<GraphObj, TOutput>) List<GraphObj>.CopyTo(Int32, GraphObj[], Int32, Int32) List<GraphObj>.CopyTo(GraphObj[]) List<GraphObj>.CopyTo(GraphObj[], Int32) List<GraphObj>.Exists(Predicate<GraphObj>) List<GraphObj>.Find(Predicate<GraphObj>) List<GraphObj>.FindAll(Predicate<GraphObj>) List<GraphObj>.FindIndex(Int32, Int32, Predicate<GraphObj>) List<GraphObj>.FindIndex(Int32, Predicate<GraphObj>) List<GraphObj>.FindIndex(Predicate<GraphObj>) List<GraphObj>.FindLast(Predicate<GraphObj>) List<GraphObj>.FindLastIndex(Int32, Int32, Predicate<GraphObj>) List<GraphObj>.FindLastIndex(Int32, Predicate<GraphObj>) List<GraphObj>.FindLastIndex(Predicate<GraphObj>) List<GraphObj>.ForEach(Action<GraphObj>) List<GraphObj>.GetEnumerator() List<GraphObj>.GetRange(Int32, Int32) List<GraphObj>.IndexOf(GraphObj) List<GraphObj>.IndexOf(GraphObj, Int32) List<GraphObj>.IndexOf(GraphObj, Int32, Int32) List<GraphObj>.Insert(Int32, GraphObj) List<GraphObj>.InsertRange(Int32, IEnumerable<GraphObj>) List<GraphObj>.LastIndexOf(GraphObj) List<GraphObj>.LastIndexOf(GraphObj, Int32) List<GraphObj>.LastIndexOf(GraphObj, Int32, Int32) List<GraphObj>.Remove(GraphObj) List<GraphObj>.RemoveAll(Predicate<GraphObj>) List<GraphObj>.RemoveAt(Int32) List<GraphObj>.RemoveRange(Int32, Int32) List<GraphObj>.Reverse() List<GraphObj>.Reverse(Int32, Int32) List<GraphObj>.Sort() List<GraphObj>.Sort(IComparer<GraphObj>) List<GraphObj>.Sort(Comparison<GraphObj>) List<GraphObj>.Sort(Int32, Int32, IComparer<GraphObj>) List<GraphObj>.IEnumerable<GraphObj>.GetEnumerator() List<GraphObj>.ICollection.CopyTo(Array, Int32) List<GraphObj>.IEnumerable.GetEnumerator() List<GraphObj>.IList.Add(Object) List<GraphObj>.IList.Contains(Object) List<GraphObj>.IList.IndexOf(Object) List<GraphObj>.IList.Insert(Int32, Object) List<GraphObj>.IList.Remove(Object) List<GraphObj>.ToArray() List<GraphObj>.TrimExcess() List<GraphObj>.TrueForAll(Predicate<GraphObj>) List<GraphObj>.Capacity List<GraphObj>.Count List<GraphObj>.Item[Int32] List<GraphObj>.ICollection<GraphObj>.IsReadOnly List<GraphObj>.ICollection.IsSynchronized List<GraphObj>.ICollection.SyncRoot List<GraphObj>.IList.IsFixedSize List<GraphObj>.IList.IsReadOnly List<GraphObj>.IList.Item[Int32] Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class GraphObjList : List<GraphObj>, IList<GraphObj>, ICollection<GraphObj>, IEnumerable<GraphObj>, IList, ICollection, IEnumerable, ICloneable Constructors | Improve this Doc View Source GraphObjList() Default constructor for the GraphObjList collection class Declaration public GraphObjList() | Improve this Doc View Source GraphObjList(GraphObjList) The Copy Constructor Declaration public GraphObjList(GraphObjList rhs) Parameters Type Name Description GraphObjList rhs The GraphObjList object from which to copy Properties | Improve this Doc View Source Item[String] Indexer to access the specified GraphObj object by its Tag . Note that the Tag must be a String type for this method to work. Declaration public GraphObj this[string tag] { get; } Parameters Type Name Description String tag The String type tag to search for. Property Value Type Description GraphObj A GraphObj object reference. See Also IndexOfTag(String) Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public GraphObjList Clone() Returns Type Description GraphObjList A new, independent copy of this class | Improve this Doc View Source Draw(Graphics, PaneBase, Single, ZOrder) Render text to the specified Graphics device by calling the Draw method of each GraphObj object in the collection. Declaration public void Draw(Graphics g, PaneBase pane, float scaleFactor, ZOrder zOrder) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. PaneBase pane A reference to the PaneBase object that is the parent or owner of this object. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. ZOrder zOrder A ZOrder enumeration that controls the placement of this GraphObj relative to other graphic objects. The order of GraphObj 's with the same ZOrder value is control by their order in this GraphObjList . Remarks This method is normally only called by the Draw method of the parent GraphPane object. | Improve this Doc View Source FindPoint(PointF, PaneBase, Graphics, Single, out Int32) Determine if a mouse point is within any GraphObj , and if so, return the index number of the the GraphObj . Declaration public bool FindPoint(PointF mousePt, PaneBase pane, Graphics g, float scaleFactor, out int index) Parameters Type Name Description PointF mousePt The screen point, in pixel coordinates. PaneBase pane A reference to the PaneBase object that is the parent or owner of this object. Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Int32 index The index number of the TextObj that is under the mouse point. The TextObj object is accessible via the GraphObjList indexer property. Returns Type Description Boolean true if the mouse point is within a GraphObj bounding box, false otherwise. See Also FindNearestObject(PointF, Graphics, out Object, out Int32) | Improve this Doc View Source IndexOfTag(String) Return the zero-based position index of the GraphObj with the specified Tag . Declaration public int IndexOfTag(string tag) Parameters Type Name Description String tag The String tag that is in the Tag attribute of the item to be found. Returns Type Description Int32 The zero-based index of the specified GraphObj , or -1 if the GraphObj is not in the list Remarks In order for this method to work, the Tag property must be of type String . | Improve this Doc View Source Move(Int32, Int32) Move the position of the object at the specified index to the new relative position in the list. Declaration public int Move(int index, int relativePos) Parameters Type Name Description Int32 index The zero-based index of the object to be moved. Int32 relativePos The relative number of positions to move the object. A value of -1 will move the object one position earlier in the list, a value of 1 will move it one position later. To move an item to the beginning of the list, use a large negative value (such as -999). To move it to the end of the list, use a large positive value. Returns Type Description Int32 The new position for the object, or -1 if the object was not found. Remarks For Graphic type objects, this method controls the Z-Order of the items. Objects at the beginning of the list appear in front of objects at the end of the list. Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable System.ICloneable"
  },
  "api/ZedGraph.GraphPane.AxisChangeEventHandler.html": {
    "href": "api/ZedGraph.GraphPane.AxisChangeEventHandler.html",
    "title": "Delegate GraphPane.AxisChangeEventHandler",
    "keywords": "Delegate GraphPane.AxisChangeEventHandler A delegate to provide notification through the AxisChangeEvent when AxisChange() is called. Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public delegate void AxisChangeEventHandler(GraphPane pane); Parameters Type Name Description GraphPane pane The GraphPane for which AxisChange() has been called. See Also AxisChangeEvent"
  },
  "api/ZedGraph.GraphPane.Default.html": {
    "href": "api/ZedGraph.GraphPane.Default.html",
    "title": "Struct GraphPane.Default",
    "keywords": "Struct GraphPane.Default A simple struct that defines the default property values for the GraphPane class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source ClusterScaleWidth The default width of a bar cluster on a Bar graph. This value only applies to Bar graphs, and only when the Type is Linear , Log or Date . This dimension is expressed in terms of X scale user units. Declaration public static double ClusterScaleWidth Field Value Type Description Double See Also MinClusterGap MinBarGap | Improve this Doc View Source IsBoundedRanges The default settings for the Axis scale bounded ranges option ( IsBoundedRanges property). true to have the auto-scale-range code subset the data according to any manually set scale values, false otherwise. Declaration public static bool IsBoundedRanges Field Value Type Description Boolean | Improve this Doc View Source IsIgnoreInitial The default settings for the Axis scale ignore initial zero values option ( IsIgnoreInitial property). true to have the auto-scale-range code ignore the initial data points until the first non-zero Y value, false otherwise. Declaration public static bool IsIgnoreInitial Field Value Type Description Boolean | Improve this Doc View Source LineType The default value for the LineType property, which determines if the lines are drawn in normal or \"stacked\" mode. See the LineType for more information. Declaration public static LineType LineType Field Value Type Description LineType See Also LineType | Improve this Doc View Source NearestTol The tolerance that is applied to the FindNearestPoint(PointF, out CurveItem, out Int32) routine. If a given curve point is within this many pixels of the mousePt, the curve point is considered to be close enough for selection as a nearest point candidate. Declaration public static double NearestTol Field Value Type Description Double"
  },
  "api/ZedGraph.GraphPane.html": {
    "href": "api/ZedGraph.GraphPane.html",
    "title": "Class GraphPane",
    "keywords": "Class GraphPane Class GraphPane encapsulates the graph pane, which is all display elements associated with an individual graph. Inheritance Object PaneBase GraphPane Implements ICloneable ISerializable Inherited Members PaneBase._rect PaneBase._title PaneBase._legend PaneBase._tag PaneBase._isFontsScaled PaneBase._isPenWidthScaled PaneBase._fill PaneBase._border PaneBase._graphObjList PaneBase._baseDimension PaneBase._titleGap PaneBase.Rect PaneBase.Legend PaneBase.Title PaneBase.Tag PaneBase.Border PaneBase.Fill PaneBase.GraphObjList PaneBase.Margin PaneBase.BaseDimension PaneBase.TitleGap PaneBase.IsFontsScaled PaneBase.IsPenWidthScaled PaneBase.ShallowClone() PaneBase.schema PaneBase.CalcClientRect(Graphics, Single) PaneBase.DrawPaneFrame(Graphics, Single) PaneBase.DrawTitle(Graphics, Single) PaneBase.ReSize(Graphics, RectangleF) PaneBase.CalcScaleFactor() PaneBase.ScaledPenWidth(Single, Single) PaneBase.GetImage() PaneBase.GetImage(Boolean) PaneBase.GetImage(Int32, Int32, Single, Boolean) PaneBase.GetImage(Int32, Int32, Single) PaneBase.GetMetafile(Int32, Int32, Boolean) PaneBase.GetMetafile(Int32, Int32) PaneBase.GetMetafile() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class GraphPane : PaneBase, ICloneable, ISerializable Remarks This class is the outside \"wrapper\" for the ZedGraph classes, and provides the interface to access the attributes of the graph. You can have multiple graphs in the same document or form, just instantiate multiple GraphPane's. Constructors | Improve this Doc View Source GraphPane() Default Constructor. Sets the Rect to (0, 0, 500, 375), and sets the Title and Title values to empty strings. Declaration public GraphPane() | Improve this Doc View Source GraphPane(RectangleF, String, String, String) Constructor for the GraphPane object. This routine will initialize all member variables and classes, setting appropriate default values as defined in the GraphPane.Default class. Declaration public GraphPane(RectangleF rect, string title, string xTitle, string yTitle) Parameters Type Name Description RectangleF rect A rectangular screen area where the graph is to be displayed. This area can be any size, and can be resize at any time using the Rect property. String title The Title for this GraphPane String xTitle The Title for the XAxis String yTitle The Title for the YAxis | Improve this Doc View Source GraphPane(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected GraphPane(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source GraphPane(GraphPane) The Copy Constructor Declaration public GraphPane(GraphPane rhs) Parameters Type Name Description GraphPane rhs The GraphPane object from which to copy Fields | Improve this Doc View Source schema2 Current schema value that defines the version of the serialized file Declaration public const int schema2 = 11 Field Value Type Description Int32 Properties | Improve this Doc View Source BarSettings Gets the BarSettings instance for this GraphPane , which stores the global properties for bar type charts. Declaration public BarSettings BarSettings { get; } Property Value Type Description BarSettings | Improve this Doc View Source Chart Gets the Chart instance for this GraphPane . Declaration public Chart Chart { get; } Property Value Type Description Chart | Improve this Doc View Source CurveList Gets or sets the list of CurveItem items for this GraphPane Declaration public CurveList CurveList { get; set; } Property Value Type Description CurveList A reference to a CurveList collection object | Improve this Doc View Source IsAlignGrids Gets or sets a value that determines if ZedGraph should modify the scale ranges for the Y and Y2 axes such that the number of major steps, and therefore the major grid lines, line up. Declaration public bool IsAlignGrids { get; set; } Property Value Type Description Boolean Remarks This property affects the way that AxisChange() selects the scale ranges for the Y and Y2 axes. It applies to the scale ranges of all Y and Y2 axes, but only if the MaxAuto is set to true. | Improve this Doc View Source IsBoundedRanges Gets or sets a boolean value that determines if the auto-scaled axis ranges will subset the data points based on any manually set scale range values. Declaration public bool IsBoundedRanges { get; set; } Property Value Type Description Boolean Remarks The bounds provide a means to subset the data. For example, if all the axes are set to autoscale, then the full range of data are used. But, if the XAxis.Min and XAxis.Max values are manually set, then the Y data range will reflect the Y values within the bounds of XAxis.Min and XAxis.Max. Set to true to subset the data, or false to always include all data points when calculating scale ranges. | Improve this Doc View Source IsIgnoreInitial Gets or sets a boolean value that affects the data range that is considered for the automatic scale ranging. Declaration [Bindable(true)] [Browsable(true)] public bool IsIgnoreInitial { get; set; } Property Value Type Description Boolean Remarks If true, then initial data points where the Y value is zero are not included when automatically determining the scale Min , Max , and MajorStep size. All data after the first non-zero Y value are included. See Also IsIgnoreInitial | Improve this Doc View Source IsIgnoreMissing Gets or sets a value that determines whether or not initial Missing values will cause the line segments of a curve to be discontinuous. Declaration public bool IsIgnoreMissing { get; set; } Property Value Type Description Boolean Remarks If this field is true, then the curves will be plotted as continuous lines as if the Missing values did not exist. Use the public property IsIgnoreMissing to access this value. | Improve this Doc View Source IsZoomed Gets a value that indicates whether or not the ZoomStateStack for this GraphPane is empty. Note that this value is only used for the . Declaration public bool IsZoomed { get; } Property Value Type Description Boolean | Improve this Doc View Source LineType Determines how the LineItem graphs will be displayed. See the LineType enum for the individual types available. Declaration public LineType LineType { get; set; } Property Value Type Description LineType See Also LineType | Improve this Doc View Source X2Axis Accesses the X2Axis for this graph Declaration public X2Axis X2Axis { get; } Property Value Type Description X2Axis A reference to a X2Axis object | Improve this Doc View Source XAxis Accesses the XAxis for this graph Declaration public XAxis XAxis { get; } Property Value Type Description XAxis A reference to a XAxis object | Improve this Doc View Source Y2Axis Accesses the primary Y2Axis for this graph Declaration public Y2Axis Y2Axis { get; } Property Value Type Description Y2Axis A reference to a Y2Axis object See Also YAxisList Y2AxisList | Improve this Doc View Source Y2AxisList Gets the collection of Y2 axes that belong to this GraphPane . Declaration public Y2AxisList Y2AxisList { get; } Property Value Type Description Y2AxisList | Improve this Doc View Source YAxis Accesses the primary YAxis for this graph Declaration public YAxis YAxis { get; } Property Value Type Description YAxis A reference to a YAxis object See Also YAxisList Y2AxisList | Improve this Doc View Source YAxisList Gets the collection of Y axes that belong to this GraphPane . Declaration public YAxisList YAxisList { get; } Property Value Type Description YAxisList | Improve this Doc View Source ZoomStack Gets a reference to the ZoomStateStack for this GraphPane . Declaration public ZoomStateStack ZoomStack { get; } Property Value Type Description ZoomStateStack Methods | Improve this Doc View Source AddBar(String, Double[], Double[], Color) Add a bar type curve ( CurveItem object) to the plot with the given data points (double arrays) and properties. This is simplified way to add curves without knowledge of the CurveList class. An alternative is to use the CurveList Add() method. Declaration public BarItem AddBar(string label, double[] x, double[] y, Color color) Parameters Type Name Description String label The text label (string) for the curve that will be used as a Legend entry. Double [] x An array of double precision X values (the independent values) that define the curve. Double [] y An array of double precision Y values (the dependent values) that define the curve. Color color The color to used for the bars Returns Type Description BarItem A CurveItem class for the newly created bar curve. This can then be used to access all of the curve properties that are not defined as arguments to the AddBar(String, Double[], Double[], Color) method. | Improve this Doc View Source AddBar(String, IPointList, Color) Add a bar type curve ( CurveItem object) to the plot with the given data points ( IPointList ) and properties. This is simplified way to add curves without knowledge of the CurveList class. An alternative is to use the CurveList Add() method. Declaration public BarItem AddBar(string label, IPointList points, Color color) Parameters Type Name Description String label The text label (string) for the curve that will be used as a Legend entry. IPointList points A IPointList of double precision value pairs that define the X and Y values for this curve Color color The color to used to fill the bars Returns Type Description BarItem A CurveItem class for the newly created bar curve. This can then be used to access all of the curve properties that are not defined as arguments to the AddBar(String, IPointList, Color) method. | Improve this Doc View Source AddCurve(String, Double[], Double[], Color) Add a curve ( CurveItem object) to the plot with the given data points (double arrays) and properties. This is simplified way to add curves without knowledge of the CurveList class. An alternative is to use the CurveList Add() method. Declaration public LineItem AddCurve(string label, double[] x, double[] y, Color color) Parameters Type Name Description String label The text label (string) for the curve that will be used as a Legend entry. Double [] x An array of double precision X values (the independent values) that define the curve. Double [] y An array of double precision Y values (the dependent values) that define the curve. Color color The color to used for the curve line, symbols, etc. Returns Type Description LineItem A CurveItem class for the newly created curve. This can then be used to access all of the curve properties that are not defined as arguments to the AddCurve(String, Double[], Double[], Color) method. | Improve this Doc View Source AddCurve(String, Double[], Double[], Color, SymbolType) Add a curve ( CurveItem object) to the plot with the given data points (double arrays) and properties. This is simplified way to add curves without knowledge of the CurveList class. An alternative is to use the CurveList Add() method. Declaration public LineItem AddCurve(string label, double[] x, double[] y, Color color, SymbolType symbolType) Parameters Type Name Description String label The text label (string) for the curve that will be used as a Legend entry. Double [] x An array of double precision X values (the independent values) that define the curve. Double [] y An array of double precision Y values (the dependent values) that define the curve. Color color The color to used for the curve line, symbols, etc. SymbolType symbolType A symbol type ( SymbolType ) that will be used for this curve. Returns Type Description LineItem A CurveItem class for the newly created curve. This can then be used to access all of the curve properties that are not defined as arguments to the AddCurve(String, Double[], Double[], Color, SymbolType) method. | Improve this Doc View Source AddCurve(String, IPointList, Color) Add a curve ( CurveItem object) to the plot with the given data points ( IPointList ) and properties. This is simplified way to add curves without knowledge of the CurveList class. An alternative is to use the CurveList Add() method. Declaration public LineItem AddCurve(string label, IPointList points, Color color) Parameters Type Name Description String label The text label (string) for the curve that will be used as a Legend entry. IPointList points A IPointList of double precision value pairs that define the X and Y values for this curve Color color The color to used for the curve line, symbols, etc. Returns Type Description LineItem A CurveItem class for the newly created curve. This can then be used to access all of the curve properties that are not defined as arguments to the AddCurve(String, IPointList, Color) method. | Improve this Doc View Source AddCurve(String, IPointList, Color, SymbolType) Add a curve ( CurveItem object) to the plot with the given data points ( IPointList ) and properties. This is simplified way to add curves without knowledge of the CurveList class. An alternative is to use the CurveList Add() method. Declaration public LineItem AddCurve(string label, IPointList points, Color color, SymbolType symbolType) Parameters Type Name Description String label The text label (string) for the curve that will be used as a Legend entry. IPointList points A IPointList of double precision value pairs that define the X and Y values for this curve Color color The color to used for the curve line, symbols, etc. SymbolType symbolType A symbol type ( SymbolType ) that will be used for this curve. Returns Type Description LineItem A CurveItem class for the newly created curve. This can then be used to access all of the curve properties that are not defined as arguments to the AddCurve(String, IPointList, Color, SymbolType) method. | Improve this Doc View Source AddErrorBar(String, Double[], Double[], Double[], Color) Add an error bar set ( ErrorBarItem object) to the plot with the given data points ( IPointList ) and properties. This is simplified way to add curves without knowledge of the CurveList class. An alternative is to use the CurveList Add() method. Declaration public ErrorBarItem AddErrorBar(string label, double[] x, double[] y, double[] baseValue, Color color) Parameters Type Name Description String label The text label (string) for the curve that will be used as a Legend entry. Double [] x An array of double precision X values (the independent values) that define the curve. Double [] y An array of double precision Y values (the dependent values) that define the curve. Double [] baseValue An array of double precision values that define the base value (the bottom) of the bars for this curve. Color color The color to used for the curve line, symbols, etc. Returns Type Description ErrorBarItem An ErrorBarItem class for the newly created curve. This can then be used to access all of the curve properties that are not defined as arguments to the AddErrorBar(String, IPointList, Color) method. | Improve this Doc View Source AddErrorBar(String, IPointList, Color) Add an error bar set ( ErrorBarItem object) to the plot with the given data points ( IPointList ) and properties. This is simplified way to add curves without knowledge of the CurveList class. An alternative is to use the CurveList Add() method. Declaration public ErrorBarItem AddErrorBar(string label, IPointList points, Color color) Parameters Type Name Description String label The text label (string) for the curve that will be used as a Legend entry. IPointList points A IPointList of double precision value pairs that define the X and Y values for this curve Color color The color to used for the curve line, symbols, etc. Returns Type Description ErrorBarItem An ErrorBarItem class for the newly created curve. This can then be used to access all of the curve properties that are not defined as arguments to the AddErrorBar(String, IPointList, Color) method. | Improve this Doc View Source AddHiLowBar(String, Double[], Double[], Double[], Color) Add a \"High-Low\" bar type curve ( HiLowBarItem object) to the plot with the given data points (double arrays) and properties. This is simplified way to add curves without knowledge of the CurveList class. An alternative is to use the CurveList Add() method. Declaration public HiLowBarItem AddHiLowBar(string label, double[] x, double[] y, double[] baseVal, Color color) Parameters Type Name Description String label The text label (string) for the curve that will be used as a Legend entry. Double [] x An array of double precision X values (the independent values) that define the curve. Double [] y An array of double precision Y values (the dependent values) that define the curve. Double [] baseVal An array of double precision values that define the base value (the bottom) of the bars for this curve. Color color The color to used for the bars Returns Type Description HiLowBarItem A HiLowBarItem class for the newly created bar curve. This can then be used to access all of the curve properties that are not defined as arguments to the AddHiLowBar(String, Double[], Double[], Double[], Color) method. | Improve this Doc View Source AddHiLowBar(String, IPointList, Color) Add a hi-low bar type curve ( CurveItem object) to the plot with the given data points ( IPointList ) and properties. This is simplified way to add curves without knowledge of the CurveList class. An alternative is to use the CurveList Add() method. Declaration public HiLowBarItem AddHiLowBar(string label, IPointList points, Color color) Parameters Type Name Description String label The text label (string) for the curve that will be used as a Legend entry. IPointList points A IPointList of double precision value Trio's that define the X, Y, and lower dependent values for this curve Color color The color to used to fill the bars Returns Type Description HiLowBarItem A HiLowBarItem class for the newly created bar curve. This can then be used to access all of the curve properties that are not defined as arguments to the AddHiLowBar(String, IPointList, Color) method. | Improve this Doc View Source AddJapaneseCandleStick(String, IPointList) Add a japanesecandlestick graph ( JapaneseCandleStickItem object) to the plot with the given data points ( IPointList ) and properties. Declaration public JapaneseCandleStickItem AddJapaneseCandleStick(string label, IPointList points) Parameters Type Name Description String label The text label (string) for the curve that will be used as a Legend entry. IPointList points A IPointList of double precision value pairs that define the X and Y values for this curve Returns Type Description JapaneseCandleStickItem A CurveItem class for the newly created curve. This can then be used to access all of the curve properties that are not defined as arguments to the AddJapaneseCandleStick(String, IPointList) method. Remarks This is simplified way to add curves without knowledge of the CurveList class. An alternative is to use the CurveList Add() method. Note that the IPointList should contain StockPt objects instead of PointPair objects in order to contain all the data values required for this curve type. | Improve this Doc View Source AddOHLCBar(String, IPointList, Color) Add a candlestick graph ( OHLCBarItem object) to the plot with the given data points ( IPointList ) and properties. Declaration public OHLCBarItem AddOHLCBar(string label, IPointList points, Color color) Parameters Type Name Description String label The text label (string) for the curve that will be used as a Legend entry. IPointList points A IPointList of double precision value pairs that define the X and Y values for this curve Color color The color to used for the curve line, symbols, etc. Returns Type Description OHLCBarItem A CurveItem class for the newly created curve. This can then be used to access all of the curve properties that are not defined as arguments to the AddOHLCBar(String, IPointList, Color) method. Remarks This is simplified way to add curves without knowledge of the CurveList class. An alternative is to use the CurveList Add() method. Note that the IPointList should contain StockPt objects instead of PointPair objects in order to contain all the data values required for this curve type. | Improve this Doc View Source AddPieSlice(Double, Color, Double, String) Add a PieItem to the display. Declaration public PieItem AddPieSlice(double value, Color color, double displacement, string label) Parameters Type Name Description Double value The value associated with this PieItem item. Color color The display color for this PieItem item. Double displacement The amount this PieItem item will be displaced from the center of the PieItem . String label Text label for this PieItem Returns Type Description PieItem a reference to the PieItem constructed | Improve this Doc View Source AddPieSlice(Double, Color, Color, Single, Double, String) Add a PieItem to the display, providing a gradient fill for the pie color. Declaration public PieItem AddPieSlice(double value, Color color1, Color color2, float fillAngle, double displacement, string label) Parameters Type Name Description Double value The value associated with this PieItem instance. Color color1 The starting display color for the gradient Fill for this PieItem instance. Color color2 The ending display color for the gradient Fill for this PieItem instance. Single fillAngle The angle for the gradient Fill . Double displacement The amount this PieItem instance will be displaced from the center point. String label Text label for this PieItem instance. Returns Type Description PieItem | Improve this Doc View Source AddPieSlices(Double[], String[]) Creates all the PieItem s for a single Pie Chart. Declaration public PieItem[] AddPieSlices(double[] values, string[] labels) Parameters Type Name Description Double [] values double array containing all Value s for a single PieChart. String [] labels string array containing all Label s for a single PieChart. Returns Type Description PieItem [] an array containing references to all PieItem s comprising the Pie Chart. | Improve this Doc View Source AddStick(String, Double[], Double[], Color) Add a stick graph ( StickItem object) to the plot with the given data points (double arrays) and properties. This is simplified way to add curves without knowledge of the CurveList class. An alternative is to use the CurveList Add() method. Declaration public StickItem AddStick(string label, double[] x, double[] y, Color color) Parameters Type Name Description String label The text label (string) for the curve that will be used as a Legend entry. Double [] x An array of double precision X values (the independent values) that define the curve. Double [] y An array of double precision Y values (the dependent values) that define the curve. Color color The color to used for the curve line, symbols, etc. Returns Type Description StickItem A StickItem class for the newly created curve. This can then be used to access all of the curve properties that are not defined as arguments to the AddStick(String, Double[], Double[], Color) method. | Improve this Doc View Source AddStick(String, IPointList, Color) Add a stick graph ( StickItem object) to the plot with the given data points ( IPointList ) and properties. This is simplified way to add curves without knowledge of the CurveList class. An alternative is to use the CurveList Add() method. Declaration public StickItem AddStick(string label, IPointList points, Color color) Parameters Type Name Description String label The text label (string) for the curve that will be used as a Legend entry. IPointList points A IPointList of double precision value pairs that define the X and Y values for this curve Color color The color to used for the curve line, symbols, etc. Returns Type Description StickItem A CurveItem class for the newly created curve. This can then be used to access all of the curve properties that are not defined as arguments to the AddStick(String, IPointList, Color) method. | Improve this Doc View Source AddY2Axis(String) Add a secondary Y2Axis (right side) to the list of axes in the Graph. Declaration public int AddY2Axis(string title) Parameters Type Name Description String title The title for the Y2Axis . Returns Type Description Int32 the ordinal position (index) in the Y2AxisList . Remarks Note that the primary Y2Axis is always included by default. This method turns off the MajorTic and MinorTic IsOpposite and IsInside properties by default. | Improve this Doc View Source AddYAxis(String) Add a secondary YAxis (left side) to the list of axes in the Graph. Declaration public int AddYAxis(string title) Parameters Type Name Description String title The title for the YAxis . Returns Type Description Int32 the ordinal position (index) in the YAxisList . Remarks Note that the primary YAxis is always included by default. This method turns off the MajorTic and MinorTic IsOpposite and IsInside properties by default. | Improve this Doc View Source AxisChange() AxisChange causes the axes scale ranges to be recalculated based on the current data range. Declaration public void AxisChange() Remarks There is no obligation to call AxisChange() for manually scaled axes. AxisChange() is only intended to handle auto scaling operations. Call this function anytime you change, add, or remove curve data to insure that the scale range of the axes are appropriate for the data range. This method calculates a scale minimum, maximum, and step size for each axis based on the current curve data. Only the axis attributes (min, max, step) that are set to auto-range ( MinAuto , MaxAuto , MajorStepAuto ) will be modified. You must call after calling AxisChange to make sure the display gets updated. This overload of AxisChange just uses a throw-away bitmap as Graphics. If you have a Graphics instance available from your Windows Form, you should use the AxisChange(Graphics) overload instead. | Improve this Doc View Source AxisChange(Graphics) AxisChange causes the axes scale ranges to be recalculated based on the current data range. Declaration public void AxisChange(Graphics g) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. Remarks There is no obligation to call AxisChange() for manually scaled axes. AxisChange() is only intended to handle auto scaling operations. Call this function anytime you change, add, or remove curve data to insure that the scale range of the axes are appropriate for the data range. This method calculates a scale minimum, maximum, and step size for each axis based on the current curve data. Only the axis attributes (min, max, step) that are set to auto-range ( MinAuto , MaxAuto , MajorStepAuto ) will be modified. You must call after calling AxisChange to make sure the display gets updated. | Improve this Doc View Source CalcChartRect(Graphics) Calculate the Rect based on the Rect . Declaration public RectangleF CalcChartRect(Graphics g) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. Returns Type Description RectangleF The calculated chart rect, in pixel coordinates. Remarks The ChartRect is the plot area bounded by the axes, and the rect is the total area as specified by the client application. | Improve this Doc View Source CalcChartRect(Graphics, Single) Calculate the Rect based on the Rect . Declaration public RectangleF CalcChartRect(Graphics g, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. Single scaleFactor The scaling factor for the features of the graph based on the BaseDimension . This scaling factor is calculated by the CalcScaleFactor() method. The scale factor represents a linear multiple to be applied to font sizes, symbol sizes, etc. Returns Type Description RectangleF The calculated chart rect, in pixel coordinates. Remarks The ChartRect is the plot area bounded by the axes, and the rect is the total area as specified by the client application. | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public GraphPane Clone() Returns Type Description GraphPane A new, independent copy of this class | Improve this Doc View Source Draw(Graphics) Draw all elements in the GraphPane to the specified graphics device. Declaration public override void Draw(Graphics g) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. Overrides PaneBase.Draw(Graphics) Remarks This method should be part of the Paint() update process. Calling this routine will redraw all features of the graph. No preparation is required other than an instantiated GraphPane object. | Improve this Doc View Source FindContainedObjects(RectangleF, Graphics, out CurveList) Find any objects that exist within the specified (screen) rectangle. This method will search through all of the graph objects, such as Axis , Legend , Title , GraphObj , and CurveItem . and see if the objects' bounding boxes are within the specified (screen) rectangle This method returns true if any are found. Declaration public bool FindContainedObjects(RectangleF rectF, Graphics g, out CurveList containedObjs) Parameters Type Name Description RectangleF rectF Graphics g CurveList containedObjs Returns Type Description Boolean | Improve this Doc View Source FindLinkableObject(PointF, Graphics, Single, out Object, out Link, out Int32) Search through the GraphObjList and CurveList for items that contain active Link objects. Declaration public bool FindLinkableObject(PointF mousePt, Graphics g, float scaleFactor, out object source, out Link link, out int index) Parameters Type Name Description PointF mousePt The mouse location where the click occurred Graphics g An appropriate Graphics instance Single scaleFactor The current scaling factor for drawing operations. Object source The clickable object that was found. Typically a type of GraphObj or a type of CurveItem . Link link The Link instance that is contained within the object. Int32 index An index value, indicating which point was clicked for CurveItem type objects. Returns Type Description Boolean returns true if a clickable link was found under the , or false otherwise. | Improve this Doc View Source FindNearestObject(PointF, Graphics, out Object, out Int32) Find the object that lies closest to the specified mouse (screen) point. Declaration public bool FindNearestObject(PointF mousePt, Graphics g, out object nearestObj, out int index) Parameters Type Name Description PointF mousePt The screen point, in pixel coordinates. Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. Object nearestObj A reference to the nearest object to the specified screen point. This can be any of Axis , Legend , Title , TextObj , ArrowObj , or CurveItem . Note: If the pane title is selected, then the GraphPane object will be returned. Int32 index The index number of the item within the selected object (where applicable). For example, for a CurveItem object, will be the index number of the nearest data point, accessible via Points . index will be -1 if no data points are available. Returns Type Description Boolean true if an object was found, false otherwise. Remarks This method will search through all of the graph objects, such as Axis , Legend , Title , GraphObj , and CurveItem . If the mouse point is within the bounding box of the items (or in the case of ArrowObj and CurveItem , within NearestTol pixels), then the object will be returned. You must check the type of the object to determine what object was selected (for example, \"if ( object is Legend ) ...\"). The parameter returns the index number of the item within the selected object (such as the point number within a CurveItem object. See Also FindNearestObject(PointF, Graphics, out Object, out Int32) | Improve this Doc View Source FindNearestPoint(PointF, CurveItem, out CurveItem, out Int32) Find the data point that lies closest to the specified mouse (screen) point for the specified curve. Declaration public bool FindNearestPoint(PointF mousePt, CurveItem targetCurve, out CurveItem nearestCurve, out int iNearest) Parameters Type Name Description PointF mousePt The screen point, in pixel coordinates. CurveItem targetCurve A CurveItem object containing the data points to be searched. CurveItem nearestCurve A reference to the CurveItem instance that contains the closest point. nearestCurve will be null if no data points are available. Int32 iNearest The index number of the closest point. The actual data vpoint will then be Points . iNearest will be -1 if no data points are available. Returns Type Description Boolean true if a point was found and that point lies within NearestTol pixels of the screen point, false otherwise. Remarks This method will search only through the points for the specified curve to determine which point is nearest the mouse point. It will only consider points that are within NearestTol pixels of the screen point. | Improve this Doc View Source FindNearestPoint(PointF, out CurveItem, out Int32) Find the data point that lies closest to the specified mouse (screen) point. Declaration public bool FindNearestPoint(PointF mousePt, out CurveItem nearestCurve, out int iNearest) Parameters Type Name Description PointF mousePt The screen point, in pixel coordinates. CurveItem nearestCurve A reference to the CurveItem instance that contains the closest point. nearestCurve will be null if no data points are available. Int32 iNearest The index number of the closest point. The actual data vpoint will then be Points . iNearest will be -1 if no data points are available. Returns Type Description Boolean true if a point was found and that point lies within NearestTol pixels of the screen point, false otherwise. Remarks This method will search through all curves in CurveList to find which point is nearest. It will only consider points that are within NearestTol pixels of the screen point. | Improve this Doc View Source FindNearestPoint(PointF, CurveList, out CurveItem, out Int32) Find the data point that lies closest to the specified mouse (screen) point. Declaration public bool FindNearestPoint(PointF mousePt, CurveList targetCurveList, out CurveItem nearestCurve, out int iNearest) Parameters Type Name Description PointF mousePt The screen point, in pixel coordinates. CurveList targetCurveList A CurveList object containing a subset of CurveItem 's to be searched. CurveItem nearestCurve A reference to the CurveItem instance that contains the closest point. nearestCurve will be null if no data points are available. Int32 iNearest The index number of the closest point. The actual data vpoint will then be Points . iNearest will be -1 if no data points are available. Returns Type Description Boolean true if a point was found and that point lies within NearestTol pixels of the screen point, false otherwise. Remarks This method will search through the specified list of curves to find which point is nearest. It will only consider points that are within NearestTol pixels of the screen point, and it will only consider CurveItem 's that are in targetCurveList . | Improve this Doc View Source GeneralTransform(Double, Double, CoordType) Transform a data point from the specified coordinate type ( CoordType ) to screen coordinates (pixels). Declaration public PointF GeneralTransform(double x, double y, CoordType coord) Parameters Type Name Description Double x The x coordinate that defines the location in user space Double y The y coordinate that defines the location in user space CoordType coord A CoordType type that defines the coordinate system in which the X,Y pair is defined. Returns Type Description PointF A point in screen coordinates that corresponds to the specified user point. Remarks This method implicitly assumes that Rect has already been calculated via AxisChange() or Draw(Graphics) methods, or the Rect is set manually (see IsRectAuto ). Note that this method is more accurate than the GeneralTransform(PointF, CoordType) overload, since it uses double types. This would typically only be significant for Date coordinates. | Improve this Doc View Source GeneralTransform(PointF, CoordType) Transform a data point from the specified coordinate type ( CoordType ) to screen coordinates (pixels). Declaration public PointF GeneralTransform(PointF ptF, CoordType coord) Parameters Type Name Description PointF ptF The X,Y pair that defines the point in user coordinates. CoordType coord A CoordType type that defines the coordinate system in which the X,Y pair is defined. Returns Type Description PointF A point in screen coordinates that corresponds to the specified user point. Remarks This method implicitly assumes that Rect has already been calculated via AxisChange() or Draw(Graphics) methods, or the Rect is set manually (see IsRectAuto ). | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides PaneBase.GetObjectData(SerializationInfo, StreamingContext) | Improve this Doc View Source ReverseTransform(PointF, Boolean, Boolean, Int32, out Double, out Double) Return the user scale values that correspond to the specified screen coordinate position (pixels). Declaration public void ReverseTransform(PointF ptF, bool isX2Axis, bool isY2Axis, int yAxisIndex, out double x, out double y) Parameters Type Name Description PointF ptF The X,Y pair that defines the screen coordinate point of interest Boolean isX2Axis true to return data that corresponds to an X2Axis , false for an XAxis . Boolean isY2Axis true to return data that corresponds to a Y2Axis , false for a YAxis . Int32 yAxisIndex The ordinal index of the Y or Y2 axis from which to return data (see YAxisList , Y2AxisList ) Double x The resultant value in user coordinates from the XAxis Double y The resultant value in user coordinates from the primary YAxis Remarks This method implicitly assumes that Rect has already been calculated via AxisChange() or Draw(Graphics) methods, or the Rect is set manually (see IsRectAuto ). | Improve this Doc View Source ReverseTransform(PointF, out Double, out Double) Return the user scale values that correspond to the specified screen coordinate position (pixels). This overload assumes the default XAxis and YAxis . Declaration public void ReverseTransform(PointF ptF, out double x, out double y) Parameters Type Name Description PointF ptF The X,Y pair that defines the screen coordinate point of interest Double x The resultant value in user coordinates from the XAxis Double y The resultant value in user coordinates from the primary YAxis Remarks This method implicitly assumes that Rect has already been calculated via AxisChange() or Draw(Graphics) methods, or the Rect is set manually (see IsRectAuto ). | Improve this Doc View Source ReverseTransform(PointF, out Double, out Double, out Double, out Double) Return the user scale values that correspond to the specified screen coordinate position (pixels). Declaration public void ReverseTransform(PointF ptF, out double x, out double x2, out double y, out double y2) Parameters Type Name Description PointF ptF The X,Y pair that defines the screen coordinate point of interest Double x The resultant value in user coordinates from the XAxis Double x2 The resultant value in user coordinates from the X2Axis Double y The resultant value in user coordinates from the primary YAxis Double y2 The resultant value in user coordinates from the primary Y2Axis Remarks This method implicitly assumes that Rect has already been calculated via AxisChange() or Draw(Graphics) methods, or the Rect is set manually (see IsRectAuto ). | Improve this Doc View Source ReverseTransform(PointF, out Double, out Double, out Double[], out Double[]) Return the user scale values that correspond to the specified screen coordinate position (pixels) for all y axes. Declaration public void ReverseTransform(PointF ptF, out double x, out double x2, out double[] y, out double[] y2) Parameters Type Name Description PointF ptF The X,Y pair that defines the screen coordinate point of interest Double x The resultant value in user coordinates from the XAxis Double x2 The resultant value in user coordinates from the X2Axis Double [] y An array of resultant values in user coordinates from the list of YAxis instances. This method allocates the array for you, according to the number of YAxis objects in the list. Double [] y2 An array of resultant values in user coordinates from the list of Y2Axis instances. This method allocates the array for you, according to the number of Y2Axis objects in the list. Remarks This method implicitly assumes that Rect has already been calculated via AxisChange() or Draw(Graphics) methods, or the Rect is set manually (see IsRectAuto ). | Improve this Doc View Source SetMinSpaceBuffer(Graphics, Single, Boolean) This method will set the MinSpace property for all three axes; XAxis , YAxis , and Y2Axis . Declaration public void SetMinSpaceBuffer(Graphics g, float bufferFraction, bool isGrowOnly) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. Single bufferFraction The amount of space to allocate for the axis, expressed as a fraction of the currently required space. For example, a value of 1.2 would allow for 20% extra above the currently required space. Boolean isGrowOnly If true, then this method will only modify the MinSpace property if the calculated result is more than the current value. Remarks The MinSpace is calculated using the currently required space multiplied by a fraction (). The currently required space is calculated using CalcSpace(Graphics, GraphPane, Single, out Single) , and is based on current data ranges, font sizes, etc. The \"space\" is actually the amount of space required to fit the tic marks, scale labels, and axis title. The calculation is done by calling the SetMinSpaceBuffer(Graphics, GraphPane, Single, Boolean) method for each Axis . Events | Improve this Doc View Source AxisChangeEvent Subscribe to this event to be notified when AxisChange() is called. Declaration public event GraphPane.AxisChangeEventHandler AxisChangeEvent Event Type Type Description GraphPane.AxisChangeEventHandler Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.HiLowBarItem.html": {
    "href": "api/ZedGraph.HiLowBarItem.html",
    "title": "Class HiLowBarItem",
    "keywords": "Class HiLowBarItem Encapsulates an \"High-Low\" Bar curve type that displays a bar in which both the bottom and the top of the bar are set by data valuesfrom the PointPair struct. Inheritance Object CurveItem BarItem HiLowBarItem Implements ICloneable ISerializable Inherited Members BarItem._bar BarItem.Bar BarItem.schema2 BarItem.Draw(Graphics, GraphPane, Int32, Single) BarItem.DrawLegendKey(Graphics, GraphPane, RectangleF, Single) BarItem.CreateBarLabels(GraphPane, Boolean, String) BarItem.CreateBarLabels(GraphPane, Boolean, String, String, Single, Color, Boolean, Boolean, Boolean) BarItem.GetCoords(GraphPane, Int32, String) CurveItem._isX2Axis CurveItem._isY2Axis CurveItem._yAxisIndex CurveItem._isVisible CurveItem._isSelected CurveItem._isSelectable CurveItem._isOverrideOrdinal CurveItem._points CurveItem.Tag CurveItem.schema CurveItem.Label CurveItem.Color CurveItem.IsVisible CurveItem.IsSelected CurveItem.IsSelectable CurveItem.IsOverrideOrdinal CurveItem.IsX2Axis CurveItem.IsY2Axis CurveItem.YAxisIndex CurveItem.IsBar CurveItem.IsPie CurveItem.IsLine CurveItem.NPts CurveItem.Points CurveItem.Item[Int32] CurveItem.Link CurveItem.AddPoint(Double, Double) CurveItem.AddPoint(PointPair) CurveItem.Clear() CurveItem.RemovePoint(Int32) CurveItem.GetXAxis(GraphPane) CurveItem.GetYAxis(GraphPane) CurveItem.GetYAxisIndex(GraphPane) CurveItem.MakeUnique() CurveItem.MakeUnique(ColorSymbolRotator) CurveItem.GetRange(Double, Double, Double, Double, Boolean, Boolean, GraphPane) CurveItem.BaseAxis(GraphPane) CurveItem.ValueAxis(GraphPane) CurveItem.GetBarWidth(GraphPane) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class HiLowBarItem : BarItem, ICloneable, ISerializable Remarks The HiLowBarItem type is intended for displaying bars that cover a band of data, such as a confidence interval, \"waterfall\" chart, etc. The position of each bar is set according to the PointPair values. The independent axis is assigned with Base , and is a BarBase enum type. If Base is set to Y or Y2 , then the bars will actually be horizontal, since the X axis becomes the value axis and the Y or Y2 axis becomes the independent axis. Constructors | Improve this Doc View Source HiLowBarItem(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected HiLowBarItem(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source HiLowBarItem(String, Double[], Double[], Double[], Color) Create a new HiLowBarItem using the specified properties. Declaration public HiLowBarItem(string label, double[] x, double[] y, double[] baseVal, Color color) Parameters Type Name Description String label The label that will appear in the legend. Double [] x An array of double precision values that define the independent (X axis) values for this curve Double [] y An array of double precision values that define the dependent (Y axis) values for this curve Double [] baseVal An array of double precision values that define the base value (the bottom) of the bars for this curve. Color color A Color value that will be applied to the Fill and Border properties. | Improve this Doc View Source HiLowBarItem(String, IPointList, Color) Create a new HiLowBarItem using the specified properties. Declaration public HiLowBarItem(string label, IPointList points, Color color) Parameters Type Name Description String label The label that will appear in the legend. IPointList points A IPointList of double precision value trio's that define the X, Y, and lower dependent values for this curve Color color A Color value that will be applied to the Fill and Border properties. | Improve this Doc View Source HiLowBarItem(HiLowBarItem) The Copy Constructor Declaration public HiLowBarItem(HiLowBarItem rhs) Parameters Type Name Description HiLowBarItem rhs The HiLowBarItem object from which to copy Fields | Improve this Doc View Source schema3 Current schema value that defines the version of the serialized file Declaration public const int schema3 = 11 Field Value Type Description Int32 Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public HiLowBarItem Clone() Returns Type Description HiLowBarItem A new, independent copy of this class | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides BarItem.GetObjectData(SerializationInfo, StreamingContext) Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.HSBColor.html": {
    "href": "api/ZedGraph.HSBColor.html",
    "title": "Struct HSBColor",
    "keywords": "Struct HSBColor Hue-Saturation-Brightness Color class to store a color value, and to manage conversions to and from RGB colors in the Color struct. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public struct HSBColor Remarks This class is based on code from http://www.cs.rit.edu/~ncs/color/ by Eugene Vishnevsky. This struct stores the hue, saturation, brightness, and alpha values internally as Byte values from 0 to 255. The hue represents a fraction of the 360 degrees of color space available. The saturation is the color intensity, where 0 represents gray scale and 255 is the most colored. For the brightness, 0 represents black and 255 represents white. Constructors | Improve this Doc View Source HSBColor(Color) Constructor to load an HSBColor struct from a system Color struct. Declaration public HSBColor(Color color) Parameters Type Name Description Color color An rgb Color struct containing the equivalent color you want to generate | Improve this Doc View Source HSBColor(Int32, Int32, Int32) Constructor to load an HSBColor struct from hue, saturation and brightness values Declaration public HSBColor(int h, int s, int b) Parameters Type Name Description Int32 h The color hue value, ranging from 0 to 255 Int32 s The color saturation (intensity) value, ranging from 0 (gray scale) to 255 (most colored) Int32 b The brightness value, ranging from 0 (black) to 255 (white) | Improve this Doc View Source HSBColor(Int32, Int32, Int32, Int32) Constructor to load an HSBColor struct from hue, saturation, brightness, and alpha values Declaration public HSBColor(int a, int h, int s, int b) Parameters Type Name Description Int32 a The alpha value (opacity), ranging from 0 (transparent) to 255 (opaque) Int32 h The color hue value, ranging from 0 to 255 Int32 s The color saturation (intensity) value, ranging from 0 (gray scale) to 255 (most colored) Int32 b The brightness value, ranging from 0 (black) to 255 (white) Fields | Improve this Doc View Source A The alpha value (opacity), ranging from 0 (transparent) to 255 (opaque). Declaration public byte A Field Value Type Description Byte | Improve this Doc View Source B The brightness value, ranging from 0 (black) to 255 (white). Declaration public byte B Field Value Type Description Byte | Improve this Doc View Source H The color hue value, ranging from 0 to 255. Declaration public byte H Field Value Type Description Byte Remarks This property is actually a rescaling of the 360 degrees on the color wheel to 255 possible values. Therefore, every 42.5 units is a new sector, with the following convention: red=0, yellow=42.5, green=85, cyan=127.5, blue=170, magenta=212.5 | Improve this Doc View Source S The color saturation (intensity) value, ranging from 0 (gray scale) to 255 (most colored). Declaration public byte S Field Value Type Description Byte Methods | Improve this Doc View Source FromRGB() Convert a Color value to an equivalent HSBColor value. Declaration public HSBColor FromRGB() Returns Type Description HSBColor An equivalent HSBColor struct Remarks This method is based on code from http://www.cs.rit.edu/~ncs/color/ by Eugene Vishnevsky. | Improve this Doc View Source FromRGB(Color) Convert a Color value to an equivalent HSBColor value. Declaration public static HSBColor FromRGB(Color rgbColor) Parameters Type Name Description Color rgbColor The Color struct to be converted Returns Type Description HSBColor An equivalent HSBColor struct Remarks This method is based on code from http://www.cs.rit.edu/~ncs/color/ by Eugene Vishnevsky. | Improve this Doc View Source ToRGB() Convert this HSBColor value to an equivalent Color value. Declaration public Color ToRGB() Returns Type Description Color An equivalent Color struct, compatible with the GDI+ library Remarks This method is based on code from http://www.cs.rit.edu/~ncs/color/ by Eugene Vishnevsky. | Improve this Doc View Source ToRGB(HSBColor) Convert an HSBColor value to an equivalent Color value. Declaration public static Color ToRGB(HSBColor hsbColor) Parameters Type Name Description HSBColor hsbColor The HSBColor struct to be converted Returns Type Description Color An equivalent Color struct, compatible with the GDI+ library Remarks This method is based on code from http://www.cs.rit.edu/~ncs/color/ by Eugene Vishnevsky. Operators | Improve this Doc View Source Implicit(HSBColor to Color) Implicit conversion operator to convert directly from an HSBColor to a Color struct. Declaration public static implicit operator Color(HSBColor hsbColor) Parameters Type Name Description HSBColor hsbColor The HSBColor struct to be converted Returns Type Description Color An equivalent Color struct that can be used in the GDI+ graphics library"
  },
  "api/ZedGraph.html": {
    "href": "api/ZedGraph.html",
    "title": "Namespace ZedGraph",
    "keywords": "Namespace ZedGraph Classes ArrowObj A class that represents a graphic arrow or line object on the graph. A list of ArrowObj objects is maintained by the GraphObjList collection class. Axis The Axis class is an abstract base class that encompasses all properties and methods required to define a graph Axis. AxisLabel Class that handles the data associated with text title and its associated font properties. Inherits from Label , and adds IsOmitMag and IsTitleAtCross properties, which are specifically associated with the Axis Title . Bar A class representing all the characteristics of the bar segments that make up a curve on the graph. BarItem Encapsulates a bar type that displays vertical or horizontal bars BarSettings Class that handles the global settings for bar charts BasicArrayPointList A data collection class for ZedGraph, provided as an alternative to PointPairList . Border A class that encapsulates Border (frame) properties for an object. The Border class is used in a variety of ZedGraph objects to handle the drawing of the Border around the object. BoxObj A class that represents a bordered and/or filled box (rectangle) object on the graph. A list of BoxObj objects is maintained by the GraphObjList collection class. Chart Class that handles the properties of the charting area (where the curves are actually drawn), which is bounded by the XAxis , YAxis , and Y2Axis . CollectionPlus A collection base class containing basic extra functionality to be inherited by CurveList , IPointList , GraphObjList . ColorSymbolRotator Class used to get the next color/symbol for GraphPane.AddCurve methods. CurveItem This class contains the data and methods for an individual curve within a graph pane. It carries the settings for the curve including the key and item names, colors, symbols and sizes, linetypes, etc. CurveItem.Comparer Compares CurveItem 's based on the point value at the specified index and for the specified axis. Sort() CurveList A collection class containing a list of CurveItem objects that define the set of curves to be displayed on the graph. DataSourcePointList EllipseObj A class that represents a bordered and/or filled ellipse object on the graph. A list of EllipseObj objects is maintained by the GraphObjList collection class. The ellipse is defined as the ellipse that would be contained by the rectangular box as defined by the Location property. ErrorBar This class handles the drawing of the curve ErrorBar objects. The Error Bars are the vertical lines with a symbol at each end. ErrorBarItem Encapsulates an \"Error Bar\" curve type that displays a vertical or horizontal line with a symbol at each end. Fill A class that encapsulates color-fill properties for an object. The Fill class is used in Rect , Rect , Legend , Bar , and Line objects. FilteredPointList An example of an IPointList implementation that stores large datasets, and selectively filters the output data depending on the displayed range. FontSpec The FontSpec class is a generic font class that maintains the font family, attributes, colors, border and fill modes, font size, and angle information. This class can render text with a variety of alignment options using the AlignH and AlignV parameters in the Draw(Graphics, PaneBase, String, Single, Single, AlignH, AlignV, Single) method. GapLabel Class that handles the data associated with a text title and its associated font properties. Inherits from Label , and adds the Gap property for use by the Axis and PaneBase objects. GasGaugeNeedle A class representing a needle on the GasGuage chart GasGaugeNeedle s. GasGaugeRegion A class representing a region on the GasGuage chart GasGaugeRegion s. GraphObj An abstract base class that represents a text object on the graph. A list of GraphObj objects is maintained by the GraphObjList collection class. GraphObjList A collection class containing a list of TextObj objects to be displayed on the graph. GraphPane Class GraphPane encapsulates the graph pane, which is all display elements associated with an individual graph. HiLowBarItem Encapsulates an \"High-Low\" Bar curve type that displays a bar in which both the bottom and the top of the bar are set by data valuesfrom the PointPair struct. ImageObj A class that represents an image object on the graph. A list of GraphObj objects is maintained by the GraphObjList collection class. JapaneseCandleStick This class handles the drawing of the curve JapaneseCandleStick objects. JapaneseCandleStickItem Encapsulates a Japanese CandleStick curve type that displays a vertical (or horizontal) line displaying the range of data values at each sample point, plus a filled bar signifying the opening and closing value for the sample. Label Class that handles the data associated with text title and its associated font properties Legend This class encapsulates the chart Legend that is displayed in the GraphPane Line A class representing all the characteristics of the Line segments that make up a curve on the graph. LineBase A class that handles the basic attributes of a line segment. LineItem Encapsulates a curve type that is displayed as a line and/or a set of symbols at each point. LineObj A class that represents a line segment object on the graph. A list of GraphObj objects is maintained by the GraphObjList collection class. Link A class that maintains hyperlink information for a clickable object on the graph. Location A class than contains information about the position of an object on the graph. MajorGrid Class that handles the data associated with the major grid lines on the chart. Inherits from MinorGrid . MajorTic Class that holds the specific properties for the major tics. Inherits from MinorTic . Margin Class that handles that stores the margin properties for the GraphPane Margin.Default A simple struct that defines the default property values for the Margin class. MasterPane A collection class containing a list of GraphPane objects organized together in some form. MinorGrid Class that holds the specific properties for the minor grid. MinorTic Class that holds the specific properties for the minor tics. NoDupePointList A collection class to maintain a set of samples. OHLCBar This class handles the drawing of the curve OHLCBar objects. OHLCBarItem Encapsulates a CandleStick curve type that displays a vertical (or horizontal) line displaying the range of data values at each sample point, plus an starting mark and an ending mark signifying the opening and closing value for the sample. PaneBase An abstract base class that defines basic functionality for handling a pane. This class is the parent class for MasterPane and GraphPane . PaneList A collection class containing a list of GraphPane objects. PerformanceData Sample data structure containing a variety of data values, in this case the values are related in that they correspond to the same time value. PieItem A class representing a pie chart object comprised of one or more PieItem s. PointPair A simple point represented by an (X,Y,Z) group of double values. PointPair.PointPairComparer Compares points based on their x values. Is setup to be used in an ascending order sort. Sort() PointPair.PointPairComparerY Compares points based on their y values. Is setup to be used in an ascending order sort. Sort() PointPair4 The basic PointPair class holds three data values (X, Y, Z). This class extends the basic PointPair to contain four data values (X, Y, Z, T). PointPairBase This is a base class that provides base-level functionality for a data point consisting of an (X,Y) pair of double values. PointPairCV A simple instance that stores a data point (X, Y, Z). This differs from a regular PointPair in that it maps the ColorValue property to an independent value. That is, ColorValue and Z are not related (as they are in the PointPair ). PointPairList A collection class containing a list of PointPair objects that define the set of points to be displayed on the curve. PolyObj A class that represents a bordered and/or filled polygon object on the graph. A list of PolyObj objects is maintained by the GraphObjList collection class. RadarPointList A class containing a set of data values to be plotted as a RadarPlot. This class will effectively convert the data into PointPair objects by converting the polar coordinates to rectangular coordinates ReversibleFrame The reversible frame draws a dashed rectangle RollingPointPairList A class that provides a rolling list of PointPair objects. This is essentially a first-in-first-out (FIFO) queue with a fixed capacity which allows 'rolling' (or oscilloscope like) graphs to be be animated without having the overhead of an ever-growing ArrayList. The queue is constructed with a fixed capacity and new points can be enqueued. When the capacity is reached the oldest (first in) PointPair is overwritten. However, when accessing via IPointList , the PointPair objects are seen in the order in which they were enqeued. RollingPointPairList supports data editing through the IPointListEdit interface. Colin Green with mods by John Champion $Date: 2007-11-05 04:33:26 $ Sample A simple storage class to maintain an individual sampling of data SampleMultiPointList A sample class that holds an internal collection, and implements the IPointList interface so that it can be used by ZedGraph as curve data. SamplePointList A collection class to maintain a set of samples Scale The Scale class is an abstract base class that encompasses the properties and methods associated with a scale of data. ScaleState A class that captures an Axis scale range. ScaleStateList A collection class that maintains a list of ScaleState objects, corresponding to the list of Axis objects from YAxisList or Y2AxisList . ScrollRangeList A collection class containing a list of ScrollRange objects. Selection StickItem Encapsulates a curve type that is displayed as a series of vertical \"sticks\", one at each defined point. StockPointList A collection class containing a list of StockPt objects that define the set of points to be displayed on the curve. StockPt The basic PointPair class holds three data values (X, Y, Z). This class extends the basic PointPair to contain five data values (X, Y, Z, Open, Close). Symbol This class handles the drawing of the curve Symbol objects. The symbols are the small shapes that appear over each defined point along the curve. TextObj A class that represents a text object on the graph. A list of GraphObj objects is maintained by the GraphObjList collection class. ValueHandler A class designed to simplify the process of getting the actual value for the various stacked and regular curve types ValuesToolTip X2Axis X2Axis inherits from Axis , and defines the special characteristics of a horizontal axis, specifically located at the top of the Rect of the GraphPane object XAxis XAxis inherits from Axis , and defines the special characteristics of a horizontal axis, specifically located at the bottom of the Rect of the GraphPane object Y2Axis Y2Axis inherits from Axis , and defines the special characteristics of a vertical axis, specifically located on the right side of the Rect of the GraphPane object Y2AxisList A collection class containing a list of YAxis objects. YAxis YAxis inherits from Axis , and defines the special characteristics of a vertical axis, specifically located on the right side of the Rect of the GraphPane object YAxisList A collection class containing a list of YAxis objects. ZedGraphControl The ZedGraphControl class provides a UserControl interface to the ZedGraph class library. This allows ZedGraph to be installed as a control in the Visual Studio toolbox. You can use the control by simply dragging it onto a form in the Visual Studio form editor. All graph attributes are accessible via the GraphPane property. ZedGraphException An exception thrown by ZedGraph. A child class of ApplicationException . ZoomState A class that captures all the scale range settings for a GraphPane . ZoomStateStack A LIFO stack of prior ZoomState objects, used to allow zooming out to prior states (of scale range settings). Structs ArrowObj.Default A simple struct that defines the default property values for the ArrowObj class. Axis.Default A simple struct that defines the default property values for the Axis class. Bar.Default A simple struct that defines the default property values for the Bar class. BarSettings.Default A simple struct that defines the default property values for the BarSettings class. Border.Default A simple struct that defines the default property values for the Fill class. BoxObj.Default A simple struct that defines the default property values for the ArrowObj class. Chart.Default A simple struct that defines the default property values for the Chart class. DataPoint A simple storage struct to maintain an individual sampling of data. This only contains two data values in order to reduce to memory load for large datasets. (e.g., no Tag or Z property) ErrorBar.Default A simple struct that defines the default property values for the ErrorBar class. Fill.Default A simple struct that defines the default property values for the Fill class. FontSpec.Default A simple struct that defines the default property values for the FontSpec class. GapLabel.Default A simple struct that defines the default property values for the GapLabel class. GasGaugeNeedle.Default Specify the default property values for the GasGaugeNeedle class. GasGaugeRegion.Default Specify the default property values for the GasGaugeRegion class. GraphObj.Default A simple struct that defines the default property values for the GraphObj class. GraphPane.Default A simple struct that defines the default property values for the GraphPane class. HSBColor Hue-Saturation-Brightness Color class to store a color value, and to manage conversions to and from RGB colors in the Color struct. ImageObj.Default A simple struct that defines the default property values for the ImageObj class. JapaneseCandleStick.Default A simple struct that defines the default property values for the JapaneseCandleStick class. Legend.Default A simple struct that defines the default property values for the Legend class. Line.Default A simple struct that defines the default property values for the Line class. LineBase.Default A simple struct that defines the default property values for the LineBase class. MajorGrid.Default A simple struct that defines the default property values for the MajorGrid class. MajorTic.Default A simple struct that defines the default property values for the MinorTic class. MasterPane.Default A simple struct that defines the default property values for the MasterPane class. MinorGrid.Default A simple struct that defines the default property values for the MinorGrid class. MinorTic.Default A simple struct that defines the default property values for the MinorTic class. OHLCBar.Default A simple struct that defines the default property values for the OHLCBar class. PaneBase.Default A simple struct that defines the default property values for the PaneBase class. PieItem.Default Specify the default property values for the PieItem class. PointD Simple struct that stores X and Y coordinates as doubles. Scale.Default A simple struct that defines the default property values for the Scale class. ScrollRange A simple struct to store minimum and maximum Double type values for the scroll range Symbol.Default A simple struct that defines the default property values for the Symbol class. TextObj.Default A simple struct that defines the default property values for the TextObj class. X2Axis.Default A simple struct that defines the default property values for the X2Axis class. XAxis.Default A simple struct that defines the default property values for the XAxis class. XDate This struct encapsulates a date and time value, and handles associated calculations and conversions between various formats. Y2Axis.Default A simple subclass of the Y2Axis.Default class that defines the default property values for the Y2Axis class. YAxis.Default A simple struct that defines the default property values for the YAxis class. Interfaces IPointList An interface to a collection class containing data that define the set of points to be displayed on the curve. IPointListEdit An interface to a collection class containing data that define the set of points to be displayed on the curve. IValuesToolTip Enums AlignH Enumeration type for the different horizontal text alignment options AlignP Enumeration type for the different proximal alignment options AlignV Enumeration type for the different vertical text alignment options AxisType Enumeration type for the various axis types that are available BarBase Enumeration type that defines the base axis from which Bar graphs are displayed. The bars can be drawn on any of the four axes ( XAxis , X2Axis , YAxis , and Y2Axis ). BarType Enumeration type that defines the available types of BarItem graphs. CoordType Enumeration type for the user-defined coordinate types available. These coordinate types are used the ArrowObj objects and TextObj objects only. DateUnit Enumeration type for the various axis date and time unit types that are available FillType Enumeration type for the various types of fills that can be used with Bar charts. LegendPos Enumeration type that defines the possible legend locations LineType Enumeration type that defines the available types of LineItem graphs. PaneLayout Define the auto layout options for the SetLayout(Graphics, PaneLayout) method. PerfDataType An enum used to specify the X or Y data type of interest -- see XData and YData . PieLabelType Enumeration that determines the type of label that is displayed for each pie slice (see LabelType ). RenderModeType Enum for specifying the type of data to be returned by the ZedGraphWeb Render() method. SampleType enumeration used to indicate which type of data will be plotted. SortType Enumeration type that defines which set of data points - X or Y - is used Sort() to perform the sort. StepType Enumeration type that defines how a curve is drawn. Curves can be drawn as ordinary lines by connecting the points directly, or in a stair-step fashion as a series of discrete, constant values. In a stair step plot, all lines segments are either horizontal or vertical. In a non-step (line) plot, the lines can be any angle. SymbolType Enumeration type for the various symbol shapes that are available ZedGraphControl.ContextMenuObjectState Public enumeration that specifies the type of object present at the Context Menu's mouse location ZoomState.StateType An enumeration that describes whether a given state is the result of a Pan or Zoom operation. ZOrder Enumeration that specifies a Z-Order position for GraphObj objects. Delegates Axis.ScaleFormatHandler A delegate that allows full custom formatting of the Axis labels Axis.ScaleTitleEventHandler Allow customization of title based on user preferences. GraphPane.AxisChangeEventHandler A delegate to provide notification through the AxisChangeEvent when AxisChange() is called. ZedGraphControl.ContextMenuBuilderEventHandler A delegate that allows subscribing methods to append or modify the context menu. ZedGraphControl.CursorValueHandler A delegate that allows custom formatting of the cursor value tooltips ZedGraphControl.LinkEventHandler A delegate that allows notification of clicks on ZedGraph objects that have active links enabled ZedGraphControl.PointEditHandler A delegate that receives notification after a point-edit operation is completed. ZedGraphControl.PointValueHandler A delegate that allows custom formatting of the point value tooltips ZedGraphControl.ScrollDoneHandler A delegate that allows notification of scroll events. ZedGraphControl.ScrollProgressHandler A delegate that allows notification of scroll events. ZedGraphControl.ZedMouseEventHandler A delegate that allows notification of mouse events on Graph objects. ZedGraphControl.ZoomEventHandler A delegate that allows notification of zoom and pan events."
  },
  "api/ZedGraph.ImageObj.Default.html": {
    "href": "api/ZedGraph.ImageObj.Default.html",
    "title": "Struct ImageObj.Default",
    "keywords": "Struct ImageObj.Default A simple struct that defines the default property values for the ImageObj class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source IsScaled Default value for the ImageObj IsScaled property. Declaration public static bool IsScaled Field Value Type Description Boolean"
  },
  "api/ZedGraph.ImageObj.html": {
    "href": "api/ZedGraph.ImageObj.html",
    "title": "Class ImageObj",
    "keywords": "Class ImageObj A class that represents an image object on the graph. A list of GraphObj objects is maintained by the GraphObjList collection class. Inheritance Object GraphObj ImageObj Implements ICloneable ISerializable Inherited Members GraphObj._location GraphObj._isVisible GraphObj._isClippedToChartRect GraphObj.Tag GraphObj.Location GraphObj.ZOrder GraphObj.IsVisible GraphObj.IsClippedToChartRect GraphObj.Link GraphObj.IsInFrontOfData GraphObj.schema Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class ImageObj : GraphObj, ICloneable, ISerializable Constructors | Improve this Doc View Source ImageObj() A default constructor that places a null Image at a default RectangleF of (0,0,1,1) Declaration public ImageObj() | Improve this Doc View Source ImageObj(Image, Double, Double, Double, Double) A constructor that allows the Image and individual Single coordinate locations for the ImageObj to be pre-specified. Declaration public ImageObj(Image image, double left, double top, double width, double height) Parameters Type Name Description Image image A Image class that defines the image Double left The position of the left side of the rectangle that defines the ImageObj location. The units of this position are specified by the CoordinateFrame property. Double top The position of the top side of the rectangle that defines the ImageObj location. The units of this position are specified by the CoordinateFrame property. Double width The width of the rectangle that defines the ImageObj location. The units of this position are specified by the CoordinateFrame property. Double height The height of the rectangle that defines the ImageObj location. The units of this position are specified by the CoordinateFrame property. | Improve this Doc View Source ImageObj(Image, RectangleF) A constructor that allows the Image and RectangleF location for the ImageObj to be pre-specified. Declaration public ImageObj(Image image, RectangleF rect) Parameters Type Name Description Image image A Image class that defines the image RectangleF rect A RectangleF struct that defines the image location, specifed in units based on the CoordinateFrame property. | Improve this Doc View Source ImageObj(Image, RectangleF, CoordType, AlignH, AlignV) A constructor that allows the Image and RectangleF location for the ImageObj to be pre-specified. Declaration public ImageObj(Image image, RectangleF rect, CoordType coordType, AlignH alignH, AlignV alignV) Parameters Type Name Description Image image A Image class that defines the image RectangleF rect A RectangleF struct that defines the image location, specifed in units based on the CoordinateFrame property. CoordType coordType The CoordType enum value that indicates what type of coordinate system the x and y parameters are referenced to. AlignH alignH The AlignH enum that specifies the horizontal alignment of the object with respect to the (x,y) location AlignV alignV The AlignV enum that specifies the vertical alignment of the object with respect to the (x,y) location | Improve this Doc View Source ImageObj(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected ImageObj(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source ImageObj(ImageObj) The Copy Constructor Declaration public ImageObj(ImageObj rhs) Parameters Type Name Description ImageObj rhs The ImageObj object from which to copy Fields | Improve this Doc View Source schema2 Current schema value that defines the version of the serialized file Declaration public const int schema2 = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source Image The Image object. Declaration public Image Image { get; set; } Property Value Type Description Image A Image class reference. | Improve this Doc View Source IsScaled Gets or sets a property that determines if the image will be scaled to the output rectangle (see Location ). Declaration public bool IsScaled { get; set; } Property Value Type Description Boolean true to scale the image, false to draw the image unscaled, but clipped to the destination rectangle Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public ImageObj Clone() Returns Type Description ImageObj A new, independent copy of this class | Improve this Doc View Source Draw(Graphics, PaneBase, Single) Render this object to the specified Graphics device This method is normally only called by the Draw method of the parent GraphObjList collection object. Declaration public override void Draw(Graphics g, PaneBase pane, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. PaneBase pane A reference to the PaneBase object that is the parent or owner of this object. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Overrides GraphObj.Draw(Graphics, PaneBase, Single) | Improve this Doc View Source GetCoords(PaneBase, Graphics, Single, out String, out String) Determines the shape type and Coords values for this GraphObj Declaration public override void GetCoords(PaneBase pane, Graphics g, float scaleFactor, out string shape, out string coords) Parameters Type Name Description PaneBase pane Graphics g Single scaleFactor String shape String coords Overrides GraphObj.GetCoords(PaneBase, Graphics, Single, out String, out String) | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides GraphObj.GetObjectData(SerializationInfo, StreamingContext) | Improve this Doc View Source PointInBox(PointF, PaneBase, Graphics, Single) Determine if the specified screen point lies inside the bounding box of this ArrowObj . The bounding box is calculated assuming a distance of NearestTol pixels around the arrow segment. Declaration public override bool PointInBox(PointF pt, PaneBase pane, Graphics g, float scaleFactor) Parameters Type Name Description PointF pt The screen point, in pixels PaneBase pane A reference to the PaneBase object that is the parent or owner of this object. Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Returns Type Description Boolean true if the point lies in the bounding box, false otherwise Overrides GraphObj.PointInBox(PointF, PaneBase, Graphics, Single) Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.IPointList.html": {
    "href": "api/ZedGraph.IPointList.html",
    "title": "Interface IPointList",
    "keywords": "Interface IPointList An interface to a collection class containing data that define the set of points to be displayed on the curve. Inherited Members ICloneable.Clone() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public interface IPointList : ICloneable Remarks This interface is designed to allow customized data abstraction. The default data collection class is PointPairList , however, you can define your own data collection class using the IPointList interface. Properties | Improve this Doc View Source Count Gets the number of points available in the list. Declaration int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source Item[Int32] Indexer to access a data point by its ordinal position in the collection. Declaration PointPair this[int index] { get; } Parameters Type Name Description Int32 index The ordinal position (zero-based) of the data point to be accessed. Property Value Type Description PointPair A PointPair object instance. Remarks This is the standard interface that ZedGraph uses to access the data. Although you must pass a PointPair here, your internal data storage format can be anything. See Also PointPairList BasicArrayPointList"
  },
  "api/ZedGraph.IPointListEdit.html": {
    "href": "api/ZedGraph.IPointListEdit.html",
    "title": "Interface IPointListEdit",
    "keywords": "Interface IPointListEdit An interface to a collection class containing data that define the set of points to be displayed on the curve. Inherited Members IPointList.Count ICloneable.Clone() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public interface IPointListEdit : IPointList, ICloneable Remarks This interface is designed to allow customized data abstraction. The default data collection class is PointPairList , however, you can define your own data collection class using the IPointList interface. This IPointListEdit interface adds the ability to remove and add points to the list, and so is used by the CurveItem class for the AddPoint(Double, Double) , RemovePoint(Int32) , and Clear() methods. Properties | Improve this Doc View Source Item[Int32] Indexer to access a data point by its ordinal position in the collection. Declaration PointPair this[int index] { get; set; } Parameters Type Name Description Int32 index The ordinal position (zero-based) of the data point to be accessed. Property Value Type Description PointPair A PointPair object instance. Remarks This is the standard interface that ZedGraph uses to access the data. Although you must pass a PointPair here, your internal data storage format can be anything. Methods | Improve this Doc View Source Add(Double, Double) Appends a point to the end of the list. The data are passed in as two Double types. Declaration void Add(double x, double y) Parameters Type Name Description Double x The Double value containing the X data to be added. Double y The Double value containing the Y data to be added. | Improve this Doc View Source Add(PointPair) Appends a point to the end of the list. The data are passed in as a PointPair object. Declaration void Add(PointPair point) Parameters Type Name Description PointPair point The PointPair object containing the data to be added. | Improve this Doc View Source Clear() Clears all data points from the list. After calling this method, Count will be zero. Declaration void Clear() | Improve this Doc View Source RemoveAt(Int32) Removes a single data point from the list at the specified ordinal location (zero based). Declaration void RemoveAt(int index) Parameters Type Name Description Int32 index See Also PointPairList BasicArrayPointList IPointList FilteredPointList"
  },
  "api/ZedGraph.IValuesToolTip.html": {
    "href": "api/ZedGraph.IValuesToolTip.html",
    "title": "Interface IValuesToolTip",
    "keywords": "Interface IValuesToolTip Namespace : ZedGraph Assembly : ZedGraph.WinForms.dll Syntax public interface IValuesToolTip Methods | Improve this Doc View Source Disable() Disables the tool tip. Declaration void Disable() | Improve this Doc View Source Enable() Enables the tool tip. Declaration void Enable() | Improve this Doc View Source Set(String, Point) Sets the caption for the tool tip at the specified point. Declaration void Set(string caption, Point point) Parameters Type Name Description String caption The caption. Point point The point."
  },
  "api/ZedGraph.JapaneseCandleStick.Default.html": {
    "href": "api/ZedGraph.JapaneseCandleStick.Default.html",
    "title": "Struct JapaneseCandleStick.Default",
    "keywords": "Struct JapaneseCandleStick.Default A simple struct that defines the default property values for the JapaneseCandleStick class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source FallingBorder The default color for the border of the falling CandleSticks ( FallingBorder property). Declaration public static Color FallingBorder Field Value Type Description Color | Improve this Doc View Source FallingColor The default fillcolor for drawing the falling case CandleSticks ( FallingFill property). Declaration public static Color FallingColor Field Value Type Description Color | Improve this Doc View Source RisingBorder The default color for the border of the rising CandleSticks ( RisingBorder property). Declaration public static Color RisingBorder Field Value Type Description Color | Improve this Doc View Source RisingColor The default fillcolor for drawing the rising case CandleSticks ( RisingFill property). Declaration public static Color RisingColor Field Value Type Description Color"
  },
  "api/ZedGraph.JapaneseCandleStick.html": {
    "href": "api/ZedGraph.JapaneseCandleStick.html",
    "title": "Class JapaneseCandleStick",
    "keywords": "Class JapaneseCandleStick This class handles the drawing of the curve JapaneseCandleStick objects. Inheritance Object LineBase OHLCBar JapaneseCandleStick Implements ICloneable ISerializable Inherited Members OHLCBar._isOpenCloseVisible OHLCBar._size OHLCBar._isAutoSize OHLCBar.IsOpenCloseVisible OHLCBar.Size OHLCBar.IsAutoSize OHLCBar.schema OHLCBar.Draw(Graphics, GraphPane, Boolean, Single, Single, Single, Single, Single, Single, Pen) OHLCBar.Draw(Graphics, GraphPane, OHLCBarItem, Axis, Axis, Single) OHLCBar.GetBarWidth(GraphPane, Axis, Single) LineBase.Color LineBase.Style LineBase.DashOn LineBase.DashOff LineBase.Width LineBase.IsVisible LineBase.IsAntiAlias LineBase.GradientFill LineBase.schema0 LineBase.GetPen(PaneBase, Single) LineBase.GetPen(PaneBase, Single, PointPair) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class JapaneseCandleStick : OHLCBar, ICloneable, ISerializable Constructors | Improve this Doc View Source JapaneseCandleStick() Default constructor that sets all JapaneseCandleStick properties to default values as defined in the JapaneseCandleStick.Default class. Declaration public JapaneseCandleStick() | Improve this Doc View Source JapaneseCandleStick(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected JapaneseCandleStick(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source JapaneseCandleStick(JapaneseCandleStick) The Copy Constructor Declaration public JapaneseCandleStick(JapaneseCandleStick rhs) Parameters Type Name Description JapaneseCandleStick rhs The JapaneseCandleStick object from which to copy Fields | Improve this Doc View Source _fallingColor Private field that stores the CandleStick color when the Close value is less than the Open value. Use the public property FallingColor to access this value. Declaration [CLSCompliant(false)] protected Color _fallingColor Field Value Type Description Color | Improve this Doc View Source schema2 Current schema value that defines the version of the serialized file Declaration public const int schema2 = 11 Field Value Type Description Int32 Properties | Improve this Doc View Source FallingBorder The Border instance to be used for drawing the border frame of the candlestick \"bars\" when the Close value is less than the Open value. Declaration public Border FallingBorder { get; set; } Property Value Type Description Border | Improve this Doc View Source FallingColor Gets or sets the Color data for this JapaneseCandleStick when the value of the candlestick is falling. Declaration public Color FallingColor { get; set; } Property Value Type Description Color Remarks This property only controls the color of the vertical line when the value is falling. The rising color is controlled by the Color property. | Improve this Doc View Source FallingFill Gets or sets the Fill class that is used to fill the candlestick \"bars\" when the Close value is less than the Open value. Declaration public Fill FallingFill { get; set; } Property Value Type Description Fill | Improve this Doc View Source RisingBorder The Border instance to be used for drawing the border frame of the candlestick \"bars\" when the Close value is greater than the Open value. Declaration public Border RisingBorder { get; set; } Property Value Type Description Border | Improve this Doc View Source RisingFill Gets or sets the Fill class that is used to fill the candlestick \"bars\" when the Close value is greater than the Open value. Declaration public Fill RisingFill { get; set; } Property Value Type Description Fill Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public JapaneseCandleStick Clone() Returns Type Description JapaneseCandleStick A new, independent copy of this class | Improve this Doc View Source Draw(Graphics, GraphPane, Boolean, Single, Single, Single, Single, Single, Single, Single, Pen, Fill, Border, PointPair) Draw the JapaneseCandleStick to the specified Graphics device at the specified location. Declaration public void Draw(Graphics g, GraphPane pane, bool isXBase, float pixBase, float pixHigh, float pixLow, float pixOpen, float pixClose, float halfSize, float scaleFactor, Pen pen, Fill fill, Border border, PointPair pt) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Boolean isXBase boolean value that indicates if the \"base\" axis for this JapaneseCandleStick is the X axis. True for an XAxis base, false for a YAxis or Y2Axis base. Single pixBase The independent axis position of the center of the candlestick in pixel units Single pixHigh The high value position of the candlestick in pixel units Single pixLow The low value position of the candlestick in pixel units Single pixOpen The opening value position of the candlestick in pixel units Single pixClose The closing value position of the candlestick in pixel units Single halfSize The scaled width of one-half of a bar, in pixels Single scaleFactor The scaling factor for the features of the graph based on the BaseDimension . This scaling factor is calculated by the CalcScaleFactor() method. The scale factor represents a linear multiple to be applied to font sizes, symbol sizes, etc. Pen pen A pen with the Color attribute for this JapaneseCandleStick Fill fill The Fill instance to be used for filling this JapaneseCandleStick Border border The Border instance to be used for drawing the border around the JapaneseCandleStick filled box PointPair pt The PointPair to be used for determining the Fill , just in case it's a GradientByX , GradientByY , or GradientByZ FillType | Improve this Doc View Source Draw(Graphics, GraphPane, JapaneseCandleStickItem, Axis, Axis, Single) Draw all the JapaneseCandleStick 's to the specified Graphics device as a candlestick at each defined point. Declaration public void Draw(Graphics g, GraphPane pane, JapaneseCandleStickItem curve, Axis baseAxis, Axis valueAxis, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. JapaneseCandleStickItem curve A JapaneseCandleStickItem object representing the JapaneseCandleStick 's to be drawn. Axis baseAxis The Axis class instance that defines the base (independent) axis for the JapaneseCandleStick Axis valueAxis The Axis class instance that defines the value (dependent) axis for the JapaneseCandleStick Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides OHLCBar.GetObjectData(SerializationInfo, StreamingContext) Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.JapaneseCandleStickItem.html": {
    "href": "api/ZedGraph.JapaneseCandleStickItem.html",
    "title": "Class JapaneseCandleStickItem",
    "keywords": "Class JapaneseCandleStickItem Encapsulates a Japanese CandleStick curve type that displays a vertical (or horizontal) line displaying the range of data values at each sample point, plus a filled bar signifying the opening and closing value for the sample. Inheritance Object CurveItem JapaneseCandleStickItem Implements ICloneable ISerializable Inherited Members CurveItem._isX2Axis CurveItem._isY2Axis CurveItem._yAxisIndex CurveItem._isVisible CurveItem._isSelected CurveItem._isSelectable CurveItem._isOverrideOrdinal CurveItem._points CurveItem.Tag CurveItem.schema CurveItem.Label CurveItem.Color CurveItem.IsVisible CurveItem.IsSelected CurveItem.IsSelectable CurveItem.IsOverrideOrdinal CurveItem.IsX2Axis CurveItem.IsY2Axis CurveItem.YAxisIndex CurveItem.IsBar CurveItem.IsPie CurveItem.IsLine CurveItem.NPts CurveItem.Points CurveItem.Item[Int32] CurveItem.Link CurveItem.AddPoint(Double, Double) CurveItem.AddPoint(PointPair) CurveItem.Clear() CurveItem.RemovePoint(Int32) CurveItem.GetXAxis(GraphPane) CurveItem.GetYAxis(GraphPane) CurveItem.GetYAxisIndex(GraphPane) CurveItem.MakeUnique() CurveItem.MakeUnique(ColorSymbolRotator) CurveItem.GetRange(Double, Double, Double, Double, Boolean, Boolean, GraphPane) CurveItem.BaseAxis(GraphPane) CurveItem.ValueAxis(GraphPane) CurveItem.GetBarWidth(GraphPane) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class JapaneseCandleStickItem : CurveItem, ICloneable, ISerializable Remarks For this type to work properly, your IPointList must contain StockPt objects, rather than ordinary PointPair types. This is because the OHLCBarItem type actually displays 5 data values but the PointPair only stores 3 data values. The StockPt stores Date , Close , Open , High , and Low members. For a JapaneseCandleStick chart, the range between opening and closing values is drawn as a filled bar, with the filled color different ( RisingFill ) for the case of Close higher than Open , and FallingFill for the reverse. The width of the bar is controlled by the Size property, which is specified in points (1/72nd inch), and scaled according to CalcScaleFactor() . The candlesticks are drawn horizontally or vertically depending on the value of Base , which is a BarBase enum type. Constructors | Improve this Doc View Source JapaneseCandleStickItem(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected JapaneseCandleStickItem(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source JapaneseCandleStickItem(String) Create a new OHLCBarItem , specifying only the legend label. Declaration public JapaneseCandleStickItem(string label) Parameters Type Name Description String label The label that will appear in the legend. | Improve this Doc View Source JapaneseCandleStickItem(String, IPointList) Create a new JapaneseCandleStickItem using the specified properties. Declaration public JapaneseCandleStickItem(string label, IPointList points) Parameters Type Name Description String label The label that will appear in the legend. IPointList points An IPointList of double precision values that define the Date, Close, Open, High, and Low values for the curve. Note that this IPointList should contain StockPt items rather than PointPair items. | Improve this Doc View Source JapaneseCandleStickItem(JapaneseCandleStickItem) The Copy Constructor Declaration public JapaneseCandleStickItem(JapaneseCandleStickItem rhs) Parameters Type Name Description JapaneseCandleStickItem rhs The JapaneseCandleStickItem object from which to copy Fields | Improve this Doc View Source schema2 Current schema value that defines the version of the serialized file Declaration public const int schema2 = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source Stick Gets a reference to the JapaneseCandleStick class defined for this JapaneseCandleStickItem . Declaration public JapaneseCandleStick Stick { get; } Property Value Type Description JapaneseCandleStick Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public JapaneseCandleStickItem Clone() Returns Type Description JapaneseCandleStickItem A new, independent copy of this class | Improve this Doc View Source Draw(Graphics, GraphPane, Int32, Single) Do all rendering associated with this OHLCBarItem to the specified Graphics device. This method is normally only called by the Draw method of the parent CurveList collection object. Declaration public override void Draw(Graphics g, GraphPane pane, int pos, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Int32 pos The ordinal position of the current OHLCBarItem curve. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Overrides CurveItem.Draw(Graphics, GraphPane, Int32, Single) | Improve this Doc View Source DrawLegendKey(Graphics, GraphPane, RectangleF, Single) Draw a legend key entry for this OHLCBarItem at the specified location Declaration public override void DrawLegendKey(Graphics g, GraphPane pane, RectangleF rect, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. RectangleF rect The RectangleF struct that specifies the location for the legend key Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Overrides CurveItem.DrawLegendKey(Graphics, GraphPane, RectangleF, Single) | Improve this Doc View Source GetCoords(GraphPane, Int32, out String) Determine the coords for the rectangle associated with a specified point for this CurveItem Declaration public override bool GetCoords(GraphPane pane, int i, out string coords) Parameters Type Name Description GraphPane pane The GraphPane to which this curve belongs Int32 i The index of the point of interest String coords A list of coordinates that represents the \"rect\" for this point (used in an html AREA tag) Returns Type Description Boolean true if it's a valid point, false otherwise Overrides CurveItem.GetCoords(GraphPane, Int32, out String) | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides CurveItem.GetObjectData(SerializationInfo, StreamingContext) Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.Label.html": {
    "href": "api/ZedGraph.Label.html",
    "title": "Class Label",
    "keywords": "Class Label Class that handles the data associated with text title and its associated font properties Inheritance Object Label GapLabel Implements ICloneable ISerializable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class Label : ICloneable, ISerializable Constructors | Improve this Doc View Source Label(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected Label(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source Label(String, String, Single, Color, Boolean, Boolean, Boolean) Constructor to build an AxisLabel from the text and the associated font properties. Declaration public Label(string text, string fontFamily, float fontSize, Color color, bool isBold, bool isItalic, bool isUnderline) Parameters Type Name Description String text The String representing the text to be displayed String fontFamily The String font family name Single fontSize The size of the font in points and scaled according to the CalcScaleFactor() logic. Color color The Color instance representing the color of the font Boolean isBold true for a bold font face Boolean isItalic true for an italic font face Boolean isUnderline true for an underline font face | Improve this Doc View Source Label(String, FontSpec) Constructor that builds a Label from a text String and a FontSpec instance. Declaration public Label(string text, FontSpec fontSpec) Parameters Type Name Description String text FontSpec fontSpec | Improve this Doc View Source Label(Label) Copy constructor Declaration public Label(Label rhs) Parameters Type Name Description Label rhs the Label instance to be copied. Fields | Improve this Doc View Source schema Current schema value that defines the version of the serialized file Declaration public const int schema = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source FontSpec A FontSpec instance representing the font properties for the displayed text. Declaration public FontSpec FontSpec { get; set; } Property Value Type Description FontSpec | Improve this Doc View Source IsVisible Gets or sets a boolean value that determines whether or not this label will be displayed. Declaration public bool IsVisible { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Text The String text to be displayed Declaration public string Text { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public Label Clone() Returns Type Description Label A new, independent copy of this class | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public virtual void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.Legend.Default.html": {
    "href": "api/ZedGraph.Legend.Default.html",
    "title": "Struct Legend.Default",
    "keywords": "Struct Legend.Default A simple struct that defines the default property values for the Legend class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source BorderColor The default color for the Legend border border. ( Color property). Declaration public static Color BorderColor Field Value Type Description Color | Improve this Doc View Source BorderWidth The default pen width for the Legend border border. ( Width property). Units are in pixels. Declaration public static float BorderWidth Field Value Type Description Single | Improve this Doc View Source FillBrush The default custom brush for filling in this Legend . Declaration public static Brush FillBrush Field Value Type Description Brush | Improve this Doc View Source FillColor The default color for the Legend background. ( Color property). Use of this color depends on the status of the Type property. Declaration public static Color FillColor Field Value Type Description Color | Improve this Doc View Source FillType The default fill mode for the Legend background. Declaration public static FillType FillType Field Value Type Description FillType | Improve this Doc View Source FontBold The default font bold mode for the Legend entries ( IsBold property). true for a bold typeface, false otherwise. Declaration public static bool FontBold Field Value Type Description Boolean | Improve this Doc View Source FontColor The default font color for the Legend entries ( FontColor property). Declaration public static Color FontColor Field Value Type Description Color | Improve this Doc View Source FontFamily The default font family for the Legend entries ( Family property). Declaration public static string FontFamily Field Value Type Description String | Improve this Doc View Source FontFillBrush The default custom brush for filling in the scale text background (see Brush property). Declaration public static Brush FontFillBrush Field Value Type Description Brush | Improve this Doc View Source FontFillColor The default color for filling in the scale text background (see Color property). Declaration public static Color FontFillColor Field Value Type Description Color | Improve this Doc View Source FontFillType The default fill mode for filling in the scale text background (see Type property). Declaration public static FillType FontFillType Field Value Type Description FillType | Improve this Doc View Source FontItalic The default font italic mode for the Legend entries ( IsItalic property). true for an italic typeface, false otherwise. Declaration public static bool FontItalic Field Value Type Description Boolean | Improve this Doc View Source FontSize The default font size for the Legend entries ( Size property). Units are in points (1/72 inch). Declaration public static float FontSize Field Value Type Description Single | Improve this Doc View Source FontUnderline The default font underline mode for the Legend entries ( IsUnderline property). true for an underlined typeface, false otherwise. Declaration public static bool FontUnderline Field Value Type Description Boolean | Improve this Doc View Source Gap The default gap size between the legend and the Rect . This is the default value of Gap . Declaration public static float Gap Field Value Type Description Single | Improve this Doc View Source IsBorderVisible The default border mode for the Legend . ( IsVisible property). true to draw a border around the Rect , false otherwise. Declaration public static bool IsBorderVisible Field Value Type Description Boolean | Improve this Doc View Source IsFilled The default fill mode for the Legend background ( Type property). true to fill-in the background with color, false to leave the background transparent. Declaration public static bool IsFilled Field Value Type Description Boolean | Improve this Doc View Source IsHStack The default horizontal stacking mode for the Legend ( IsHStack property). true to allow horizontal legend item stacking, false to allow only vertical legend orientation. Declaration public static bool IsHStack Field Value Type Description Boolean | Improve this Doc View Source IsReverse Default value for the IsReverse property. Declaration public static bool IsReverse Field Value Type Description Boolean | Improve this Doc View Source IsShowLegendSymbols Default value for the IsShowLegendSymbols property. Declaration public static bool IsShowLegendSymbols Field Value Type Description Boolean | Improve this Doc View Source IsVisible The default display mode for the Legend . ( IsVisible property). true to show the legend, false to hide it. Declaration public static bool IsVisible Field Value Type Description Boolean | Improve this Doc View Source Position The default location for the Legend on the graph ( Location property). This property is defined as a LegendPos enumeration. Declaration public static LegendPos Position Field Value Type Description LegendPos"
  },
  "api/ZedGraph.Legend.html": {
    "href": "api/ZedGraph.Legend.html",
    "title": "Class Legend",
    "keywords": "Class Legend This class encapsulates the chart Legend that is displayed in the GraphPane Inheritance Object Legend Implements ICloneable ISerializable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class Legend : ICloneable, ISerializable Constructors | Improve this Doc View Source Legend() Default constructor that sets all Legend properties to default values as defined in the Legend.Default class. Declaration public Legend() | Improve this Doc View Source Legend(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected Legend(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source Legend(Legend) The Copy Constructor Declaration public Legend(Legend rhs) Parameters Type Name Description Legend rhs The XAxis object from which to copy Fields | Improve this Doc View Source schema Current schema value that defines the version of the serialized file Declaration public const int schema = 12 Field Value Type Description Int32 Properties | Improve this Doc View Source Border The Border class used to draw the border border around this Legend . Declaration public Border Border { get; set; } Property Value Type Description Border | Improve this Doc View Source Fill Gets or sets the Fill data for this Legend background. Declaration public Fill Fill { get; set; } Property Value Type Description Fill | Improve this Doc View Source FontSpec Access to the FontSpec class used to render the Legend entries Declaration public FontSpec FontSpec { get; set; } Property Value Type Description FontSpec A reference to a Legend object See Also FontColor FontBold FontItalic FontUnderline FontFamily FontSize | Improve this Doc View Source Gap Gets or sets the gap size between the legend and the Rect . Declaration public float Gap { get; set; } Property Value Type Description Single Remarks This is expressed as a fraction of the largest scaled character height for any of the fonts used in the legend. Each CurveItem in the legend can optionally have its own FontSpec specification. | Improve this Doc View Source IsHStack Sets or gets a property that allows the Legend items to stack horizontally in addition to the vertical stacking Declaration public bool IsHStack { get; set; } Property Value Type Description Boolean true to allow horizontal stacking, false otherwise See Also IsHStack | Improve this Doc View Source IsReverse Gets or sets a value that determines if the legend entries are displayed in normal order (matching the order in the CurveList , or in reverse order. Declaration public bool IsReverse { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsShowLegendSymbols Gets or sets a value that determines whether the line and symbol keys will be displayed in the legend. Declaration public bool IsShowLegendSymbols { get; set; } Property Value Type Description Boolean Remarks Note: If this value is set to false (so that only the curve label text is displayed with no legend keys), then the color of the font for the legend entry of each curve will automatically be set to match the Color setting for that curve. You can override this behavior by specifying a specific font to be used for each individual curve with the FontSpec property. | Improve this Doc View Source IsVisible Gets or sets a property that shows or hides the Legend entirely Declaration public bool IsVisible { get; set; } Property Value Type Description Boolean true to show the Legend , false to hide it See Also IsVisible | Improve this Doc View Source Location Gets or sets the Location data for the Legend . This property is only applicable if Position is set to Float . Declaration public Location Location { get; set; } Property Value Type Description Location | Improve this Doc View Source Position Sets or gets the location of the Legend on the GraphPane using the LegendPos enum type Declaration public LegendPos Position { get; set; } Property Value Type Description LegendPos See Also Position | Improve this Doc View Source Rect Get the bounding rectangle for the Legend in screen coordinates Declaration public RectangleF Rect { get; } Property Value Type Description RectangleF A screen rectangle in pixel units Methods | Improve this Doc View Source CalcRect(Graphics, PaneBase, Single, ref RectangleF) Calculate the Legend rectangle ( Rect ), taking into account the number of required legend entries, and the legend drawing preferences. Declaration public void CalcRect(Graphics g, PaneBase pane, float scaleFactor, ref RectangleF tChartRect) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. PaneBase pane A reference to the PaneBase object that is the parent or owner of this object. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. RectangleF tChartRect The rectangle that contains the area bounded by the axes, in pixel units. Rect Remarks Adjust the size of the Rect for the parent GraphPane to accomodate the space required by the legend. | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public Legend Clone() Returns Type Description Legend A new, independent copy of this class | Improve this Doc View Source Draw(Graphics, PaneBase, Single) Render the Legend to the specified Graphics device. Declaration public void Draw(Graphics g, PaneBase pane, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. PaneBase pane A reference to the PaneBase object that is the parent or owner of this object. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Remarks This method is normally only called by the Draw method of the parent GraphPane object. | Improve this Doc View Source FindPoint(PointF, PaneBase, Single, out Int32) Determine if a mouse point is within the legend, and if so, which legend entry ( CurveItem ) is nearest. Declaration public bool FindPoint(PointF mousePt, PaneBase pane, float scaleFactor, out int index) Parameters Type Name Description PointF mousePt The screen point, in pixel coordinates. PaneBase pane A reference to the PaneBase object that is the parent or owner of this object. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Int32 index The index number of the CurveItem legend entry that is under the mouse point. The CurveItem object is accessible via CurveList . Returns Type Description Boolean true if the mouse point is within the Legend bounding box, false otherwise. See Also FindNearestObject(PointF, Graphics, out Object, out Int32) | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public virtual void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.LegendPos.html": {
    "href": "api/ZedGraph.LegendPos.html",
    "title": "Enum LegendPos",
    "keywords": "Enum LegendPos Enumeration type that defines the possible legend locations Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public enum LegendPos Fields Name Description Bottom Locate the Legend below the Rect BottomCenter Locate the Legend centered below the Rect BottomFlushLeft Locate the Legend below the Rect , but flush against the left margin of the Rect . Float Locate the Legend as a floating object above the graph at the location specified by Location . InsideBotLeft Locate the Legend inside the Rect in the bottom-left corner. InsideBotRight Locate the Legend inside the Rect in the bottom-right corner. InsideTopLeft Locate the Legend inside the Rect in the top-left corner. InsideTopRight Locate the Legend inside the Rect in the top-right corner. Left Locate the Legend on the left side of the Rect Right Locate the Legend on the right side of the Rect Top Locate the Legend above the Rect TopCenter Locate the Legend centered above the Rect TopFlushLeft Locate the Legend above the Rect , but flush against the left margin of the Rect . See Also Position"
  },
  "api/ZedGraph.Line.Default.html": {
    "href": "api/ZedGraph.Line.Default.html",
    "title": "Struct Line.Default",
    "keywords": "Struct Line.Default A simple struct that defines the default property values for the Line class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source Color The default color for curves (line segments connecting the points). This is the default value for the Color property. Declaration public static Color Color Field Value Type Description Color | Improve this Doc View Source FillBrush The default custom brush for filling in the area under the curve ( Brush property). Declaration public static Brush FillBrush Field Value Type Description Brush | Improve this Doc View Source FillColor The default color for filling in the area under the curve ( Color property). Declaration public static Color FillColor Field Value Type Description Color | Improve this Doc View Source FillType The default fill mode for the curve ( Type property). Declaration public static FillType FillType Field Value Type Description FillType | Improve this Doc View Source IsOptimizedDraw The default value for the IsOptimizedDraw property. Declaration public static bool IsOptimizedDraw Field Value Type Description Boolean | Improve this Doc View Source IsSmooth The default value for the IsSmooth property. Declaration public static bool IsSmooth Field Value Type Description Boolean | Improve this Doc View Source SmoothTension The default value for the SmoothTension property. Declaration public static float SmoothTension Field Value Type Description Single | Improve this Doc View Source StepType Default value for the curve type property ( StepType ). This determines if the curve will be drawn by directly connecting the points from the Points data collection, or if the curve will be a \"stair-step\" in which the points are connected by a series of horizontal and vertical lines that represent discrete, staticant values. Note that the values can be forward oriented ForwardStep ( StepType ) or rearward oriented RearwardStep . That is, the points are defined at the beginning or end of the staticant value for which they apply, respectively. Declaration public static StepType StepType Field Value Type Description StepType StepType enum value"
  },
  "api/ZedGraph.Line.html": {
    "href": "api/ZedGraph.Line.html",
    "title": "Class Line",
    "keywords": "Class Line A class representing all the characteristics of the Line segments that make up a curve on the graph. Inheritance Object LineBase Line Implements ICloneable ISerializable Inherited Members LineBase.Color LineBase.Style LineBase.DashOn LineBase.DashOff LineBase.Width LineBase.IsVisible LineBase.IsAntiAlias LineBase.GradientFill LineBase.schema0 LineBase.GetPen(PaneBase, Single) LineBase.GetPen(PaneBase, Single, PointPair) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class Line : LineBase, ICloneable, ISerializable Constructors | Improve this Doc View Source Line() Default constructor that sets all Line properties to default values as defined in the Line.Default class. Declaration public Line() | Improve this Doc View Source Line(Color) Constructor that sets the color property to the specified value, and sets the remaining Line properties to default values as defined in the Line.Default class. Declaration public Line(Color color) Parameters Type Name Description Color color The color to assign to this new Line object | Improve this Doc View Source Line(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected Line(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source Line(Line) The Copy Constructor Declaration public Line(Line rhs) Parameters Type Name Description Line rhs The Line object from which to copy Fields | Improve this Doc View Source schema Current schema value that defines the version of the serialized file Declaration public const int schema = 14 Field Value Type Description Int32 Properties | Improve this Doc View Source Fill Gets or sets the Fill data for this Line . Declaration public Fill Fill { get; set; } Property Value Type Description Fill | Improve this Doc View Source IsOptimizedDraw Gets or sets a boolean value that determines if this Line will be drawn with optimizations enabled. Declaration public bool IsOptimizedDraw { get; set; } Property Value Type Description Boolean Remarks Normally, the optimizations can be used without a problem, especially if the data are sorted. The optimizations are particularly helpful with very large datasets. However, if the data are very discontinuous (for example, a curve that doubles back on itself), then the optimizations can cause drawing artifacts in the form of missing line segments. The default option for this mode is false, so you must explicitly enable it for each Line . Also note that, even if the optimizations are enabled explicitly, no actual optimization will be done for datasets of less than 1000 points. | Improve this Doc View Source IsSmooth Gets or sets a property that determines if this Line will be drawn smooth. The \"smoothness\" is controlled by the SmoothTension property. Declaration public bool IsSmooth { get; set; } Property Value Type Description Boolean true to smooth the line, false to just connect the dots with linear segments See Also SmoothTension IsSmooth SmoothTension | Improve this Doc View Source SmoothTension Gets or sets a property that determines the smoothing tension for this Line . This property is only used if IsSmooth is true. A tension value 0.0 will just draw ordinary line segments like an unsmoothed line. A tension value of 1.0 will be smooth. Values greater than 1.0 will generally give odd results. Declaration public float SmoothTension { get; set; } Property Value Type Description Single A floating point value indicating the level of smoothing. 0.0F for no smoothing, 1.0F for lots of smoothing, >1.0 for odd smoothing. See Also IsSmooth IsSmooth SmoothTension | Improve this Doc View Source StepType Determines if the CurveItem will be drawn by directly connecting the points from the Points data collection, or if the curve will be a \"stair-step\" in which the points are connected by a series of horizontal and vertical lines that represent discrete, constant values. Note that the values can be forward oriented ForwardStep ( StepType ) or rearward oriented RearwardStep . That is, the points are defined at the beginning or end of the constant value for which they apply, respectively. The StepType property is ignored for lines that have IsSmooth set to true. Declaration public StepType StepType { get; set; } Property Value Type Description StepType StepType enum value See Also StepType Methods | Improve this Doc View Source BuildLowPointsArray(GraphPane, CurveItem, out PointF[], out Int32) Build an array of PointF values (pixel coordinates) that represents the low values for the current curve. Declaration public bool BuildLowPointsArray(GraphPane pane, CurveItem curve, out PointF[] arrPoints, out int count) Parameters Type Name Description GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. CurveItem curve A LineItem representing this curve. PointF [] arrPoints An array of PointF values in pixel coordinates representing the current curve. Int32 count The number of points contained in the \"arrPoints\" parameter. Returns Type Description Boolean true for a successful points array build, false for data problems Remarks Note that this drawing routine ignores Missing values, but it does not \"break\" the line to indicate values are missing. | Improve this Doc View Source BuildPointsArray(GraphPane, CurveItem, out PointF[], out Int32) Build an array of PointF values (pixel coordinates) that represents the current curve. Note that this drawing routine ignores Missing values, but it does not \"break\" the line to indicate values are missing. Declaration public bool BuildPointsArray(GraphPane pane, CurveItem curve, out PointF[] arrPoints, out int count) Parameters Type Name Description GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. CurveItem curve A LineItem representing this curve. PointF [] arrPoints An array of PointF values in pixel coordinates representing the current curve. Int32 count The number of points contained in the \"arrPoints\" parameter. Returns Type Description Boolean true for a successful points array build, false for data problems | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public Line Clone() Returns Type Description Line A new, independent copy of this class | Improve this Doc View Source CloseCurve(GraphPane, CurveItem, PointF[], Int32, Double, GraphicsPath) Close off a GraphicsPath that defines a curve Declaration public void CloseCurve(GraphPane pane, CurveItem curve, PointF[] arrPoints, int count, double yMin, GraphicsPath path) Parameters Type Name Description GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. CurveItem curve A LineItem representing this curve. PointF [] arrPoints An array of PointF values in screen pixel coordinates representing the current curve. Int32 count The number of points contained in the \"arrPoints\" parameter. Double yMin The Y axis value location where the X axis crosses. GraphicsPath path The GraphicsPath class that represents the curve. | Improve this Doc View Source Draw(Graphics, GraphPane, CurveItem, Single) Do all rendering associated with this Line to the specified Graphics device. This method is normally only called by the Draw method of the parent LineItem object. Declaration public void Draw(Graphics g, GraphPane pane, CurveItem curve, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. CurveItem curve A LineItem representing this curve. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. | Improve this Doc View Source DrawCurve(Graphics, GraphPane, CurveItem, Single) Draw the this CurveItem to the specified Graphics device. The format (stair-step or line) of the curve is defined by the StepType property. The routine only draws the line segments; the symbols are drawn by the Draw(Graphics, GraphPane, LineItem, Single, Boolean) method. This method is normally only called by the Draw method of the CurveItem object Declaration public void DrawCurve(Graphics g, GraphPane pane, CurveItem curve, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. CurveItem curve A LineItem representing this curve. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. | Improve this Doc View Source DrawCurveOriginal(Graphics, GraphPane, CurveItem, Single) Draw the this CurveItem to the specified Graphics device. The format (stair-step or line) of the curve is defined by the StepType property. The routine only draws the line segments; the symbols are drawn by the Draw(Graphics, GraphPane, LineItem, Single, Boolean) method. This method is normally only called by the Draw method of the CurveItem object Declaration public void DrawCurveOriginal(Graphics g, GraphPane pane, CurveItem curve, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. CurveItem curve A LineItem representing this curve. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. | Improve this Doc View Source DrawSegment(Graphics, GraphPane, Single, Single, Single, Single, Single) Render a single Line segment to the specified Graphics device. Declaration public void DrawSegment(Graphics g, GraphPane pane, float x1, float y1, float x2, float y2, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Single x1 The x position of the starting point that defines the line segment in screen pixel units Single y1 The y position of the starting point that defines the line segment in screen pixel units Single x2 The x position of the ending point that defines the line segment in screen pixel units Single y2 The y position of the ending point that defines the line segment in screen pixel units Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. | Improve this Doc View Source DrawSmoothFilledCurve(Graphics, GraphPane, CurveItem, Single) Draw the this CurveItem to the specified Graphics device using the specified smoothing property ( SmoothTension ). The routine draws the line segments and the area fill (if any, see FillType ; the symbols are drawn by the Draw(Graphics, GraphPane, LineItem, Single, Boolean) method. This method is normally only called by the Draw method of the CurveItem object. Note that the StepType property is ignored for smooth lines (e.g., when IsSmooth is true). Declaration public void DrawSmoothFilledCurve(Graphics g, GraphPane pane, CurveItem curve, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. CurveItem curve A LineItem representing this curve. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. | Improve this Doc View Source DrawSticks(Graphics, GraphPane, CurveItem, Single) Render the Line 's as vertical sticks (from a StickItem ) to the specified Graphics device. Declaration public void DrawSticks(Graphics g, GraphPane pane, CurveItem curve, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. CurveItem curve A CurveItem representing this curve. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides LineBase.GetObjectData(SerializationInfo, StreamingContext) Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.LineBase.Default.html": {
    "href": "api/ZedGraph.LineBase.Default.html",
    "title": "Struct LineBase.Default",
    "keywords": "Struct LineBase.Default A simple struct that defines the default property values for the LineBase class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source Color The default color for the line. This is the default value for the Color property. Declaration public static Color Color Field Value Type Description Color | Improve this Doc View Source DashOff The default \"dash off\" size for drawing the the line ( DashOff property). Units are in points (1/72 inch). Declaration public static float DashOff Field Value Type Description Single | Improve this Doc View Source DashOn The default \"dash on\" size for drawing the line ( DashOn property). Units are in points (1/72 inch). Declaration public static float DashOn Field Value Type Description Single | Improve this Doc View Source IsAntiAlias The default value for the IsAntiAlias property. Declaration public static bool IsAntiAlias Field Value Type Description Boolean | Improve this Doc View Source IsVisible The default mode for displaying line segments ( IsVisible property). True to show the line segments, false to hide them. Declaration public static bool IsVisible Field Value Type Description Boolean | Improve this Doc View Source Style The default drawing style for line segments ( Style property). This is defined with the DashStyle enumeration. Declaration public static DashStyle Style Field Value Type Description DashStyle | Improve this Doc View Source Width The default width for line segments ( Width property). Units are points (1/72 inch). Declaration public static float Width Field Value Type Description Single"
  },
  "api/ZedGraph.LineBase.html": {
    "href": "api/ZedGraph.LineBase.html",
    "title": "Class LineBase",
    "keywords": "Class LineBase A class that handles the basic attributes of a line segment. Inheritance Object LineBase Border Line OHLCBar Implements ICloneable ISerializable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class LineBase : ICloneable, ISerializable Remarks This is the base class for Line and Border classes. Constructors | Improve this Doc View Source LineBase() Default constructor that sets all LineBase properties to default values as defined in the LineBase.Default class. Declaration public LineBase() | Improve this Doc View Source LineBase(Color) Constructor that sets the color property to the specified value, and sets the remaining LineBase properties to default values as defined in the LineBase.Default class. Declaration public LineBase(Color color) Parameters Type Name Description Color color The color to assign to this new Line object | Improve this Doc View Source LineBase(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected LineBase(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source LineBase(LineBase) The Copy Constructor Declaration public LineBase(LineBase rhs) Parameters Type Name Description LineBase rhs The LineBase object from which to copy Fields | Improve this Doc View Source schema0 Current schema value that defines the version of the serialized file Declaration public const int schema0 = 12 Field Value Type Description Int32 Properties | Improve this Doc View Source Color The color of the Line . Note that this color value can be overridden if the Type is one of the GradientByX , GradientByY , GradientByZ , and GradientByColorValue types. Declaration public Color Color { get; set; } Property Value Type Description Color See Also GradientFill | Improve this Doc View Source DashOff The \"Dash Off\" mode for drawing the line. Declaration public float DashOff { get; set; } Property Value Type Description Single The dash off length is defined in points (1/72 inch) Remarks This is the distance, in points (1/72 inch), of the spaces between the dash segments that make up the dashed grid lines. This setting is only valid if Style is set to Custom . See Also DashOn IsVisible DashOff | Improve this Doc View Source DashOn The \"Dash On\" mode for drawing the line. Declaration public float DashOn { get; set; } Property Value Type Description Single The dash on length is defined in points (1/72 inch) Remarks This is the distance, in points (1/72 inch), of the dash segments that make up the dashed grid lines. This setting is only valid if Style is set to Custom . See Also DashOff IsVisible DashOn | Improve this Doc View Source GradientFill Gets or sets a custom Fill class. Declaration public Fill GradientFill { get; set; } Property Value Type Description Fill Remarks This fill is used strictly for GradientByX , GradientByY , GradientByZ , and GradientByColorValue calculations to determine the color of the line. It overrides the Color property if one of the above FillType values are selected. See Also Color | Improve this Doc View Source IsAntiAlias Gets or sets a value that determines if the lines are drawn using Anti-Aliasing capabilities from the Graphics class. Declaration public bool IsAntiAlias { get; set; } Property Value Type Description Boolean Remarks If this value is set to true, then the SmoothingMode property will be set to HighQuality only while this Line is drawn. A value of false will leave the value of SmoothingMode unchanged. | Improve this Doc View Source IsVisible Gets or sets a property that shows or hides the Line . Declaration public bool IsVisible { get; set; } Property Value Type Description Boolean true to show the line, false to hide it See Also IsVisible | Improve this Doc View Source Style The style of the Line , defined as a DashStyle enum. This allows the line to be solid, dashed, or dotted. Declaration public DashStyle Style { get; set; } Property Value Type Description DashStyle See Also Style DashOn DashOff | Improve this Doc View Source Width The pen width used to draw the Line , in points (1/72 inch) Declaration public float Width { get; set; } Property Value Type Description Single See Also Width Methods | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public virtual void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source GetPen(PaneBase, Single) Create a Pen object based on the properties of this LineBase . Declaration public Pen GetPen(PaneBase pane, float scaleFactor) Parameters Type Name Description PaneBase pane The owner GraphPane of this LineBase . Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Returns Type Description Pen A Pen object with the properties of this LineBase | Improve this Doc View Source GetPen(PaneBase, Single, PointPair) Create a Pen object based on the properties of this LineBase . Declaration public Pen GetPen(PaneBase pane, float scaleFactor, PointPair dataValue) Parameters Type Name Description PaneBase pane The owner GraphPane of this LineBase . Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. PointPair dataValue The data value to be used for a value-based color gradient. This is only applicable if Type is one of GradientByX , GradientByY , GradientByZ , or GradientByColorValue . Returns Type Description Pen A Pen object with the properties of this LineBase Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone. Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Remarks Note that this method must be called with an explicit cast to ICloneable, and that it is inherently virtual. For example: ParentClass foo = new ChildClass(); ChildClass bar = (ChildClass) ((ICloneable)foo).Clone(); Assume that ChildClass is inherited from ParentClass. Even though foo is declared with ParentClass, it is actually an instance of ChildClass. Calling the ICloneable implementation of Clone() on foo actually calls ChildClass.Clone() as if it were a virtual function. Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.LineItem.html": {
    "href": "api/ZedGraph.LineItem.html",
    "title": "Class LineItem",
    "keywords": "Class LineItem Encapsulates a curve type that is displayed as a line and/or a set of symbols at each point. Inheritance Object CurveItem LineItem StickItem Implements ICloneable ISerializable Inherited Members CurveItem._isX2Axis CurveItem._isY2Axis CurveItem._yAxisIndex CurveItem._isVisible CurveItem._isSelected CurveItem._isSelectable CurveItem._isOverrideOrdinal CurveItem._points CurveItem.Tag CurveItem.schema CurveItem.Label CurveItem.Color CurveItem.IsVisible CurveItem.IsSelected CurveItem.IsSelectable CurveItem.IsOverrideOrdinal CurveItem.IsX2Axis CurveItem.IsY2Axis CurveItem.YAxisIndex CurveItem.IsBar CurveItem.IsPie CurveItem.IsLine CurveItem.NPts CurveItem.Points CurveItem.Item[Int32] CurveItem.Link CurveItem.AddPoint(Double, Double) CurveItem.AddPoint(PointPair) CurveItem.Clear() CurveItem.RemovePoint(Int32) CurveItem.GetXAxis(GraphPane) CurveItem.GetYAxis(GraphPane) CurveItem.GetYAxisIndex(GraphPane) CurveItem.MakeUnique() CurveItem.GetRange(Double, Double, Double, Double, Boolean, Boolean, GraphPane) CurveItem.BaseAxis(GraphPane) CurveItem.ValueAxis(GraphPane) CurveItem.GetBarWidth(GraphPane) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class LineItem : CurveItem, ICloneable, ISerializable Constructors | Improve this Doc View Source LineItem(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected LineItem(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source LineItem(String) Create a new LineItem , specifying only the legend Label . Declaration public LineItem(string label) Parameters Type Name Description String label The _label that will appear in the legend. | Improve this Doc View Source LineItem(String, Double[], Double[], Color, SymbolType) Create a new LineItem using the specified properties. Declaration public LineItem(string label, double[] x, double[] y, Color color, SymbolType symbolType) Parameters Type Name Description String label The _label that will appear in the legend. Double [] x An array of double precision values that define the independent (X axis) values for this curve Double [] y An array of double precision values that define the dependent (Y axis) values for this curve Color color A Color value that will be applied to the Line and Symbol properties. SymbolType symbolType A SymbolType enum specifying the type of symbol to use for this LineItem . Use None to hide the symbols. | Improve this Doc View Source LineItem(String, Double[], Double[], Color, SymbolType, Single) Create a new LineItem using the specified properties. Declaration public LineItem(string label, double[] x, double[] y, Color color, SymbolType symbolType, float lineWidth) Parameters Type Name Description String label The _label that will appear in the legend. Double [] x An array of double precision values that define the independent (X axis) values for this curve Double [] y An array of double precision values that define the dependent (Y axis) values for this curve Color color A Color value that will be applied to the Line and Symbol properties. SymbolType symbolType A SymbolType enum specifying the type of symbol to use for this LineItem . Use None to hide the symbols. Single lineWidth The width (in points) to be used for the Line . This width is scaled based on CalcScaleFactor() . Use a value of zero to hide the line (see IsVisible ). | Improve this Doc View Source LineItem(String, IPointList, Color, SymbolType) Create a new LineItem using the specified properties. Declaration public LineItem(string label, IPointList points, Color color, SymbolType symbolType) Parameters Type Name Description String label The _label that will appear in the legend. IPointList points A IPointList of double precision value pairs that define the X and Y values for this curve Color color A Color value that will be applied to the Line and Symbol properties. SymbolType symbolType A SymbolType enum specifying the type of symbol to use for this LineItem . Use None to hide the symbols. | Improve this Doc View Source LineItem(String, IPointList, Color, SymbolType, Single) Create a new LineItem using the specified properties. Declaration public LineItem(string label, IPointList points, Color color, SymbolType symbolType, float lineWidth) Parameters Type Name Description String label The _label that will appear in the legend. IPointList points A IPointList of double precision value pairs that define the X and Y values for this curve Color color A Color value that will be applied to the Line and Symbol properties. SymbolType symbolType A SymbolType enum specifying the type of symbol to use for this LineItem . Use None to hide the symbols. Single lineWidth The width (in points) to be used for the Line . This width is scaled based on CalcScaleFactor() . Use a value of zero to hide the line (see IsVisible ). | Improve this Doc View Source LineItem(LineItem) The Copy Constructor Declaration public LineItem(LineItem rhs) Parameters Type Name Description LineItem rhs The LineItem object from which to copy Fields | Improve this Doc View Source _line Private field that stores a reference to the Line class defined for this LineItem . Use the public property Line to access this value. Declaration [CLSCompliant(false)] protected Line _line Field Value Type Description Line | Improve this Doc View Source _symbol Private field that stores a reference to the Symbol class defined for this LineItem . Use the public property Symbol to access this value. Declaration [CLSCompliant(false)] protected Symbol _symbol Field Value Type Description Symbol | Improve this Doc View Source schema2 Current schema value that defines the version of the serialized file Declaration public const int schema2 = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source Line Gets or sets the Line class instance defined for this LineItem . Declaration public Line Line { get; set; } Property Value Type Description Line | Improve this Doc View Source Symbol Gets or sets the Symbol class instance defined for this LineItem . Declaration public Symbol Symbol { get; set; } Property Value Type Description Symbol Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public LineItem Clone() Returns Type Description LineItem A new, independent copy of this class | Improve this Doc View Source Draw(Graphics, GraphPane, Int32, Single) Do all rendering associated with this LineItem to the specified Graphics device. This method is normally only called by the Draw method of the parent CurveList collection object. Declaration public override void Draw(Graphics g, GraphPane pane, int pos, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Int32 pos The ordinal position of the current Bar curve. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Overrides CurveItem.Draw(Graphics, GraphPane, Int32, Single) | Improve this Doc View Source DrawLegendKey(Graphics, GraphPane, RectangleF, Single) Draw a legend key entry for this LineItem at the specified location Declaration public override void DrawLegendKey(Graphics g, GraphPane pane, RectangleF rect, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. RectangleF rect The RectangleF struct that specifies the location for the legend key Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Overrides CurveItem.DrawLegendKey(Graphics, GraphPane, RectangleF, Single) | Improve this Doc View Source GetCoords(GraphPane, Int32, out String) Determine the coords for the rectangle associated with a specified point for this CurveItem Declaration public override bool GetCoords(GraphPane pane, int i, out string coords) Parameters Type Name Description GraphPane pane The GraphPane to which this curve belongs Int32 i The index of the point of interest String coords A list of coordinates that represents the \"rect\" for this point (used in an html AREA tag) Returns Type Description Boolean true if it's a valid point, false otherwise Overrides CurveItem.GetCoords(GraphPane, Int32, out String) | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides CurveItem.GetObjectData(SerializationInfo, StreamingContext) | Improve this Doc View Source MakeUnique(ColorSymbolRotator) Loads some pseudo unique colors/symbols into this LineItem. This is mainly useful for differentiating a set of new LineItems without having to pick your own colors/symbols. MakeUnique(ColorSymbolRotator) Declaration public override void MakeUnique(ColorSymbolRotator rotator) Parameters Type Name Description ColorSymbolRotator rotator The ColorSymbolRotator that is used to pick the color and symbol for this method call. Overrides CurveItem.MakeUnique(ColorSymbolRotator) Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.LineObj.html": {
    "href": "api/ZedGraph.LineObj.html",
    "title": "Class LineObj",
    "keywords": "Class LineObj A class that represents a line segment object on the graph. A list of GraphObj objects is maintained by the GraphObjList collection class. Inheritance Object GraphObj LineObj ArrowObj Implements ICloneable ISerializable Inherited Members GraphObj._location GraphObj._isVisible GraphObj._isClippedToChartRect GraphObj.Tag GraphObj.Location GraphObj.ZOrder GraphObj.IsVisible GraphObj.IsClippedToChartRect GraphObj.Link GraphObj.IsInFrontOfData GraphObj.schema Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class LineObj : GraphObj, ICloneable, ISerializable Remarks This should not be confused with the LineItem class, which represents a set of points plotted together as a \"curve\". The LineObj class is a single line segment, drawn as a \"decoration\" on the chart. Constructors | Improve this Doc View Source LineObj() Default constructor -- places the LineObj at location (0,0) to (1,1). All other values are defaulted. Declaration public LineObj() | Improve this Doc View Source LineObj(Double, Double, Double, Double) A constructor that allows only the position of the line to be pre-specified. All other properties are set to default values Declaration public LineObj(double x1, double y1, double x2, double y2) Parameters Type Name Description Double x1 The x position of the starting point that defines the LineObj . The units of this position are specified by the CoordinateFrame property. Double y1 The y position of the starting point that defines the LineObj . The units of this position are specified by the CoordinateFrame property. Double x2 The x position of the ending point that defines the LineObj . The units of this position are specified by the CoordinateFrame property. Double y2 The y position of the ending point that defines the LineObj . The units of this position are specified by the CoordinateFrame property. | Improve this Doc View Source LineObj(Color, Double, Double, Double, Double) A constructor that allows the position, color, and size of the LineObj to be pre-specified. Declaration public LineObj(Color color, double x1, double y1, double x2, double y2) Parameters Type Name Description Color color An arbitrary Color specification for the arrow Double x1 The x position of the starting point that defines the line. The units of this position are specified by the CoordinateFrame property. Double y1 The y position of the starting point that defines the line. The units of this position are specified by the CoordinateFrame property. Double x2 The x position of the ending point that defines the line. The units of this position are specified by the CoordinateFrame property. Double y2 The y position of the ending point that defines the line. The units of this position are specified by the CoordinateFrame property. | Improve this Doc View Source LineObj(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected LineObj(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source LineObj(LineObj) The Copy Constructor Declaration public LineObj(LineObj rhs) Parameters Type Name Description LineObj rhs The LineObj object from which to copy Fields | Improve this Doc View Source _line protected field that maintains the attributes of the line using an instance of the LineBase class. Declaration [CLSCompliant(false)] protected LineBase _line Field Value Type Description LineBase | Improve this Doc View Source schema2 Current schema value that defines the version of the serialized file Declaration public const int schema2 = 11 Field Value Type Description Int32 Properties | Improve this Doc View Source Line A LineBase class that contains the attributes for drawing this LineObj . Declaration public LineBase Line { get; set; } Property Value Type Description LineBase Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public LineObj Clone() Returns Type Description LineObj A new, independent copy of this class | Improve this Doc View Source Draw(Graphics, PaneBase, Single) Render this object to the specified Graphics device. Declaration public override void Draw(Graphics g, PaneBase pane, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. PaneBase pane A reference to the PaneBase object that is the parent or owner of this object. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Overrides GraphObj.Draw(Graphics, PaneBase, Single) Remarks This method is normally only called by the Draw method of the parent GraphObjList collection object. | Improve this Doc View Source GetCoords(PaneBase, Graphics, Single, out String, out String) Determines the shape type and Coords values for this GraphObj Declaration public override void GetCoords(PaneBase pane, Graphics g, float scaleFactor, out string shape, out string coords) Parameters Type Name Description PaneBase pane Graphics g Single scaleFactor String shape String coords Overrides GraphObj.GetCoords(PaneBase, Graphics, Single, out String, out String) | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides GraphObj.GetObjectData(SerializationInfo, StreamingContext) | Improve this Doc View Source PointInBox(PointF, PaneBase, Graphics, Single) Determine if the specified screen point lies inside the bounding box of this LineObj . Declaration public override bool PointInBox(PointF pt, PaneBase pane, Graphics g, float scaleFactor) Parameters Type Name Description PointF pt The screen point, in pixels PaneBase pane A reference to the PaneBase object that is the parent or owner of this object. Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Returns Type Description Boolean true if the point lies in the bounding box, false otherwise Overrides GraphObj.PointInBox(PointF, PaneBase, Graphics, Single) Remarks The bounding box is calculated assuming a distance of NearestTol pixels around the arrow segment. Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.LineType.html": {
    "href": "api/ZedGraph.LineType.html",
    "title": "Enum LineType",
    "keywords": "Enum LineType Enumeration type that defines the available types of LineItem graphs. Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public enum LineType Fields Name Description Normal Draw the lines as normal. Any fill area goes from each line down to the X Axis. Stack Draw the lines stacked on top of each other, accumulating values to a total value. See Also LineType"
  },
  "api/ZedGraph.Link.html": {
    "href": "api/ZedGraph.Link.html",
    "title": "Class Link",
    "keywords": "Class Link A class that maintains hyperlink information for a clickable object on the graph. Inheritance Object Link Implements ISerializable ICloneable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class Link : ISerializable, ICloneable Constructors | Improve this Doc View Source Link() Default constructor. Set all properties to string.Empty, or null. Declaration public Link() | Improve this Doc View Source Link(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected Link(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source Link(String, String, String) Construct a Link instance from a specified title, url, and target. Declaration public Link(string title, string url, string target) Parameters Type Name Description String title The title for the link (which shows up in the tooltip). String url The URL destination for the link. String target The target for the link (typically \"_blank\" or \"_self\"). | Improve this Doc View Source Link(Link) The Copy Constructor Declaration public Link(Link rhs) Parameters Type Name Description Link rhs The Link object from which to copy Fields | Improve this Doc View Source schema Current schema value that defines the version of the serialized file Declaration public const int schema = 10 Field Value Type Description Int32 Remarks schema started with 10 for ZedGraph version 5 | Improve this Doc View Source Tag A tag object for use by the user. This can be used to store additional information associated with the Link . ZedGraph does not use this value for any purpose. Declaration public object Tag Field Value Type Description Object Remarks Note that, if you are going to Serialize ZedGraph data, then any type that you store in Tag must be a serializable type (or it will cause an exception). Properties | Improve this Doc View Source IsActive Gets a value that indicates if this Link is enabled (see IsEnabled ), and that either the Url or the Title is non-null. Declaration public bool IsActive { get; } Property Value Type Description Boolean | Improve this Doc View Source IsEnabled Gets or sets a property that determines if this link is active. True to have a clickable link, false to ignore the link. Declaration public bool IsEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Target Gets or sets the target string for this link. Declaration public string Target { get; set; } Property Value Type Description String Remarks This value should be set to a valid target associated with the \"Target\" property of an html hyperlink. Typically, this would be \"_blank\" to open a new browser window, or \"_self\" to open in the current browser. | Improve this Doc View Source Title Gets or sets the title string for this link. Declaration public string Title { get; set; } Property Value Type Description String Remarks For web controls, this title will be shown as a tooltip when the mouse hovers over the area of the object that owns this link. Set the value to Empty to have no title. | Improve this Doc View Source Url Gets or sets the url string for this link. Declaration public string Url { get; set; } Property Value Type Description String Remarks Set this value to Empty if you don't want to have a hyperlink associated with the object to which this link belongs. Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public Link Clone() Returns Type Description Link A new, independent copy of this class | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public virtual void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source MakeCurveItemUrl(GraphPane, CurveItem, Int32) Create a URL for a CurveItem that includes the index of the point that was selected. Declaration public virtual string MakeCurveItemUrl(GraphPane pane, CurveItem curve, int index) Parameters Type Name Description GraphPane pane The GraphPane of interest CurveItem curve The CurveItem for which to make the url string. Int32 index The zero-based index of the selected point Returns Type Description String A string containing the url with an index parameter added. Remarks An \"index\" parameter is added to the Url property for this link to indicate which point was selected. Further, if the X or Y axes that correspond to this CurveItem are of Text , then an additional parameter will be added containing the text value that corresponds to the index of the selected point. The XAxis text parameter will be labeled \"xtext\", and the YAxis text parameter will be labeled \"ytext\". Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.Runtime.Serialization.ISerializable System.ICloneable"
  },
  "api/ZedGraph.Location.html": {
    "href": "api/ZedGraph.Location.html",
    "title": "Class Location",
    "keywords": "Class Location A class than contains information about the position of an object on the graph. Inheritance Object Location Implements ICloneable ISerializable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class Location : ICloneable, ISerializable Constructors | Improve this Doc View Source Location() Default constructor for the Location class. Declaration public Location() | Improve this Doc View Source Location(Double, Double, Double, Double, CoordType, AlignH, AlignV) Constructor for the Location class that specifies the (x, y), (width, height), and the CoordType . Declaration public Location(double x, double y, double width, double height, CoordType coordType, AlignH alignH, AlignV alignV) Parameters Type Name Description Double x The x position, specified in units of . Double y The y position, specified in units of . Double width The width, specified in units of . Double height The height, specified in units of . CoordType coordType The CoordType enum that specifies the units for and AlignH alignH The AlignH enum that specifies the horizontal alignment of the object with respect to the (x,y) location AlignV alignV The AlignV enum that specifies the vertical alignment of the object with respect to the (x,y) location Remarks The (x,y) position corresponds to the starting position, the (x2, y2) coorresponds to the ending position (typically used for ArrowObj 's). | Improve this Doc View Source Location(Double, Double, CoordType) Constructor for the Location class that specifies the x, y position and the CoordType . Declaration public Location(double x, double y, CoordType coordType) Parameters Type Name Description Double x The x position, specified in units of . Double y The y position, specified in units of . CoordType coordType The CoordType enum that specifies the units for and Remarks The (x,y) position corresponds to the top-left corner; | Improve this Doc View Source Location(Double, Double, CoordType, AlignH, AlignV) Constructor for the Location class that specifies the x, y position and the CoordType . Declaration public Location(double x, double y, CoordType coordType, AlignH alignH, AlignV alignV) Parameters Type Name Description Double x The x position, specified in units of . Double y The y position, specified in units of . CoordType coordType The CoordType enum that specifies the units for and AlignH alignH The AlignH enum that specifies the horizontal alignment of the object with respect to the (x,y) location AlignV alignV The AlignV enum that specifies the vertical alignment of the object with respect to the (x,y) location Remarks The (x,y) position corresponds to the top-left corner; | Improve this Doc View Source Location(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected Location(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source Location(Location) The Copy Constructor Declaration public Location(Location rhs) Parameters Type Name Description Location rhs The Location object from which to copy Fields | Improve this Doc View Source schema Current schema value that defines the version of the serialized file Declaration public const int schema = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source AlignH A horizontal alignment parameter for this object specified using the AlignH enum type. Declaration public AlignH AlignH { get; set; } Property Value Type Description AlignH | Improve this Doc View Source AlignV A vertical alignment parameter for this object specified using the AlignV enum type. Declaration public AlignV AlignV { get; set; } Property Value Type Description AlignV | Improve this Doc View Source BottomRight The bottom-right PointF for this Location . Declaration public PointF BottomRight { get; } Property Value Type Description PointF A PointF in CoordinateFrame units. Remarks Note that this method reduces the precision of the location coordinates from double precision to single precision. In some cases, such as Date , it may affect the resolution of the point location. | Improve this Doc View Source CoordinateFrame The coordinate system to be used for defining the object position Declaration public CoordType CoordinateFrame { get; set; } Property Value Type Description CoordType The coordinate system is defined with the CoordType enum | Improve this Doc View Source Height The height of the object. Declaration public double Height { get; set; } Property Value Type Description Double Remarks The units of this position are specified by the CoordinateFrame property. | Improve this Doc View Source Rect The RectangleF for this object as defined by the X , Y , Width , and Height properties. Declaration public RectangleF Rect { get; set; } Property Value Type Description RectangleF A RectangleF in CoordinateFrame units. Remarks Note that this method reduces the precision of the location coordinates from double precision to single precision. In some cases, such as Date , it may affect the resolution of the point location. | Improve this Doc View Source TopLeft The top-left PointF for this Location . Declaration public PointF TopLeft { get; set; } Property Value Type Description PointF A PointF in CoordinateFrame units. Remarks Note that this method reduces the precision of the location coordinates from double precision to single precision. In some cases, such as Date , it may affect the resolution of the point location. | Improve this Doc View Source Width The width of the object. Declaration public double Width { get; set; } Property Value Type Description Double Remarks The units of this position are specified by the CoordinateFrame property. | Improve this Doc View Source X The x position of the object. Declaration public double X { get; set; } Property Value Type Description Double Remarks The units of this position are specified by the CoordinateFrame property. The object will be aligned to this position based on the AlignH property. | Improve this Doc View Source X1 The x1 position of the object (an alias for the x position). Declaration public double X1 { get; set; } Property Value Type Description Double Remarks The units of this position are specified by the CoordinateFrame property. The object will be aligned to this position based on the AlignH property. | Improve this Doc View Source X2 The x2 position of the object. Declaration public double X2 { get; } Property Value Type Description Double Remarks The units of this position are specified by the CoordinateFrame property. The object will be aligned to this position based on the AlignH property. This position is only used for objects such as ArrowObj , where it makes sense to have a second coordinate. Note that the X2 position is stored internally as a Width offset from X . | Improve this Doc View Source Y The y position of the object. Declaration public double Y { get; set; } Property Value Type Description Double Remarks The units of this position are specified by the CoordinateFrame property. The object will be aligned to this position based on the AlignV property. | Improve this Doc View Source Y1 The y1 position of the object (an alias for the y position). Declaration public double Y1 { get; set; } Property Value Type Description Double Remarks The units of this position are specified by the CoordinateFrame property. The object will be aligned to this position based on the AlignV property. | Improve this Doc View Source Y2 The y2 position of the object. Declaration public double Y2 { get; } Property Value Type Description Double Remarks The units of this position are specified by the CoordinateFrame property. The object will be aligned to this position based on the AlignV property. This position is only used for objects such as ArrowObj , where it makes sense to have a second coordinate. Note that the Y2 position is stored internally as a Height offset from Y . Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public Location Clone() Returns Type Description Location A new, independent copy of this class | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public virtual void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source Transform(PaneBase) Transform this Location object to display device coordinates using the properties of the specified GraphPane . Declaration public PointF Transform(PaneBase pane) Parameters Type Name Description PaneBase pane A reference to the PaneBase object that contains the Axis classes which will be used for the transform. Returns Type Description PointF A point in display device coordinates that corresponds to the specified user point. | Improve this Doc View Source Transform(PaneBase, Double, Double, CoordType) Transform a data point from the specified coordinate type ( CoordType ) to display device coordinates (pixels). Declaration public static PointF Transform(PaneBase pane, double x, double y, CoordType coord) Parameters Type Name Description PaneBase pane A reference to the PaneBase object that contains the Axis classes which will be used for the transform. Double x The x coordinate that defines the point in user space. Double y The y coordinate that defines the point in user space. CoordType coord A CoordType type that defines the coordinate system in which the X,Y pair is defined. Returns Type Description PointF A point in display device coordinates that corresponds to the specified user point. Remarks If is not of type GraphPane , then only the PaneFraction transformation is available. | Improve this Doc View Source TransformBottomRight(PaneBase) The PointF for this object as defined by the X2 and Y2 properties. Declaration public PointF TransformBottomRight(PaneBase pane) Parameters Type Name Description PaneBase pane Returns Type Description PointF A PointF in pixel units. Remarks This method transforms the location to output device pixel units. The AlignH and AlignV properties are ignored for this transformation (see TransformTopLeft(PaneBase, Single, Single) ). | Improve this Doc View Source TransformRect(PaneBase) Transform the RectangleF for this object as defined by the X , Y , Width , and Height properties. Declaration public RectangleF TransformRect(PaneBase pane) Parameters Type Name Description PaneBase pane Returns Type Description RectangleF A RectangleF in pixel units. Remarks This method transforms the location to output device pixel units. The AlignH and AlignV properties are honored in this transformation. | Improve this Doc View Source TransformTopLeft(PaneBase) The PointF for this object as defined by the X and Y properties. Declaration public PointF TransformTopLeft(PaneBase pane) Parameters Type Name Description PaneBase pane Returns Type Description PointF A PointF in pixel units. Remarks This method transforms the location to output device pixel units. The AlignH and AlignV properties are ignored for this transformation (see TransformTopLeft(PaneBase, Single, Single) ). | Improve this Doc View Source TransformTopLeft(PaneBase, Single, Single) Transform this Location from the coordinate system as specified by CoordinateFrame to the device coordinates of the specified PaneBase object. Declaration public PointF TransformTopLeft(PaneBase pane, float width, float height) Parameters Type Name Description PaneBase pane A reference to the PaneBase object that contains the Axis classes which will be used for the transform. Single width The width of the object in device pixels Single height The height of the object in device pixels Returns Type Description PointF The top-left corner of the object Remarks The returned PointF struct represents the top-left corner of the object that honors the Location properties. The AlignH and AlignV properties are honored in this transformation. Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.MajorGrid.Default.html": {
    "href": "api/ZedGraph.MajorGrid.Default.html",
    "title": "Struct MajorGrid.Default",
    "keywords": "Struct MajorGrid.Default A simple struct that defines the default property values for the MajorGrid class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source Color The default color for the Axis grid lines ( Color property). This color only affects the grid lines. Declaration public static Color Color Field Value Type Description Color | Improve this Doc View Source DashOff The default \"dash off\" size for drawing the Axis grid ( DashOff property). Units are in points (1/72 inch). Declaration public static float DashOff Field Value Type Description Single | Improve this Doc View Source DashOn The default \"dash on\" size for drawing the Axis grid ( DashOn property). Units are in points (1/72 inch). Declaration public static float DashOn Field Value Type Description Single | Improve this Doc View Source IsVisible The default display mode for the Axis grid lines ( IsVisible property). true to show the grid lines, false to hide them. Declaration public static bool IsVisible Field Value Type Description Boolean | Improve this Doc View Source IsZeroLine The default boolean value that determines if a line will be drawn at the zero value for the axis. Declaration public static bool IsZeroLine Field Value Type Description Boolean true to show the zero line, false otherwise Remarks The zero line is a line that divides the negative values from the positive values. The default is set according to IsZeroLine , IsZeroLine , IsZeroLine , | Improve this Doc View Source PenWidth The default pen width for drawing the Axis grid ( PenWidth property). Units are in points (1/72 inch). Declaration public static float PenWidth Field Value Type Description Single"
  },
  "api/ZedGraph.MajorGrid.html": {
    "href": "api/ZedGraph.MajorGrid.html",
    "title": "Class MajorGrid",
    "keywords": "Class MajorGrid Class that handles the data associated with the major grid lines on the chart. Inherits from MinorGrid . Inheritance Object MinorGrid MajorGrid Implements ICloneable ISerializable Inherited Members MinorGrid.IsVisible MinorGrid.DashOn MinorGrid.DashOff MinorGrid.PenWidth MinorGrid.Color MinorGrid.schema Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class MajorGrid : MinorGrid, ICloneable, ISerializable Constructors | Improve this Doc View Source MajorGrid() Default constructor Declaration public MajorGrid() | Improve this Doc View Source MajorGrid(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected MajorGrid(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source MajorGrid(MajorGrid) Copy constructor Declaration public MajorGrid(MajorGrid rhs) Parameters Type Name Description MajorGrid rhs The source MajorGrid to be copied. Fields | Improve this Doc View Source schema2 Current schema value that defines the version of the serialized file Declaration public const int schema2 = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source IsZeroLine Gets or sets a boolean value that determines if a line will be drawn at the zero value for the axis. Declaration public bool IsZeroLine { get; set; } Property Value Type Description Boolean true to show the zero line, false otherwise Remarks The zero line is a line that divides the negative values from the positive values. The default is set according to IsZeroLine , IsZeroLine , IsZeroLine , Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public MajorGrid Clone() Returns Type Description MajorGrid A new, independent copy of this class | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides MinorGrid.GetObjectData(SerializationInfo, StreamingContext) Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.MajorTic.Default.html": {
    "href": "api/ZedGraph.MajorTic.Default.html",
    "title": "Struct MajorTic.Default",
    "keywords": "Struct MajorTic.Default A simple struct that defines the default property values for the MinorTic class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source Color The default color for major tics ( Color property). Declaration public static Color Color Field Value Type Description Color | Improve this Doc View Source IsCrossInside The default display mode for the Axis major inside \"cross\" tic marks ( IsCrossInside property). Declaration public static bool IsCrossInside Field Value Type Description Boolean true to show the major cross tic marks, false otherwise Remarks The \"cross\" tics are a special, additional set of tic marks that always appear on the actual axis, even if it has been shifted due to the Cross setting. The other tic marks are always fixed to the edges of the Rect . The cross tics are normally not displayed, since, if CrossAuto is true, they will exactly overlay the \"normal\" and \"inside\" tics. If CrossAuto is false, then you will most likely want to enable the cross tics. The major tic spacing is controlled by MajorStep . | Improve this Doc View Source IsCrossOutside The default display mode for the Axis major outside \"cross\" tic marks ( IsCrossOutside property). Declaration public static bool IsCrossOutside Field Value Type Description Boolean true to show the major cross tic marks, false otherwise Remarks The \"cross\" tics are a special, additional set of tic marks that always appear on the actual axis, even if it has been shifted due to the Cross setting. The other tic marks are always fixed to the edges of the Rect . The cross tics are normally not displayed, since, if CrossAuto is true, they will exactly overlay the \"normal\" and \"inside\" tics. If CrossAuto is false, then you will most likely want to enable the cross tics. The major tic spacing is controlled by MajorStep . | Improve this Doc View Source IsInside The display mode for the Axis major inside tic marks ( IsInside property). The major tic spacing is controlled by MajorStep . Declaration public static bool IsInside Field Value Type Description Boolean true to show the major tic marks (inside the axis), false otherwise | Improve this Doc View Source IsOpposite The display mode for the Axis major opposite tic marks ( IsOpposite property). The major tic spacing is controlled by MajorStep . Declaration public static bool IsOpposite Field Value Type Description Boolean true to show the major tic marks (inside the axis on the opposite side), false otherwise | Improve this Doc View Source IsOutside The display mode for the Axis major outside tic marks ( IsOutside property). The major tic spacing is controlled by MajorStep . Declaration public static bool IsOutside Field Value Type Description Boolean true to show the major tic marks (outside the axis), false otherwise | Improve this Doc View Source PenWidth The default pen width for drawing the Axis tic marks. ( PenWidth property). Units are in points (1/72 inch). Declaration public static float PenWidth Field Value Type Description Single | Improve this Doc View Source Size The default size for the Axis tic marks. ( Size property). Units are in points (1/72 inch). Declaration public static float Size Field Value Type Description Single"
  },
  "api/ZedGraph.MajorTic.html": {
    "href": "api/ZedGraph.MajorTic.html",
    "title": "Class MajorTic",
    "keywords": "Class MajorTic Class that holds the specific properties for the major tics. Inherits from MinorTic . Inheritance Object MinorTic MajorTic Implements ICloneable ISerializable Inherited Members MinorTic.Color MinorTic.Size MinorTic.ScaledTic(Single) MinorTic.IsAllTics MinorTic.IsOutside MinorTic.IsInside MinorTic.IsOpposite MinorTic.IsCrossOutside MinorTic.IsCrossInside MinorTic.PenWidth MinorTic.schema Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class MajorTic : MinorTic, ICloneable, ISerializable Constructors | Improve this Doc View Source MajorTic() Default constructor for MajorTic . Declaration public MajorTic() | Improve this Doc View Source MajorTic(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected MajorTic(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source MajorTic(MajorTic) Copy constructor. Declaration public MajorTic(MajorTic rhs) Parameters Type Name Description MajorTic rhs The MajorTic that is to be copied. Fields | Improve this Doc View Source schema2 Current schema value that defines the version of the serialized file Declaration public const int schema2 = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source IsBetweenLabels Gets or sets a property that determines whether or not the major tics will be drawn inbetween the labels, rather than right at the labels. Declaration public bool IsBetweenLabels { get; set; } Property Value Type Description Boolean true to place the text between the labels for text axes, false otherwise Remarks Note that this setting is only applicable if Type = Text . See Also IsOutside IsInside IsOpposite IsCrossOutside IsCrossInside Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public MajorTic Clone() Returns Type Description MajorTic A new, independent copy of this class | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides MinorTic.GetObjectData(SerializationInfo, StreamingContext) Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.Margin.Default.html": {
    "href": "api/ZedGraph.Margin.Default.html",
    "title": "Class Margin.Default",
    "keywords": "Class Margin.Default A simple struct that defines the default property values for the Margin class. Inheritance Object Margin.Default Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public class Default Fields | Improve this Doc View Source Bottom The default value for the Bottom property, which is the size of the space on the bottom side of the Rect . Declaration public static float Bottom Field Value Type Description Single Units are points (1/72 inch) | Improve this Doc View Source Left The default value for the Left property, which is the size of the space on the left side of the Rect . Declaration public static float Left Field Value Type Description Single Units are points (1/72 inch) | Improve this Doc View Source Right The default value for the Right property, which is the size of the space on the right side of the Rect . Declaration public static float Right Field Value Type Description Single Units are points (1/72 inch) | Improve this Doc View Source Top The default value for the Top property, which is the size of the space on the top side of the Rect . Declaration public static float Top Field Value Type Description Single Units are points (1/72 inch)"
  },
  "api/ZedGraph.Margin.html": {
    "href": "api/ZedGraph.Margin.html",
    "title": "Class Margin",
    "keywords": "Class Margin Class that handles that stores the margin properties for the GraphPane Inheritance Object Margin Implements ICloneable ISerializable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class Margin : ICloneable, ISerializable Constructors | Improve this Doc View Source Margin() Constructor to build a Margin from the default values. Declaration public Margin() | Improve this Doc View Source Margin(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected Margin(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source Margin(Margin) Copy constructor Declaration public Margin(Margin rhs) Parameters Type Name Description Margin rhs the Margin instance to be copied. Fields | Improve this Doc View Source _bottom Private fields that store the size of the margin around the edge of the pane which will be kept blank. Use the public properties Left , Right , Top , Bottom to access these values. Declaration [CLSCompliant(false)] protected float _bottom Field Value Type Description Single Units are points (1/72 inch) | Improve this Doc View Source _left Private fields that store the size of the margin around the edge of the pane which will be kept blank. Use the public properties Left , Right , Top , Bottom to access these values. Declaration [CLSCompliant(false)] protected float _left Field Value Type Description Single Units are points (1/72 inch) | Improve this Doc View Source _right Private fields that store the size of the margin around the edge of the pane which will be kept blank. Use the public properties Left , Right , Top , Bottom to access these values. Declaration [CLSCompliant(false)] protected float _right Field Value Type Description Single Units are points (1/72 inch) | Improve this Doc View Source _top Private fields that store the size of the margin around the edge of the pane which will be kept blank. Use the public properties Left , Right , Top , Bottom to access these values. Declaration [CLSCompliant(false)] protected float _top Field Value Type Description Single Units are points (1/72 inch) | Improve this Doc View Source schema Current schema value that defines the version of the serialized file Declaration public const int schema = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source All Concurrently sets all outer margin values to a single value. Declaration public float All { set; } Property Value Type Description Single This value is in units of points (1/72 inch), and is scaled linearly with the graph size. See Also IsFontsScaled Bottom Left Right Top | Improve this Doc View Source Bottom Gets or sets a float value that determines the margin area between the bottom edge of the Rect rectangle and the features of the graph. Declaration public float Bottom { get; set; } Property Value Type Description Single This value is in units of points (1/72 inch), and is scaled linearly with the graph size. See Also Bottom IsFontsScaled Left Right Top | Improve this Doc View Source Left Gets or sets a float value that determines the margin area between the left edge of the Rect rectangle and the features of the graph. Declaration public float Left { get; set; } Property Value Type Description Single This value is in units of points (1/72 inch), and is scaled linearly with the graph size. See Also Left IsFontsScaled Right Top Bottom | Improve this Doc View Source Right Gets or sets a float value that determines the margin area between the right edge of the Rect rectangle and the features of the graph. Declaration public float Right { get; set; } Property Value Type Description Single This value is in units of points (1/72 inch), and is scaled linearly with the graph size. See Also Right IsFontsScaled Left Top Bottom | Improve this Doc View Source Top Gets or sets a float value that determines the margin area between the top edge of the Rect rectangle and the features of the graph. Declaration public float Top { get; set; } Property Value Type Description Single This value is in units of points (1/72 inch), and is scaled linearly with the graph size. See Also Top IsFontsScaled Left Right Bottom Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public Margin Clone() Returns Type Description Margin A new, independent copy of this class | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public virtual void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.MasterPane.Default.html": {
    "href": "api/ZedGraph.MasterPane.Default.html",
    "title": "Struct MasterPane.Default",
    "keywords": "Struct MasterPane.Default A simple struct that defines the default property values for the MasterPane class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source InnerPaneGap The default value for the InnerPaneGap property. This is the size of the margin between adjacent GraphPane objects, in units of points (1/72 inch). Declaration public static float InnerPaneGap Field Value Type Description Single See Also InnerPaneGap | Improve this Doc View Source IsCommonScaleFactor The default value for the IsCommonScaleFactor property. Declaration public static bool IsCommonScaleFactor Field Value Type Description Boolean | Improve this Doc View Source IsShowLegend The default value for the IsVisible property for the MasterPane class. Declaration public static bool IsShowLegend Field Value Type Description Boolean | Improve this Doc View Source IsUniformLegendEntries The default value for the IsUniformLegendEntries property. Declaration public static bool IsUniformLegendEntries Field Value Type Description Boolean | Improve this Doc View Source PaneLayout The default pane layout for DoLayout(Graphics) method calls. Declaration public static PaneLayout PaneLayout Field Value Type Description PaneLayout See Also SetLayout(Graphics, PaneLayout) SetLayout(Graphics, Int32, Int32) SetLayout(Graphics, Boolean, Int32[]) SetLayout(Graphics, Boolean, Int32[], Single[]) ReSize(Graphics, RectangleF)"
  },
  "api/ZedGraph.MasterPane.html": {
    "href": "api/ZedGraph.MasterPane.html",
    "title": "Class MasterPane",
    "keywords": "Class MasterPane A collection class containing a list of GraphPane objects organized together in some form. Inheritance Object PaneBase MasterPane Implements ICloneable ISerializable IDeserializationCallback Inherited Members PaneBase._rect PaneBase._title PaneBase._legend PaneBase._tag PaneBase._isFontsScaled PaneBase._isPenWidthScaled PaneBase._fill PaneBase._border PaneBase._graphObjList PaneBase._baseDimension PaneBase._titleGap PaneBase.Rect PaneBase.Legend PaneBase.Title PaneBase.Tag PaneBase.Border PaneBase.Fill PaneBase.GraphObjList PaneBase.Margin PaneBase.BaseDimension PaneBase.TitleGap PaneBase.IsFontsScaled PaneBase.IsPenWidthScaled PaneBase.ShallowClone() PaneBase.schema PaneBase.CalcClientRect(Graphics, Single) PaneBase.DrawPaneFrame(Graphics, Single) PaneBase.DrawTitle(Graphics, Single) PaneBase.CalcScaleFactor() PaneBase.ScaledPenWidth(Single, Single) PaneBase.GetImage() PaneBase.GetImage(Boolean) PaneBase.GetImage(Int32, Int32, Single, Boolean) PaneBase.GetImage(Int32, Int32, Single) PaneBase.GetMetafile(Int32, Int32, Boolean) PaneBase.GetMetafile(Int32, Int32) PaneBase.GetMetafile() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class MasterPane : PaneBase, ICloneable, ISerializable, IDeserializationCallback Constructors | Improve this Doc View Source MasterPane() Default constructor for the class. Sets the Rect to (0, 0, 500, 375). Declaration public MasterPane() | Improve this Doc View Source MasterPane(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected MasterPane(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source MasterPane(String, RectangleF) Default constructor for the class. Specifies the Title of the MasterPane , and the size of the Rect . Declaration public MasterPane(string title, RectangleF paneRect) Parameters Type Name Description String title RectangleF paneRect | Improve this Doc View Source MasterPane(MasterPane) The Copy Constructor - Make a deep-copy clone of this class instance. Declaration public MasterPane(MasterPane rhs) Parameters Type Name Description MasterPane rhs The MasterPane object from which to copy Fields | Improve this Doc View Source schema2 Current schema value that defines the version of the serialized file Declaration public const int schema2 = 11 Field Value Type Description Int32 Properties | Improve this Doc View Source InnerPaneGap Gets or sets the size of the margin between adjacent GraphPane objects. Declaration public float InnerPaneGap { get; set; } Property Value Type Description Single The value is in points (1/72nd inch). Remarks This property is scaled according to CalcScaleFactor() , based on BaseDimension . The default value comes from InnerPaneGap . | Improve this Doc View Source IsAntiAlias Gets or sets a value that determines if all drawing operations for this MasterPane will be forced to operate in Anti-alias mode. Note that if this value is set to \"true\", it overrides the setting for sub-objects. Otherwise, the sub-object settings (such as IsAntiAlias ) will be honored. Declaration public bool IsAntiAlias { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsCommonScaleFactor Gets or sets a value that determines if the DoLayout(Graphics) method will automatically set the BaseDimension of each GraphPane in the PaneList such that the scale factors have the same value. Declaration public bool IsCommonScaleFactor { get; set; } Property Value Type Description Boolean Remarks The scale factors, calculated by CalcScaleFactor() , determine scaled font sizes, tic lengths, etc. This function will insure that for multiple graphpanes, a certain specified font size will be the same for all the panes. See Also SetLayout(Graphics, PaneLayout) SetLayout(Graphics, Int32, Int32) SetLayout(Graphics, Boolean, Int32[]) SetLayout(Graphics, Boolean, Int32[], Single[]) ReSize(Graphics, RectangleF) | Improve this Doc View Source IsUniformLegendEntries Gets or set the value of the IsUniformLegendEntries Declaration public bool IsUniformLegendEntries { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Item[Int32] Indexer to access the specified GraphPane object from PaneList by its ordinal position in the list. Declaration public GraphPane this[int index] { get; set; } Parameters Type Name Description Int32 index The ordinal position (zero-based) of the GraphPane object to be accessed. Property Value Type Description GraphPane A GraphPane object reference. | Improve this Doc View Source Item[String] Indexer to access the specified GraphPane object from PaneList by its Title string. Declaration public GraphPane this[string title] { get; } Parameters Type Name Description String title The string title of the GraphPane object to be accessed. Property Value Type Description GraphPane A GraphPane object reference. | Improve this Doc View Source PaneList Gets or sets the PaneList collection instance that holds the list of GraphPane objects that are included in this MasterPane . Declaration public PaneList PaneList { get; set; } Property Value Type Description PaneList See Also Add(GraphPane) Item[Int32] Methods | Improve this Doc View Source Add(GraphPane) Add a GraphPane object to the PaneList collection at the end of the list. Declaration public void Add(GraphPane pane) Parameters Type Name Description GraphPane pane A reference to the GraphPane object to be added See Also Add(Object) | Improve this Doc View Source AxisChange() Call AxisChange() for all GraphPane objects in the PaneList list. Declaration public void AxisChange() Remarks This overload of AxisChange just uses a throw-away bitmap as Graphics. If you have a Graphics instance available from your Windows Form, you should use the AxisChange(Graphics) overload instead. | Improve this Doc View Source AxisChange(Graphics) Call AxisChange() for all GraphPane objects in the PaneList list. Declaration public void AxisChange(Graphics g) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public MasterPane Clone() Returns Type Description MasterPane A new, independent copy of this class | Improve this Doc View Source CommonScaleFactor() Method that forces the scale factor calculations (via CalcScaleFactor() ), to give a common scale factor for all GraphPane objects in the PaneList . Declaration public void CommonScaleFactor() Remarks This will make it such that a given font size will result in the same output font size for all GraphPane 's. Note that this does not make the scale factor for the GraphPane 's the same as that of the MasterPane . See Also IsCommonScaleFactor | Improve this Doc View Source DoLayout(Graphics) Modify the GraphPane Rect sizes of each GraphPane such that they fit within the MasterPane in a pre-configured layout. Declaration public void DoLayout(Graphics g) Parameters Type Name Description Graphics g Remarks The SetLayout(Graphics, PaneLayout) method (and overloads) is used for setting the layout configuration. See Also SetLayout(Graphics, PaneLayout) SetLayout(Graphics, Int32, Int32) SetLayout(Graphics, Boolean, Int32[]) SetLayout(Graphics, Boolean, Int32[], Single[]) | Improve this Doc View Source Draw(Graphics) Render all the GraphPane objects in the PaneList to the specified graphics device. Declaration public override void Draw(Graphics g) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. Overrides PaneBase.Draw(Graphics) Remarks This method should be part of the Paint() update process. Calling this routine will redraw all features of all the GraphPane items. No preparation is required other than instantiated GraphPane objects that have been added to the list with the Add(GraphPane) method. | Improve this Doc View Source FindChartRect(PointF) Find the GraphPane within the PaneList that contains the within its Rect . Declaration public GraphPane FindChartRect(PointF mousePt) Parameters Type Name Description PointF mousePt The mouse point location where you want to search Returns Type Description GraphPane A GraphPane object that contains the mouse point, or null if no GraphPane was found. | Improve this Doc View Source FindNearestPaneObject(PointF, Graphics, out GraphPane, out Object, out Int32) Find the pane and the object within that pane that lies closest to the specified mouse (screen) point. Declaration public bool FindNearestPaneObject(PointF mousePt, Graphics g, out GraphPane pane, out object nearestObj, out int index) Parameters Type Name Description PointF mousePt The screen point, in pixel coordinates. Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that was clicked. Object nearestObj A reference to the nearest object to the specified screen point. This can be any of Axis , Legend , Title , TextObj , ArrowObj , or CurveItem . Note: If the pane title is selected, then the GraphPane object will be returned. Int32 index The index number of the item within the selected object (where applicable). For example, for a CurveItem object, will be the index number of the nearest data point, accessible via Points . index will be -1 if no data points are available. Returns Type Description Boolean true if a GraphPane was found, false otherwise. Remarks This method first finds the GraphPane within the list that contains the specified mouse point. It then calls the FindNearestObject(PointF, Graphics, out Object, out Int32) method to determine which object, if any, was clicked. With the exception of the , all the parameters in this method are identical to those in the FindNearestObject(PointF, Graphics, out Object, out Int32) method. If the mouse point lies within the Rect of any GraphPane item, then that pane will be returned (otherwise it will be null). Further, within the selected pane, if the mouse point is within the bounding box of any of the items (or in the case of ArrowObj and CurveItem , within NearestTol pixels), then the object will be returned. You must check the type of the object to determine what object was selected (for example, \"if ( object is Legend ) ...\"). The parameter returns the index number of the item within the selected object (such as the point number within a CurveItem object. See Also FindNearestObject(PointF, Graphics, out Object, out Int32) | Improve this Doc View Source FindPane(PointF) Find the GraphPane within the PaneList that contains the within its Rect . Declaration public GraphPane FindPane(PointF mousePt) Parameters Type Name Description PointF mousePt The mouse point location where you want to search Returns Type Description GraphPane A GraphPane object that contains the mouse point, or null if no GraphPane was found. | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides PaneBase.GetObjectData(SerializationInfo, StreamingContext) | Improve this Doc View Source OnDeserialization(Object) Respond to the callback when the MasterPane objects are fully initialized. Declaration public void OnDeserialization(object sender) Parameters Type Name Description Object sender | Improve this Doc View Source ReSize(Graphics) Redo the layout using the current size of the Rect , and also handle resizing the contents by calling DoLayout(Graphics) . Declaration public void ReSize(Graphics g) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. Remarks This method will use the pane layout that was specified by a call to SetLayout(Graphics, PaneLayout) . If SetLayout(Graphics, PaneLayout) has not previously been called, it will default to PaneLayout . See Also SetLayout(Graphics, PaneLayout) SetLayout(Graphics, Int32, Int32) SetLayout(Graphics, Boolean, Int32[]) SetLayout(Graphics, Boolean, Int32[], Single[]) | Improve this Doc View Source ReSize(Graphics, RectangleF) Change the size of the Rect , and also handle resizing the contents by calling DoLayout(Graphics) . Declaration public override void ReSize(Graphics g, RectangleF rect) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. RectangleF rect Overrides PaneBase.ReSize(Graphics, RectangleF) Remarks This method will use the pane layout that was specified by a call to SetLayout(Graphics, PaneLayout) . If SetLayout(Graphics, PaneLayout) has not previously been called, it will default to PaneLayout . See Also SetLayout(Graphics, PaneLayout) SetLayout(Graphics, Int32, Int32) SetLayout(Graphics, Boolean, Int32[]) SetLayout(Graphics, Boolean, Int32[], Single[]) | Improve this Doc View Source SetLayout(Graphics, Boolean, Int32[]) Automatically set all of the GraphPane Rect 's in the list to the specified configuration. Declaration public void SetLayout(Graphics g, bool isColumnSpecified, int[] countList) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally created with a call to the CreateGraphics() method of the Control or Form. Boolean isColumnSpecified Specifies whether the number of columns in each row, or the number of rows in each column will be specified. A value of true indicates the number of columns in each row are specified in . Int32 [] countList An integer array specifying either the number of columns in each row or the number of rows in each column, depending on the value of . Remarks This method specifies the number of rows in each column, or the number of columns in each row, allowing for irregular layouts. Overloads are available that provide other layout options. See Also SetLayout(Graphics, PaneLayout) SetLayout(Graphics, Int32, Int32) SetLayout(Graphics, Boolean, Int32[], Single[]) | Improve this Doc View Source SetLayout(Graphics, Boolean, Int32[], Single[]) Automatically set all of the GraphPane Rect 's in the list to the specified configuration. Declaration public void SetLayout(Graphics g, bool isColumnSpecified, int[] countList, float[] proportion) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally created with a call to the CreateGraphics() method of the Control or Form. Boolean isColumnSpecified Specifies whether the number of columns in each row, or the number of rows in each column will be specified. A value of true indicates the number of columns in each row are specified in . Int32 [] countList An integer array specifying either the number of columns in each row or the number of rows in each column, depending on the value of . Single [] proportion An array of float values specifying proportional sizes for each row or column. Note that these proportions apply to the non-specified dimension -- that is, if is true, then these proportions apply to the row heights, and if is false, then these proportions apply to the column widths. The values in this array are arbitrary floats -- the dimension of any given row or column is that particular proportional value divided by the sum of all the values. For example, let be true, and is an array with values of { 1.0, 2.0, 3.0 }. The sum of those values is 6.0. Therefore, the first row is 1/6th of the available height, the second row is 2/6th's of the available height, and the third row is 3/6th's of the available height. Remarks This method specifies the number of panes in each row or column, allowing for irregular layouts. See Also SetLayout(Graphics, PaneLayout) SetLayout(Graphics, Int32, Int32) SetLayout(Graphics, Boolean, Int32[]) | Improve this Doc View Source SetLayout(Graphics, Int32, Int32) Automatically set all of the GraphPane Rect 's in the list to a reasonable configuration. Declaration public void SetLayout(Graphics g, int rows, int columns) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally created with a call to the CreateGraphics() method of the Control or Form. Int32 rows The number of rows of GraphPane objects to include in the layout Int32 columns The number of columns of GraphPane objects to include in the layout Remarks This method explicitly specifies the number of rows and columns to use in the layout, and all GraphPane objects will have the same size. Overloads are available that provide other layout options See Also SetLayout(Graphics, PaneLayout) SetLayout(Graphics, Boolean, Int32[]) SetLayout(Graphics, Boolean, Int32[], Single[]) | Improve this Doc View Source SetLayout(Graphics, PaneLayout) Automatically set all of the GraphPane Rect 's in the list to a pre-defined layout configuration from a PaneLayout enumeration. Declaration public void SetLayout(Graphics g, PaneLayout paneLayout) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally created with a call to the CreateGraphics() method of the Control or Form. PaneLayout paneLayout A PaneLayout enumeration that describes how the panes should be laid out within the Rect . Remarks This method uses a PaneLayout enumeration to describe the type of layout to be used. Overloads are available that provide other layout options See Also SetLayout(Graphics, Int32, Int32) SetLayout(Graphics, Boolean, Int32[]) SetLayout(Graphics, Boolean, Int32[], Single[]) Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() to make a deep copy. Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable System.Runtime.Serialization.IDeserializationCallback"
  },
  "api/ZedGraph.MinorGrid.Default.html": {
    "href": "api/ZedGraph.MinorGrid.Default.html",
    "title": "Struct MinorGrid.Default",
    "keywords": "Struct MinorGrid.Default A simple struct that defines the default property values for the MinorGrid class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source Color The default color for the Axis minor grid lines ( Color property). This color only affects the minor grid lines. Declaration public static Color Color Field Value Type Description Color | Improve this Doc View Source DashOff The default \"dash off\" size for drawing the Axis minor grid ( DashOff property). Units are in points (1/72 inch). Declaration public static float DashOff Field Value Type Description Single | Improve this Doc View Source DashOn The default \"dash on\" size for drawing the Axis minor grid ( DashOn property). Units are in points (1/72 inch). Declaration public static float DashOn Field Value Type Description Single | Improve this Doc View Source IsVisible The default display mode for the Axis minor grid lines ( IsVisible property). true to show the minor grid lines, false to hide them. Declaration public static bool IsVisible Field Value Type Description Boolean | Improve this Doc View Source PenWidth The default pen width for drawing the Axis minor grid ( PenWidth property). Units are in points (1/72 inch). Declaration public static float PenWidth Field Value Type Description Single"
  },
  "api/ZedGraph.MinorGrid.html": {
    "href": "api/ZedGraph.MinorGrid.html",
    "title": "Class MinorGrid",
    "keywords": "Class MinorGrid Class that holds the specific properties for the minor grid. Inheritance Object MinorGrid MajorGrid Implements ICloneable ISerializable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class MinorGrid : ICloneable, ISerializable Constructors | Improve this Doc View Source MinorGrid() Default constructor Declaration public MinorGrid() | Improve this Doc View Source MinorGrid(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected MinorGrid(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source MinorGrid(MinorGrid) Copy constructor Declaration public MinorGrid(MinorGrid rhs) Parameters Type Name Description MinorGrid rhs The source MinorGrid to be copied. Fields | Improve this Doc View Source schema Current schema value that defines the version of the serialized file Declaration public const int schema = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source Color The color to use for drawing this Axis grid. Declaration public Color Color { get; set; } Property Value Type Description Color The color is defined using the Color class See Also Color PenWidth | Improve this Doc View Source DashOff The \"Dash Off\" mode for drawing the grid. Declaration public float DashOff { get; set; } Property Value Type Description Single The dash off length is defined in points (1/72 inch) Remarks This is the distance, in points (1/72 inch), of the spaces between the dash segments that make up the dashed grid lines. See Also DashOn IsVisible DashOff | Improve this Doc View Source DashOn The \"Dash On\" mode for drawing the grid. Declaration public float DashOn { get; set; } Property Value Type Description Single The dash on length is defined in points (1/72 inch) Remarks This is the distance, in points (1/72 inch), of the dash segments that make up the dashed grid lines. See Also DashOff IsVisible DashOn | Improve this Doc View Source IsVisible Gets or sets a value that determines if the major Axis gridlines (at each labeled value) will be visible Declaration public bool IsVisible { get; set; } Property Value Type Description Boolean true to show the gridlines, false otherwise See Also IsVisible Color PenWidth DashOn DashOff IsVisible | Improve this Doc View Source PenWidth The pen width used for drawing the grid lines. Declaration public float PenWidth { get; set; } Property Value Type Description Single The grid pen width is defined in points (1/72 inch) See Also IsVisible PenWidth Color Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public MinorGrid Clone() Returns Type Description MinorGrid A new, independent copy of this class | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public virtual void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.MinorTic.Default.html": {
    "href": "api/ZedGraph.MinorTic.Default.html",
    "title": "Struct MinorTic.Default",
    "keywords": "Struct MinorTic.Default A simple struct that defines the default property values for the MinorTic class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source Color The default color for minor tics ( Color property). Declaration public static Color Color Field Value Type Description Color | Improve this Doc View Source IsCrossInside The default display mode for the Axis minor inside \"cross\" tic marks ( IsCrossInside property). Declaration public static bool IsCrossInside Field Value Type Description Boolean true to show the major cross tic marks, false otherwise Remarks The \"cross\" tics are a special, additional set of tic marks that always appear on the actual axis, even if it has been shifted due to the Cross setting. The other tic marks are always fixed to the edges of the Rect . The cross tics are normally not displayed, since, if CrossAuto is true, they will exactly overlay the \"normal\" and \"inside\" tics. If CrossAuto is false, then you will most likely want to enable the cross tics. The major tic spacing is controlled by MinorStep . | Improve this Doc View Source IsCrossOutside The default display mode for the Axis minor outside \"cross\" tic marks ( IsCrossOutside property). Declaration public static bool IsCrossOutside Field Value Type Description Boolean true to show the major cross tic marks, false otherwise Remarks The \"cross\" tics are a special, additional set of tic marks that always appear on the actual axis, even if it has been shifted due to the Cross setting. The other tic marks are always fixed to the edges of the Rect . The cross tics are normally not displayed, since, if CrossAuto is true, they will exactly overlay the \"normal\" and \"inside\" tics. If CrossAuto is false, then you will most likely want to enable the cross tics. The minor tic spacing is controlled by MinorStep . | Improve this Doc View Source IsInside The display mode for the Axis minor inside tic marks ( IsInside property). The minor tic spacing is controlled by MinorStep . Declaration public static bool IsInside Field Value Type Description Boolean true to show the minor tic marks (inside the axis), false otherwise | Improve this Doc View Source IsOpposite The display mode for the Axis minor opposite tic marks ( IsOpposite property). The minor tic spacing is controlled by MinorStep . Declaration public static bool IsOpposite Field Value Type Description Boolean true to show the minor tic marks (inside the axis on the opposite side), false otherwise | Improve this Doc View Source IsOutside The display mode for the Axis minor outside tic marks ( IsOutside property). The minor tic spacing is controlled by MinorStep . Declaration public static bool IsOutside Field Value Type Description Boolean true to show the minor tic marks (outside the axis), false otherwise | Improve this Doc View Source PenWidth The default pen width for drawing the Axis tic marks. ( PenWidth property). Units are in points (1/72 inch). Declaration public static float PenWidth Field Value Type Description Single | Improve this Doc View Source Size The default size for the Axis minor tic marks. ( Size property). Units are in points (1/72 inch). Declaration public static float Size Field Value Type Description Single"
  },
  "api/ZedGraph.MinorTic.html": {
    "href": "api/ZedGraph.MinorTic.html",
    "title": "Class MinorTic",
    "keywords": "Class MinorTic Class that holds the specific properties for the minor tics. Inheritance Object MinorTic MajorTic Implements ICloneable ISerializable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class MinorTic : ICloneable, ISerializable Constructors | Improve this Doc View Source MinorTic() Default Constructor Declaration public MinorTic() | Improve this Doc View Source MinorTic(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected MinorTic(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source MinorTic(MinorTic) Copy constructor. Declaration public MinorTic(MinorTic rhs) Parameters Type Name Description MinorTic rhs The MinorTic that is to be copied. Fields | Improve this Doc View Source schema Current schema value that defines the version of the serialized file Declaration public const int schema = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source Color The color to use for drawing the tics of this class instance Declaration public Color Color { get; set; } Property Value Type Description Color The color is defined using the Color class See Also Color IsOutside IsVisible | Improve this Doc View Source IsAllTics This is convenience property sets the status of all the different tic properties in this instance to the same value. true to activate all tics, false to clear all tics. Declaration public bool IsAllTics { set; } Property Value Type Description Boolean Remarks This setting does not persist. That is, you can clear all the tics with IsAllTics = false, then activate them individually (example: IsOutside = true). See Also IsOutside IsInside IsOpposite IsCrossInside IsCrossOutside | Improve this Doc View Source IsCrossInside Gets or sets the display mode for the Axis major inside \"cross\" tic marks. Declaration public bool IsCrossInside { get; set; } Property Value Type Description Boolean true to show the major cross tic marks, false otherwise Remarks The \"cross\" tics are a special, additional set of tic marks that always appear on the actual axis, even if it has been shifted due to the Cross setting. The other tic marks are always fixed to the edges of the Rect . The cross tics are normally not displayed, since, if CrossAuto is true, they will exactly overlay the \"normal\" and \"inside\" tics. If CrossAuto is false, then you will most likely want to enable the cross tics. The major tic spacing is controlled by MajorStep . | Improve this Doc View Source IsCrossOutside Gets or sets the display mode for the Axis major outside \"cross\" tic marks. Declaration public bool IsCrossOutside { get; set; } Property Value Type Description Boolean true to show the major cross tic marks, false otherwise Remarks The \"cross\" tics are a special, additional set of tic marks that always appear on the actual axis, even if it has been shifted due to the Cross setting. The other tic marks are always fixed to the edges of the Rect . The cross tics are normally not displayed, since, if CrossAuto is true, they will exactly overlay the \"normal\" and \"inside\" tics. If CrossAuto is false, then you will most likely want to enable the cross tics. The major tic spacing is controlled by MajorStep . | Improve this Doc View Source IsInside Gets or sets a property that determines whether or not the major inside tic marks are shown. Declaration public bool IsInside { get; set; } Property Value Type Description Boolean true to show the major inside tic marks, false otherwise Remarks These are the tic marks on the inside of the Axis border. The major tic spacing is controlled by MajorStep . See Also IsInside IsOutside IsInside IsOpposite IsCrossInside IsCrossOutside | Improve this Doc View Source IsOpposite Gets or sets a property that determines whether or not the major opposite tic marks are shown. Declaration public bool IsOpposite { get; set; } Property Value Type Description Boolean true to show the major opposite tic marks, false otherwise Remarks These are the tic marks on the inside of the Axis border on the opposite side from the axis. The major tic spacing is controlled by MajorStep . See Also IsOpposite IsOutside IsInside IsOpposite IsCrossInside IsCrossOutside | Improve this Doc View Source IsOutside Gets or sets a property that determines whether or not the minor outside tic marks are shown. Declaration public bool IsOutside { get; set; } Property Value Type Description Boolean true to show the minor outside tic marks, false otherwise Remarks These are the tic marks on the outside of the Axis border. The minor tic spacing is controlled by MinorStep . See Also IsOutside IsOutside IsInside IsOpposite IsCrossInside IsCrossOutside | Improve this Doc View Source PenWidth Gets or sets the pen width to be used when drawing the tic marks for this Axis Declaration public float PenWidth { get; set; } Property Value Type Description Single The pen width is defined in points (1/72 inch) See Also PenWidth IsOutside Color | Improve this Doc View Source Size The length of the major tic marks. Declaration public float Size { get; set; } Property Value Type Description Single The tic size is measured in points (1/72 inch) Remarks This length will be scaled according to the CalcScaleFactor() for the GraphPane See Also Size IsOutside IsVisible Color Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public MinorTic Clone() Returns Type Description MinorTic A new, independent copy of this class | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public virtual void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source ScaledTic(Single) Calculate the scaled tic size for this Axis Declaration public float ScaledTic(float scaleFactor) Parameters Type Name Description Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Returns Type Description Single The scaled tic size, in points (1/72 inch) See Also Size FontSpec CalcScaleFactor () Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.NoDupePointList.html": {
    "href": "api/ZedGraph.NoDupePointList.html",
    "title": "Class NoDupePointList",
    "keywords": "Class NoDupePointList A collection class to maintain a set of samples. Inheritance Object List < DataPoint > NoDupePointList Implements IList < DataPoint > ICollection < DataPoint > IEnumerable < DataPoint > IList ICollection IEnumerable IPointListEdit IPointList ICloneable Inherited Members System.Collections.Generic.List<ZedGraph.DataPoint>.System.Collections.IList.get_Item(System.Int32) System.Collections.Generic.List<ZedGraph.DataPoint>.System.Collections.IList.set_Item(System.Int32, System.Object) List<DataPoint>.Add(DataPoint) List<DataPoint>.AddRange(IEnumerable<DataPoint>) List<DataPoint>.AsReadOnly() List<DataPoint>.BinarySearch(Int32, Int32, DataPoint, IComparer<DataPoint>) List<DataPoint>.BinarySearch(DataPoint) List<DataPoint>.BinarySearch(DataPoint, IComparer<DataPoint>) List<DataPoint>.Clear() List<DataPoint>.Contains(DataPoint) List<DataPoint>.ConvertAll<TOutput>(Converter<DataPoint, TOutput>) List<DataPoint>.CopyTo(Int32, DataPoint[], Int32, Int32) List<DataPoint>.CopyTo(DataPoint[]) List<DataPoint>.CopyTo(DataPoint[], Int32) List<DataPoint>.Exists(Predicate<DataPoint>) List<DataPoint>.Find(Predicate<DataPoint>) List<DataPoint>.FindAll(Predicate<DataPoint>) List<DataPoint>.FindIndex(Int32, Int32, Predicate<DataPoint>) List<DataPoint>.FindIndex(Int32, Predicate<DataPoint>) List<DataPoint>.FindIndex(Predicate<DataPoint>) List<DataPoint>.FindLast(Predicate<DataPoint>) List<DataPoint>.FindLastIndex(Int32, Int32, Predicate<DataPoint>) List<DataPoint>.FindLastIndex(Int32, Predicate<DataPoint>) List<DataPoint>.FindLastIndex(Predicate<DataPoint>) List<DataPoint>.ForEach(Action<DataPoint>) List<DataPoint>.GetEnumerator() List<DataPoint>.GetRange(Int32, Int32) List<DataPoint>.IndexOf(DataPoint) List<DataPoint>.IndexOf(DataPoint, Int32) List<DataPoint>.IndexOf(DataPoint, Int32, Int32) List<DataPoint>.Insert(Int32, DataPoint) List<DataPoint>.InsertRange(Int32, IEnumerable<DataPoint>) List<DataPoint>.LastIndexOf(DataPoint) List<DataPoint>.LastIndexOf(DataPoint, Int32) List<DataPoint>.LastIndexOf(DataPoint, Int32, Int32) List<DataPoint>.Remove(DataPoint) List<DataPoint>.RemoveAll(Predicate<DataPoint>) List<DataPoint>.RemoveAt(Int32) List<DataPoint>.RemoveRange(Int32, Int32) List<DataPoint>.Reverse() List<DataPoint>.Reverse(Int32, Int32) List<DataPoint>.Sort() List<DataPoint>.Sort(IComparer<DataPoint>) List<DataPoint>.Sort(Comparison<DataPoint>) List<DataPoint>.Sort(Int32, Int32, IComparer<DataPoint>) List<DataPoint>.IEnumerable<DataPoint>.GetEnumerator() List<DataPoint>.ICollection.CopyTo(Array, Int32) List<DataPoint>.IEnumerable.GetEnumerator() List<DataPoint>.IList.Add(Object) List<DataPoint>.IList.Contains(Object) List<DataPoint>.IList.IndexOf(Object) List<DataPoint>.IList.Insert(Int32, Object) List<DataPoint>.IList.Remove(Object) List<DataPoint>.ToArray() List<DataPoint>.TrimExcess() List<DataPoint>.TrueForAll(Predicate<DataPoint>) List<DataPoint>.Capacity List<DataPoint>.ICollection<DataPoint>.IsReadOnly List<DataPoint>.ICollection.IsSynchronized List<DataPoint>.ICollection.SyncRoot List<DataPoint>.IList.IsFixedSize List<DataPoint>.IList.IsReadOnly List<DataPoint>.IList.Item[Int32] Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class NoDupePointList : List<DataPoint>, IList<DataPoint>, ICollection<DataPoint>, IEnumerable<DataPoint>, IList, ICollection, IEnumerable, IPointListEdit, IPointList, ICloneable Remarks This type, intended for very large datasets, will reduce the number of points displayed by eliminating individual points that overlay (at the same pixel location) on the graph. Note that this type probably does not make sense for line plots, but is intended primarily for scatter plots. Constructors | Improve this Doc View Source NoDupePointList() default constructor Declaration public NoDupePointList() | Improve this Doc View Source NoDupePointList(NoDupePointList) copy constructor -- this returns a copy of the structure, but it does not duplicate the data (it just keeps a reference to the original) Declaration public NoDupePointList(NoDupePointList rhs) Parameters Type Name Description NoDupePointList rhs The NoDupePointList to be copied Fields | Improve this Doc View Source _filteredCount Protected field that stores the number of data points after filtering (e.g., FilterData(GraphPane, Axis, Axis) has been called). The Count property returns the total count for an unfiltered dataset, or _filteredCount for a dataset that has been filtered. Declaration [CLSCompliant(false)] protected int _filteredCount Field Value Type Description Int32 | Improve this Doc View Source _filterMode Protected field that stores a value that determines how close a point must be to a prior neighbor in order to be filtered out. Use the public property FilterMode to access this value. Declaration [CLSCompliant(false)] protected int _filterMode Field Value Type Description Int32 | Improve this Doc View Source _isFiltered Protected field that stores a value indicating whether or not the data have been filtered. If the data have not been filtered, then Count will be equal to TotalCount . Use the public property IsFiltered to access this value. Declaration [CLSCompliant(false)] protected bool _isFiltered Field Value Type Description Boolean | Improve this Doc View Source _visibleIndicies Protected array of indices for all the points that are currently visible. This only applies if IsFiltered is true. Declaration [CLSCompliant(false)] protected int[] _visibleIndicies Field Value Type Description Int32 [] Properties | Improve this Doc View Source Count Gets the number of active samples in the collection. This is the number of samples that are non-duplicates. See the TotalCount property to get the total number of samples in the list. Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source FilterMode Gets or sets a value that determines how close a point must be to a prior neighbor in order to be filtered out. Declaration public int FilterMode { get; set; } Property Value Type Description Int32 Remarks A value of 0 indicates that subsequent points must coincide exactly at the same pixel location. A value of 1 or more indicates that number of pixels distance from a prior point that will cause a new point to be filtered out. For example, a value of 2 means that, once a particular pixel location is taken, any subsequent point that lies within 2 pixels of that location will be filtered out. | Improve this Doc View Source IsFiltered Gets a value indicating whether or not the data have been filtered. If the data have not been filtered, then Count will be equal to TotalCount . Declaration public bool IsFiltered { get; } Property Value Type Description Boolean | Improve this Doc View Source Item[Int32] Indexer: get the DataPoint instance at the specified ordinal position in the list Declaration public PointPair this[int index] { get; set; } Parameters Type Name Description Int32 index The ordinal position in the list of points Property Value Type Description PointPair Returns a PointPair instance. The Z and Tag properties will be defaulted to Missing and null, respectively. Remarks This method will throw an exception if the index is out of range. This can happen if the index is less than the number of filtered values, or if data points are removed from a filtered dataset with updating the filter (by calling FilterData(GraphPane, Axis, Axis) ). | Improve this Doc View Source TotalCount Gets the total number of samples in the collection. See the Count property to get the number of active (non-duplicate) samples in the list. Declaration public int TotalCount { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Add(Double, Double) Append a point to the collection Declaration public void Add(double x, double y) Parameters Type Name Description Double x The x value of the point to append Double y The y value of the point to append | Improve this Doc View Source Add(PointPair) Append a data point to the collection Declaration public void Add(PointPair pt) Parameters Type Name Description PointPair pt The PointPair value to append | Improve this Doc View Source ClearFilter() Clears any filtering previously done by a call to FilterData(GraphPane, Axis, Axis) . After calling this method, all data points will be visible, and Count will be equal to TotalCount . Declaration public void ClearFilter() | Improve this Doc View Source Clone() typesafe clone method Declaration public NoDupePointList Clone() Returns Type Description NoDupePointList A new cloned NoDupePointList. This returns a copy of the structure, but it does not duplicate the data (it just keeps a reference to the original) | Improve this Doc View Source FilterData(GraphPane, Axis, Axis) Go through the collection, and hide (filter out) any points that fall on the same pixel location as a previously included point. Declaration public void FilterData(GraphPane pane, Axis xAxis, Axis yAxis) Parameters Type Name Description GraphPane pane The GraphPane into which the data will be plotted. Axis xAxis The Axis class to be used in the X direction for plotting these data. This can be an XAxis or a X2Axis . Axis yAxis The Axis class to be used in the Y direction for plotting these data. This can be a YAxis or a Y2Axis , and can be a primary or secondary axis (if multiple Y or Y2 axes are being used). Remarks This method does not delete any points, it just temporarily hides them until the next call to FilterData(GraphPane, Axis, Axis) or ClearFilter() . You should call FilterData(GraphPane, Axis, Axis) once your collection of points has been constructed. You may need to call FilterData(GraphPane, Axis, Axis) again if you add points, or if the chart rect changes size (by resizing, printing, image save, etc.), or if the scale range changes. You must call AxisChange() before calling this method so that the Rect and the scale ranges are valid. This method is not valid for ordinal axes (but ordinal axes don't make sense for very large datasets anyway). | Improve this Doc View Source GetDataPointAt(Int32) Protected method to access the internal DataPoint collection, without any translation to a PointPair. Declaration protected DataPoint GetDataPointAt(int index) Parameters Type Name Description Int32 index The ordinal position of the DataPoint of interest Returns Type Description DataPoint Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Declaration object ICloneable.Clone() Returns Type Description Object Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable IPointListEdit IPointList System.ICloneable"
  },
  "api/ZedGraph.OHLCBar.Default.html": {
    "href": "api/ZedGraph.OHLCBar.Default.html",
    "title": "Struct OHLCBar.Default",
    "keywords": "Struct OHLCBar.Default A simple struct that defines the default property values for the OHLCBar class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source IsAutoSize The default value for the IsAutoSize property. Declaration public static bool IsAutoSize Field Value Type Description Boolean | Improve this Doc View Source IsOpenCloseVisible The default display mode for symbols ( IsOpenCloseVisible property). true to display symbols, false to hide them. Declaration public static bool IsOpenCloseVisible Field Value Type Description Boolean | Improve this Doc View Source Size The default width for the candlesticks (see Size ), in units of points. Declaration public static float Size Field Value Type Description Single"
  },
  "api/ZedGraph.OHLCBar.html": {
    "href": "api/ZedGraph.OHLCBar.html",
    "title": "Class OHLCBar",
    "keywords": "Class OHLCBar This class handles the drawing of the curve OHLCBar objects. Inheritance Object LineBase OHLCBar JapaneseCandleStick Implements ICloneable ISerializable Inherited Members LineBase.Color LineBase.Style LineBase.DashOn LineBase.DashOff LineBase.Width LineBase.IsVisible LineBase.IsAntiAlias LineBase.GradientFill LineBase.schema0 LineBase.GetPen(PaneBase, Single) LineBase.GetPen(PaneBase, Single, PointPair) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class OHLCBar : LineBase, ICloneable, ISerializable Constructors | Improve this Doc View Source OHLCBar() Default constructor that sets all OHLCBar properties to default values as defined in the OHLCBar.Default class. Declaration public OHLCBar() | Improve this Doc View Source OHLCBar(Color) Default constructor that sets the Color as specified, and the remaining OHLCBar properties to default values as defined in the OHLCBar.Default class. Declaration public OHLCBar(Color color) Parameters Type Name Description Color color A Color value indicating the color of the symbol | Improve this Doc View Source OHLCBar(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected OHLCBar(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source OHLCBar(OHLCBar) The Copy Constructor Declaration public OHLCBar(OHLCBar rhs) Parameters Type Name Description OHLCBar rhs The OHLCBar object from which to copy Fields | Improve this Doc View Source _isAutoSize Private field that determines if the Size property will be calculated automatically based on the minimum axis scale step size between bars. Use the public property IsAutoSize to access this value. Declaration [CLSCompliant(false)] protected bool _isAutoSize Field Value Type Description Boolean | Improve this Doc View Source _isOpenCloseVisible Private field that stores the visibility of the OHLCBar open and close line segments (\"wings\"). Use the public property IsOpenCloseVisible to access this value. If this value is false, the wings will not be shown. Declaration [CLSCompliant(false)] protected bool _isOpenCloseVisible Field Value Type Description Boolean | Improve this Doc View Source _size Private field that stores the total width for the Opening/Closing line segments. Use the public property Size to access this value. Declaration [CLSCompliant(false)] protected float _size Field Value Type Description Single | Improve this Doc View Source schema Current schema value that defines the version of the serialized file Declaration public const int schema = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source IsAutoSize Gets or sets a value that determines if the Size property will be calculated automatically based on the minimum axis scale step size between bars. Declaration public bool IsAutoSize { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsOpenCloseVisible Gets or sets a property that shows or hides the OHLCBar open/close \"wings\". Declaration public bool IsOpenCloseVisible { get; set; } Property Value Type Description Boolean true to show the CandleStick wings, false to hide them See Also IsOpenCloseVisible | Improve this Doc View Source Size Gets or sets the total width to be used for drawing the opening/closing line segments (\"wings\") of the OHLCBar items. Units are points. Declaration public float Size { get; set; } Property Value Type Description Single Size in points (1/72 inch) Remarks The size of the candlesticks can be set by this value, which is then scaled according to the scaleFactor (see CalcScaleFactor() ). Alternatively, if IsAutoSize is true, the bar width will be set according to the maximum available cluster width less the cluster gap (see GetClusterWidth() and MinClusterGap ). That is, if IsAutoSize is true, then the value of Size will be ignored. If you modify the value of Size, then IsAutoSize will be automatically set to false. See Also Size Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public OHLCBar Clone() Returns Type Description OHLCBar A new, independent copy of this class | Improve this Doc View Source Draw(Graphics, GraphPane, Boolean, Single, Single, Single, Single, Single, Single, Pen) Draw the OHLCBar to the specified Graphics device at the specified location. Declaration public void Draw(Graphics g, GraphPane pane, bool isXBase, float pixBase, float pixHigh, float pixLow, float pixOpen, float pixClose, float halfSize, Pen pen) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Boolean isXBase boolean value that indicates if the \"base\" axis for this OHLCBar is the X axis. True for an XAxis base, false for a YAxis or Y2Axis base. Single pixBase The independent axis position of the center of the candlestick in pixel units Single pixHigh The dependent axis position of the top of the candlestick in pixel units Single pixLow The dependent axis position of the bottom of the candlestick in pixel units Single pixOpen The dependent axis position of the opening value of the candlestick in pixel units Single pixClose The dependent axis position of the closing value of the candlestick in pixel units Single halfSize The scaled width of the candlesticks, pixels Pen pen A pen with attributes of Color and Width for this OHLCBar | Improve this Doc View Source Draw(Graphics, GraphPane, OHLCBarItem, Axis, Axis, Single) Draw all the OHLCBar 's to the specified Graphics device as a candlestick at each defined point. Declaration public void Draw(Graphics g, GraphPane pane, OHLCBarItem curve, Axis baseAxis, Axis valueAxis, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. OHLCBarItem curve A OHLCBarItem object representing the OHLCBar 's to be drawn. Axis baseAxis The Axis class instance that defines the base (independent) axis for the OHLCBar Axis valueAxis The Axis class instance that defines the value (dependent) axis for the OHLCBar Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. | Improve this Doc View Source GetBarWidth(GraphPane, Axis, Single) Returns the width of the candleStick, in pixels, based on the settings for Size and IsAutoSize . Declaration public float GetBarWidth(GraphPane pane, Axis baseAxis, float scaleFactor) Parameters Type Name Description GraphPane pane The parent GraphPane object. Axis baseAxis The Axis object that represents the bar base (independent axis). Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Returns Type Description Single The width of each bar, in pixel units | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides LineBase.GetObjectData(SerializationInfo, StreamingContext) Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.OHLCBarItem.html": {
    "href": "api/ZedGraph.OHLCBarItem.html",
    "title": "Class OHLCBarItem",
    "keywords": "Class OHLCBarItem Encapsulates a CandleStick curve type that displays a vertical (or horizontal) line displaying the range of data values at each sample point, plus an starting mark and an ending mark signifying the opening and closing value for the sample. Inheritance Object CurveItem OHLCBarItem Implements ICloneable ISerializable Inherited Members CurveItem._isX2Axis CurveItem._isY2Axis CurveItem._yAxisIndex CurveItem._isVisible CurveItem._isSelected CurveItem._isSelectable CurveItem._isOverrideOrdinal CurveItem._points CurveItem.Tag CurveItem.schema CurveItem.Label CurveItem.Color CurveItem.IsVisible CurveItem.IsSelected CurveItem.IsSelectable CurveItem.IsOverrideOrdinal CurveItem.IsX2Axis CurveItem.IsY2Axis CurveItem.YAxisIndex CurveItem.IsBar CurveItem.IsPie CurveItem.IsLine CurveItem.NPts CurveItem.Points CurveItem.Item[Int32] CurveItem.Link CurveItem.AddPoint(Double, Double) CurveItem.AddPoint(PointPair) CurveItem.Clear() CurveItem.RemovePoint(Int32) CurveItem.GetXAxis(GraphPane) CurveItem.GetYAxis(GraphPane) CurveItem.GetYAxisIndex(GraphPane) CurveItem.MakeUnique() CurveItem.MakeUnique(ColorSymbolRotator) CurveItem.GetRange(Double, Double, Double, Double, Boolean, Boolean, GraphPane) CurveItem.BaseAxis(GraphPane) CurveItem.ValueAxis(GraphPane) CurveItem.GetBarWidth(GraphPane) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class OHLCBarItem : CurveItem, ICloneable, ISerializable Remarks For this type to work properly, your IPointList must contain StockPt objects, rather than ordinary PointPair types. This is because the OHLCBarItem type actually displays 5 data values but the PointPair only stores 3 data values. The StockPt stores Date , Close , Open , High , and Low members. For a vertical CandleStick chart, the opening value is drawn as a horizontal line segment to the left of the vertical range bar, and the closing value is a horizontal line segment to the right. The total length of these two line segments is controlled by the Size property, which is specified in points (1/72nd inch), and scaled according to CalcScaleFactor() . The candlesticks are drawn horizontally or vertically depending on the value of Base , which is a BarBase enum type. Constructors | Improve this Doc View Source OHLCBarItem(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected OHLCBarItem(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source OHLCBarItem(String) Create a new OHLCBarItem , specifying only the legend label. Declaration public OHLCBarItem(string label) Parameters Type Name Description String label The label that will appear in the legend. | Improve this Doc View Source OHLCBarItem(String, IPointList, Color) Create a new OHLCBarItem using the specified properties. Declaration public OHLCBarItem(string label, IPointList points, Color color) Parameters Type Name Description String label The _label that will appear in the legend. IPointList points An IPointList of double precision values that define the Date, Close, Open, High, and Low values for the curve. Note that this IPointList should contain StockPt items rather than PointPair items. Color color The Color to use for drawing the candlesticks. | Improve this Doc View Source OHLCBarItem(OHLCBarItem) The Copy Constructor Declaration public OHLCBarItem(OHLCBarItem rhs) Parameters Type Name Description OHLCBarItem rhs The OHLCBarItem object from which to copy Fields | Improve this Doc View Source _bar Private field that stores a reference to the OHLCBar class defined for this OHLCBarItem . Use the public property OHLCBar to access this value. Declaration [CLSCompliant(false)] protected OHLCBar _bar Field Value Type Description OHLCBar | Improve this Doc View Source schema2 Current schema value that defines the version of the serialized file Declaration public const int schema2 = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source Bar Gets a reference to the OHLCBar class defined for this OHLCBarItem . Declaration public OHLCBar Bar { get; } Property Value Type Description OHLCBar Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public OHLCBarItem Clone() Returns Type Description OHLCBarItem A new, independent copy of this class | Improve this Doc View Source Draw(Graphics, GraphPane, Int32, Single) Do all rendering associated with this OHLCBarItem to the specified Graphics device. This method is normally only called by the Draw method of the parent CurveList collection object. Declaration public override void Draw(Graphics g, GraphPane pane, int pos, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Int32 pos The ordinal position of the current OHLCBarItem curve. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Overrides CurveItem.Draw(Graphics, GraphPane, Int32, Single) | Improve this Doc View Source DrawLegendKey(Graphics, GraphPane, RectangleF, Single) Draw a legend key entry for this OHLCBarItem at the specified location Declaration public override void DrawLegendKey(Graphics g, GraphPane pane, RectangleF rect, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. RectangleF rect The RectangleF struct that specifies the location for the legend key Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Overrides CurveItem.DrawLegendKey(Graphics, GraphPane, RectangleF, Single) | Improve this Doc View Source GetCoords(GraphPane, Int32, out String) Determine the coords for the rectangle associated with a specified point for this CurveItem Declaration public override bool GetCoords(GraphPane pane, int i, out string coords) Parameters Type Name Description GraphPane pane The GraphPane to which this curve belongs Int32 i The index of the point of interest String coords A list of coordinates that represents the \"rect\" for this point (used in an html AREA tag) Returns Type Description Boolean true if it's a valid point, false otherwise Overrides CurveItem.GetCoords(GraphPane, Int32, out String) | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides CurveItem.GetObjectData(SerializationInfo, StreamingContext) Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.PaneBase.Default.html": {
    "href": "api/ZedGraph.PaneBase.Default.html",
    "title": "Struct PaneBase.Default",
    "keywords": "Struct PaneBase.Default A simple struct that defines the default property values for the PaneBase class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source BaseDimension The default dimension of the Rect , which defines a normal sized plot. This dimension is used to scale the fonts, symbols, etc. according to the actual size of the Rect . Declaration public static float BaseDimension Field Value Type Description Single See Also CalcScaleFactor () | Improve this Doc View Source BorderColor The default color for the PaneBase border. ( Border property). Declaration public static Color BorderColor Field Value Type Description Color | Improve this Doc View Source BorderPenWidth The default pen width for the PaneBase border. ( Border property). Units are in points (1/72 inch). Declaration public static float BorderPenWidth Field Value Type Description Single | Improve this Doc View Source FillColor The default color for the Rect background. ( Fill property). Declaration public static Color FillColor Field Value Type Description Color | Improve this Doc View Source FontBold The default font bold mode for the Title ( IsBold property). true for a bold typeface, false otherwise. Declaration public static bool FontBold Field Value Type Description Boolean | Improve this Doc View Source FontColor The default font color for the Title ( FontColor property). Declaration public static Color FontColor Field Value Type Description Color | Improve this Doc View Source FontFamily The default font family for the title ( Title property). Declaration public static string FontFamily Field Value Type Description String | Improve this Doc View Source FontItalic The default font italic mode for the Title ( IsItalic property). true for an italic typeface, false otherwise. Declaration public static bool FontItalic Field Value Type Description Boolean | Improve this Doc View Source FontSize The default font size (points) for the Title ( Size property). Declaration public static float FontSize Field Value Type Description Single | Improve this Doc View Source FontUnderline The default font underline mode for the Title ( IsUnderline property). true for an underlined typeface, false otherwise. Declaration public static bool FontUnderline Field Value Type Description Boolean | Improve this Doc View Source IsBorderVisible The default border mode for the PaneBase . ( Border property). true to draw a border around the Rect , false otherwise. Declaration public static bool IsBorderVisible Field Value Type Description Boolean | Improve this Doc View Source IsFontsScaled The default setting for the IsFontsScaled option. true to have all fonts scaled according to BaseDimension , false otherwise. Declaration public static bool IsFontsScaled Field Value Type Description Boolean See Also CalcScaleFactor () | Improve this Doc View Source IsPenWidthScaled The default setting for the IsPenWidthScaled option. true to have all pen widths scaled according to BaseDimension , false otherwise. Declaration public static bool IsPenWidthScaled Field Value Type Description Boolean See Also CalcScaleFactor () | Improve this Doc View Source IsShowTitle The default display mode for the title at the top of the pane ( Title IsVisible property). true to display a title, false otherwise. Declaration public static bool IsShowTitle Field Value Type Description Boolean | Improve this Doc View Source TitleGap The default value for the TitleGap property, expressed as a fraction of the scaled Title character height. Declaration public static float TitleGap Field Value Type Description Single"
  },
  "api/ZedGraph.PaneBase.html": {
    "href": "api/ZedGraph.PaneBase.html",
    "title": "Class PaneBase",
    "keywords": "Class PaneBase An abstract base class that defines basic functionality for handling a pane. This class is the parent class for MasterPane and GraphPane . Inheritance Object PaneBase GraphPane MasterPane Implements ICloneable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public abstract class PaneBase : ICloneable Constructors | Improve this Doc View Source PaneBase() Default constructor for the PaneBase class. Leaves the Rect empty. Declaration public PaneBase() | Improve this Doc View Source PaneBase(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected PaneBase(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source PaneBase(String, RectangleF) Default constructor for the PaneBase class. Specifies the Title of the PaneBase , and the size of the Rect . Declaration public PaneBase(string title, RectangleF paneRect) Parameters Type Name Description String title RectangleF paneRect | Improve this Doc View Source PaneBase(PaneBase) The Copy Constructor Declaration public PaneBase(PaneBase rhs) Parameters Type Name Description PaneBase rhs The PaneBase object from which to copy Fields | Improve this Doc View Source _baseDimension Private field that determines the base size of the pane, in inches. Fonts, tics, gaps, etc. are scaled according to this base size. Use the public property BaseDimension to access this value. Declaration [CLSCompliant(false)] protected float _baseDimension Field Value Type Description Single See Also _isFontsScaled CalcScaleFactor() | Improve this Doc View Source _border Private field that stores the Border data for the Rect border. Use the public property Border to access this value. Declaration [CLSCompliant(false)] protected Border _border Field Value Type Description Border | Improve this Doc View Source _fill Private field that stores the Fill data for the Rect background. Use the public property Fill to access this value. Declaration [CLSCompliant(false)] protected Fill _fill Field Value Type Description Fill | Improve this Doc View Source _graphObjList Private field instance of the GraphObjList class. Use the public property GraphObjList to access this class. Declaration [CLSCompliant(false)] protected GraphObjList _graphObjList Field Value Type Description GraphObjList | Improve this Doc View Source _isFontsScaled Private field that determines whether or not the fonts, tics, gaps, etc. will be scaled according to the actual graph size. true for font and feature scaling with graph size, false for fixed font sizes (scaleFactor = 1.0 constant). Use the public property IsFontsScaled to access this value. Declaration [CLSCompliant(false)] protected bool _isFontsScaled Field Value Type Description Boolean See Also CalcScaleFactor() IsPenWidthScaled | Improve this Doc View Source _isPenWidthScaled Private field that controls whether or not pen widths are scaled according to the size of the graph. This value is only applicable if IsFontsScaled is true. If IsFontsScaled is false, then no scaling will be done, regardless of the value of IsPenWidthScaled . Declaration [CLSCompliant(false)] protected bool _isPenWidthScaled Field Value Type Description Boolean true to scale the pen widths according to the size of the graph, false otherwise. See Also IsFontsScaled CalcScaleFactor() | Improve this Doc View Source _legend Private field instance of the Legend class. Use the public property Legend to access this class. Declaration [CLSCompliant(false)] protected Legend _legend Field Value Type Description Legend | Improve this Doc View Source _rect The rectangle that defines the full area into which the pane is rendered. Units are pixels. Use the public property Rect to access this value. Declaration [CLSCompliant(false)] protected RectangleF _rect Field Value Type Description RectangleF | Improve this Doc View Source _tag Private field that stores the user-defined tag for this PaneBase . This tag can be any user-defined value. If it is a String type, it can be used as a parameter to the IndexOfTag(String) method. Use the public property Tag to access this value. Declaration [CLSCompliant(false)] protected object _tag Field Value Type Description Object | Improve this Doc View Source _title Private field that holds the main title of the pane. Use the public property Title to access this value. Declaration [CLSCompliant(false)] protected GapLabel _title Field Value Type Description GapLabel | Improve this Doc View Source _titleGap private field that stores the gap between the bottom of the pane title and the client area of the pane. This is expressed as a fraction of the title character height. Declaration [CLSCompliant(false)] protected float _titleGap Field Value Type Description Single | Improve this Doc View Source schema Current schema value that defines the version of the serialized file Declaration public const int schema = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source BaseDimension BaseDimension is a double precision value that sets \"normal\" pane size on which all the settings are based. The BaseDimension is in inches. For example, if the BaseDimension is 8.0 inches and the Title size is 14 points. Then the pane title font will be 14 points high when the Rect is approximately 8.0 inches wide. If the Rect is 4.0 inches wide, the pane title font will be 7 points high. Most features of the graph are scaled in this manner. Declaration public float BaseDimension { get; set; } Property Value Type Description Single The base dimension reference for the Rect , in inches See Also BaseDimension IsFontsScaled CalcScaleFactor() | Improve this Doc View Source Border Gets or sets the Border class for drawing the border border around the Rect Declaration public Border Border { get; set; } Property Value Type Description Border See Also BorderColor BorderPenWidth | Improve this Doc View Source Fill Gets or sets the Fill data for the filling the background of the Rect . Declaration public Fill Fill { get; set; } Property Value Type Description Fill | Improve this Doc View Source GraphObjList Gets or sets the list of GraphObj items for this GraphPane Declaration public GraphObjList GraphObjList { get; set; } Property Value Type Description GraphObjList A reference to a GraphObjList collection object | Improve this Doc View Source IsFontsScaled Determines if the font sizes, tic sizes, gap sizes, etc. will be scaled according to the size of the Rect and the BaseDimension . If this value is set to false, then the font sizes and tic sizes will always be exactly as specified, without any scaling. Declaration public bool IsFontsScaled { get; set; } Property Value Type Description Boolean True to have the fonts and tics scaled, false to have them constant See Also CalcScaleFactor() | Improve this Doc View Source IsPenWidthScaled Gets or sets the property that controls whether or not pen widths are scaled for this PaneBase . Declaration public bool IsPenWidthScaled { get; set; } Property Value Type Description Boolean true to scale the pen widths according to the size of the graph, false otherwise. Remarks This value is only applicable if IsFontsScaled is true. If IsFontsScaled is false, then no scaling will be done, regardless of the value of IsPenWidthScaled . Note that scaling the pen widths can cause \"artifacts\" to appear at typical screen resolutions. This occurs because of roundoff differences; in some cases the pen width may round to 1 pixel wide and in another it may round to 2 pixels wide. The result is typically undesirable. Therefore, this option defaults to false. This option is primarily useful for high resolution output, such as printer output or high resolution bitmaps (from GetImage(Int32, Int32, Single) ) where it is desirable to have the pen width be consistent with the screen image. See Also IsFontsScaled CalcScaleFactor() | Improve this Doc View Source Legend Accesses the Legend for this PaneBase Declaration public Legend Legend { get; } Property Value Type Description Legend A reference to a Legend object | Improve this Doc View Source Margin Gets or sets the Margin instance that controls the space between the edge of the Rect and the rendered content of the graph. Declaration public Margin Margin { get; set; } Property Value Type Description Margin | Improve this Doc View Source Rect The rectangle that defines the full area into which all graphics will be rendered. Declaration public RectangleF Rect { get; set; } Property Value Type Description RectangleF Units are pixels. Remarks Note that this rectangle has x, y, width, and height. Most of the GDI+ graphic primitive actually draw one pixel beyond those dimensions. For example, for a rectangle of ( X=0, Y=0, Width=100, Height=100 ), GDI+ would draw into pixels 0 through 100, which is actually 101 pixels. For the ZedGraph Rect, a Width of 100 pixels means that pixels 0 through 99 are used See Also ReSize(Graphics, RectangleF) | Improve this Doc View Source Tag Gets or sets the user-defined tag for this PaneBase . This tag can be any user-defined value. If it is a String type, it can be used as a parameter to the IndexOfTag(String) method. Declaration public object Tag { get; set; } Property Value Type Description Object Remarks Note that, if you are going to Serialize ZedGraph data, then any type that you store in Tag must be a serializable type (or it will cause an exception). | Improve this Doc View Source Title Gets the Label instance that contains the text and attributes of the title. This text can be multiple lines separated by newline characters ('\\n'). Declaration public Label Title { get; } Property Value Type Description Label See Also FontSpec FontColor FontBold FontItalic FontUnderline FontFamily FontSize | Improve this Doc View Source TitleGap Gets or sets the gap between the bottom of the pane title and the client area of the pane. This is expressed as a fraction of the scaled Title character height. Declaration public float TitleGap { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source CalcClientRect(Graphics, Single) Calculate the client area rectangle based on the Rect . Declaration public RectangleF CalcClientRect(Graphics g, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. Single scaleFactor The scaling factor for the features of the graph based on the BaseDimension . This scaling factor is calculated by the CalcScaleFactor() method. The scale factor represents a linear multiple to be applied to font sizes, symbol sizes, etc. Returns Type Description RectangleF The calculated chart rect, in pixel coordinates. Remarks The client rectangle is the actual area available for GraphPane or MasterPane items after taking out space for the margins and the title. This method does not take out the area required for the Legend . To do so, you must separately call CalcRect(Graphics, PaneBase, Single, ref RectangleF) . | Improve this Doc View Source CalcScaleFactor() Calculate the scaling factor based on the ratio of the current Rect dimensions and the BaseDimension . Declaration public float CalcScaleFactor() Returns Type Description Single A Single value representing the scaling factor to use for the rendering calculations. Remarks This scaling factor is used to proportionally scale the features of the MasterPane so that small graphs don't have huge fonts, and vice versa. The scale factor represents a linear multiple to be applied to font sizes, symbol sizes, tic sizes, gap sizes, pen widths, etc. The units of the scale factor are \"World Pixels\" per \"Standard Point\". If any object size, in points, is multiplied by this scale factor, the result is the size, in pixels, that the object should be drawn using the standard GDI+ drawing instructions. A \"Standard Point\" is a dimension based on points (1/72nd inch) assuming that the Rect size matches the BaseDimension . Note that \"World Pixels\" will still be transformed by the GDI+ transform matrices to result in \"Output Device Pixels\", but \"World Pixels\" are the reference basis for the drawing commands. See Also BaseDimension | Improve this Doc View Source Draw(Graphics) Do all rendering associated with this PaneBase to the specified Graphics device. This abstract method is implemented by the child classes. Declaration public virtual void Draw(Graphics g) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. | Improve this Doc View Source DrawPaneFrame(Graphics, Single) Draw the border _border around the Rect area. Declaration public void DrawPaneFrame(Graphics g, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. Single scaleFactor The scaling factor for the features of the graph based on the BaseDimension . This scaling factor is calculated by the CalcScaleFactor() method. The scale factor represents a linear multiple to be applied to font sizes, symbol sizes, etc. | Improve this Doc View Source DrawTitle(Graphics, Single) Draw the Title on the graph, centered at the top of the pane. Declaration public void DrawTitle(Graphics g, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. Single scaleFactor The scaling factor for the features of the graph based on the BaseDimension . This scaling factor is calculated by the CalcScaleFactor() method. The scale factor represents a linear multiple to be applied to font sizes, symbol sizes, etc. | Improve this Doc View Source GetImage() Build a Bitmap object containing the graphical rendering of all the GraphPane objects in this list. Declaration public Bitmap GetImage() Returns Type Description Bitmap A Bitmap object rendered with the current graph. See Also GetImage(Int32, Int32, Single) GetMetafile() GetMetafile(Int32, Int32) | Improve this Doc View Source GetImage(Boolean) Build a Bitmap object containing the graphical rendering of all the GraphPane objects in this list. Declaration public Bitmap GetImage(bool isAntiAlias) Parameters Type Name Description Boolean isAntiAlias Returns Type Description Bitmap A Bitmap object rendered with the current graph. See Also GetImage(Int32, Int32, Single) GetMetafile() GetMetafile(Int32, Int32) | Improve this Doc View Source GetImage(Int32, Int32, Single) Gets an image for the current GraphPane, scaled to the specified size and resolution. Declaration public Bitmap GetImage(int width, int height, float dpi) Parameters Type Name Description Int32 width The scaled width of the bitmap in pixels Int32 height The scaled height of the bitmap in pixels Single dpi The resolution of the bitmap, in dots per inch Returns Type Description Bitmap See Also GetImage() GetMetafile() GetMetafile(Int32, Int32) Bitmap | Improve this Doc View Source GetImage(Int32, Int32, Single, Boolean) Gets an image for the current GraphPane, scaled to the specified size and resolution. Declaration public Bitmap GetImage(int width, int height, float dpi, bool isAntiAlias) Parameters Type Name Description Int32 width The scaled width of the bitmap in pixels Int32 height The scaled height of the bitmap in pixels Single dpi The resolution of the bitmap, in dots per inch Boolean isAntiAlias true for anti-aliased rendering, false otherwise Returns Type Description Bitmap See Also GetImage() GetMetafile() GetMetafile(Int32, Int32) Bitmap | Improve this Doc View Source GetMetafile() Gets an enhanced metafile image for the current GraphPane. Declaration public Metafile GetMetafile() Returns Type Description Metafile See Also GetImage() GetImage(Int32, Int32, Single) GetMetafile(Int32, Int32) | Improve this Doc View Source GetMetafile(Int32, Int32) Gets an enhanced metafile image for the current GraphPane, scaled to the specified size. Declaration public Metafile GetMetafile(int width, int height) Parameters Type Name Description Int32 width The \"effective\" scaled width of the bitmap in pixels Int32 height The \"effective\" scaled height of the bitmap in pixels Returns Type Description Metafile Remarks By definition, a Metafile is a vector drawing, and therefore scaling should not matter. However, this method is provided because certain options in Zedgraph, such as IsFontsScaled are affected by the size of the expected image. See Also GetImage() GetImage(Int32, Int32, Single) GetMetafile() | Improve this Doc View Source GetMetafile(Int32, Int32, Boolean) Gets an enhanced metafile image for the current GraphPane, scaled to the specified size. Declaration public Metafile GetMetafile(int width, int height, bool isAntiAlias) Parameters Type Name Description Int32 width The \"effective\" scaled width of the bitmap in pixels Int32 height The \"effective\" scaled height of the bitmap in pixels Boolean isAntiAlias true to use anti-aliased drawing mode, false otherwise Returns Type Description Metafile Remarks By definition, a Metafile is a vector drawing, and therefore scaling should not matter. However, this method is provided because certain options in Zedgraph, such as IsFontsScaled are affected by the size of the expected image. See Also GetImage() GetImage(Int32, Int32, Single) GetMetafile() | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public virtual void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source ReSize(Graphics, RectangleF) Change the size of the Rect . Override this method to handle resizing the contents as required. Declaration public virtual void ReSize(Graphics g, RectangleF rect) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. RectangleF rect The new size for the Rect . | Improve this Doc View Source ScaledPenWidth(Single, Single) Calculate the scaled pen width, taking into account the scaleFactor and the setting of the IsPenWidthScaled property of the pane. Declaration public float ScaledPenWidth(float penWidth, float scaleFactor) Parameters Type Name Description Single penWidth The pen width, in points (1/72 inch) Single scaleFactor The scaling factor for the features of the graph based on the BaseDimension . This scaling factor is calculated by the CalcScaleFactor() method. The scale factor represents a linear multiple to be applied to font sizes, symbol sizes, etc. Returns Type Description Single The scaled pen width, in world pixels | Improve this Doc View Source ShallowClone() Create a shallow, memberwise copy of this class. Declaration public PaneBase ShallowClone() Returns Type Description PaneBase a new copy of the class Remarks Note that this method uses MemberWiseClone, which will copy all members (shallow) including those of classes derived from this class. Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Remarks Note that this method must be called with an explicit cast to ICloneable, and that it is inherently virtual. For example: ParentClass foo = new ChildClass(); ChildClass bar = (ChildClass) ((ICloneable)foo).Clone(); Assume that ChildClass is inherited from ParentClass. Even though foo is declared with ParentClass, it is actually an instance of ChildClass. Calling the ICloneable implementation of Clone() on foo actually calls ChildClass.Clone() as if it were a virtual function. Implements System.ICloneable"
  },
  "api/ZedGraph.PaneLayout.html": {
    "href": "api/ZedGraph.PaneLayout.html",
    "title": "Enum PaneLayout",
    "keywords": "Enum PaneLayout Define the auto layout options for the SetLayout(Graphics, PaneLayout) method. Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public enum PaneLayout Fields Name Description ExplicitCol12 Layout the GraphPane 's with an explicit number of columns: The first row has 1 column and the second row has 2 columns for a total of 3 panes. ExplicitCol21 Layout the GraphPane 's with an explicit number of columns: The first row has 2 columns and the second row has 1 column for a total of 3 panes. ExplicitCol23 Layout the GraphPane 's with an explicit number of columns: The first row has 2 columns and the second row has 3 columns for a total of 5 panes. ExplicitCol32 Layout the GraphPane 's with an explicit number of columns: The first row has 3 columns and the second row has 2 columns for a total of 5 panes. ExplicitRow12 Layout the GraphPane 's with an explicit number of rows: The first column has 1 row and the second column has 2 rows for a total of 3 panes. ExplicitRow21 Layout the GraphPane 's with an explicit number of rows: The first column has 2 rows and the second column has 1 row for a total of 3 panes. ExplicitRow23 Layout the GraphPane 's with an explicit number of rows: The first column has 2 rows and the second column has 3 rows for a total of 5 panes. ExplicitRow32 Layout the GraphPane 's with an explicit number of rows: The first column has 3 rows and the second column has 2 rows for a total of 5 panes. ForceSquare Layout the GraphPane 's so they are in a square grid (always 2x2, 3x3, 4x4), leaving blank spaces as required. SingleColumn Layout the GraphPane 's in a single column SingleRow Layout the GraphPane 's in a single row SquareColPreferred Layout the GraphPane 's so they are in a general square (2x2, 3x3, etc.), but use extra columns when necessary (row x column = 1x2, 2x3, 3x4, etc.) depending on the total number of panes required. SquareRowPreferred Layout the GraphPane 's so they are in a general square (2x2, 3x3, etc.), but use extra rows when necessary (2x1, 3x2, 4x3, etc.) depending on the total number of panes required."
  },
  "api/ZedGraph.PaneList.html": {
    "href": "api/ZedGraph.PaneList.html",
    "title": "Class PaneList",
    "keywords": "Class PaneList A collection class containing a list of GraphPane objects. Inheritance Object List < GraphPane > PaneList Implements IList < GraphPane > ICollection < GraphPane > IEnumerable < GraphPane > IList ICollection IEnumerable ICloneable Inherited Members System.Collections.Generic.List<ZedGraph.GraphPane>.System.Collections.IList.get_Item(System.Int32) System.Collections.Generic.List<ZedGraph.GraphPane>.System.Collections.IList.set_Item(System.Int32, System.Object) List<GraphPane>.Add(GraphPane) List<GraphPane>.AddRange(IEnumerable<GraphPane>) List<GraphPane>.AsReadOnly() List<GraphPane>.BinarySearch(Int32, Int32, GraphPane, IComparer<GraphPane>) List<GraphPane>.BinarySearch(GraphPane) List<GraphPane>.BinarySearch(GraphPane, IComparer<GraphPane>) List<GraphPane>.Clear() List<GraphPane>.Contains(GraphPane) List<GraphPane>.ConvertAll<TOutput>(Converter<GraphPane, TOutput>) List<GraphPane>.CopyTo(Int32, GraphPane[], Int32, Int32) List<GraphPane>.CopyTo(GraphPane[]) List<GraphPane>.CopyTo(GraphPane[], Int32) List<GraphPane>.Exists(Predicate<GraphPane>) List<GraphPane>.Find(Predicate<GraphPane>) List<GraphPane>.FindAll(Predicate<GraphPane>) List<GraphPane>.FindIndex(Int32, Int32, Predicate<GraphPane>) List<GraphPane>.FindIndex(Int32, Predicate<GraphPane>) List<GraphPane>.FindIndex(Predicate<GraphPane>) List<GraphPane>.FindLast(Predicate<GraphPane>) List<GraphPane>.FindLastIndex(Int32, Int32, Predicate<GraphPane>) List<GraphPane>.FindLastIndex(Int32, Predicate<GraphPane>) List<GraphPane>.FindLastIndex(Predicate<GraphPane>) List<GraphPane>.ForEach(Action<GraphPane>) List<GraphPane>.GetEnumerator() List<GraphPane>.GetRange(Int32, Int32) List<GraphPane>.IndexOf(GraphPane) List<GraphPane>.IndexOf(GraphPane, Int32) List<GraphPane>.IndexOf(GraphPane, Int32, Int32) List<GraphPane>.Insert(Int32, GraphPane) List<GraphPane>.InsertRange(Int32, IEnumerable<GraphPane>) List<GraphPane>.LastIndexOf(GraphPane) List<GraphPane>.LastIndexOf(GraphPane, Int32) List<GraphPane>.LastIndexOf(GraphPane, Int32, Int32) List<GraphPane>.Remove(GraphPane) List<GraphPane>.RemoveAll(Predicate<GraphPane>) List<GraphPane>.RemoveAt(Int32) List<GraphPane>.RemoveRange(Int32, Int32) List<GraphPane>.Reverse() List<GraphPane>.Reverse(Int32, Int32) List<GraphPane>.Sort() List<GraphPane>.Sort(IComparer<GraphPane>) List<GraphPane>.Sort(Comparison<GraphPane>) List<GraphPane>.Sort(Int32, Int32, IComparer<GraphPane>) List<GraphPane>.IEnumerable<GraphPane>.GetEnumerator() List<GraphPane>.ICollection.CopyTo(Array, Int32) List<GraphPane>.IEnumerable.GetEnumerator() List<GraphPane>.IList.Add(Object) List<GraphPane>.IList.Contains(Object) List<GraphPane>.IList.IndexOf(Object) List<GraphPane>.IList.Insert(Int32, Object) List<GraphPane>.IList.Remove(Object) List<GraphPane>.ToArray() List<GraphPane>.TrimExcess() List<GraphPane>.TrueForAll(Predicate<GraphPane>) List<GraphPane>.Capacity List<GraphPane>.Count List<GraphPane>.Item[Int32] List<GraphPane>.ICollection<GraphPane>.IsReadOnly List<GraphPane>.ICollection.IsSynchronized List<GraphPane>.ICollection.SyncRoot List<GraphPane>.IList.IsFixedSize List<GraphPane>.IList.IsReadOnly List<GraphPane>.IList.Item[Int32] Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class PaneList : List<GraphPane>, IList<GraphPane>, ICollection<GraphPane>, IEnumerable<GraphPane>, IList, ICollection, IEnumerable, ICloneable Constructors | Improve this Doc View Source PaneList() Default constructor for the collection class. Declaration public PaneList() | Improve this Doc View Source PaneList(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected PaneList(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source PaneList(PaneList) The Copy Constructor Declaration public PaneList(PaneList rhs) Parameters Type Name Description PaneList rhs The PaneList object from which to copy Fields | Improve this Doc View Source schema Current schema value that defines the version of the serialized file Declaration public const int schema = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source Item[String] Indexer to access the specified GraphPane object by its Title string. Declaration public GraphPane this[string title] { get; } Parameters Type Name Description String title The string title of the GraphPane object to be accessed. Property Value Type Description GraphPane A GraphPane object reference. Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public PaneList Clone() Returns Type Description PaneList A new, independent copy of this class | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public virtual void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source IndexOf(String) Return the zero-based position index of the GraphPane with the specified Title . Declaration public int IndexOf(string title) Parameters Type Name Description String title The String label that is in the Title attribute of the item to be found. Returns Type Description Int32 The zero-based index of the specified GraphPane , or -1 if the Title was not found in the list Remarks The comparison of titles is not case sensitive, but it must include all characters including punctuation, spaces, etc. See Also IndexOfTag(String) | Improve this Doc View Source IndexOfTag(String) Return the zero-based position index of the GraphPane with the specified Tag . Declaration public int IndexOfTag(string tagStr) Parameters Type Name Description String tagStr The String tag that is in the Tag attribute of the item to be found. Returns Type Description Int32 The zero-based index of the specified GraphPane , or -1 if the Tag string is not in the list Remarks In order for this method to work, the Tag property must be of type String . Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable System.ICloneable"
  },
  "api/ZedGraph.PerfDataType.html": {
    "href": "api/ZedGraph.PerfDataType.html",
    "title": "Enum PerfDataType",
    "keywords": "Enum PerfDataType An enum used to specify the X or Y data type of interest -- see XData and YData . Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public enum PerfDataType Fields Name Description Acceleration The instantaneous acceleration, meters per second squared Distance The distance traveled, meters Time The time (seconds) at which these data are measured Velocity The instantaneous velocity, meters per second"
  },
  "api/ZedGraph.PerformanceData.html": {
    "href": "api/ZedGraph.PerformanceData.html",
    "title": "Class PerformanceData",
    "keywords": "Class PerformanceData Sample data structure containing a variety of data values, in this case the values are related in that they correspond to the same time value. Inheritance Object PerformanceData Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public class PerformanceData Constructors | Improve this Doc View Source PerformanceData(Double, Double, Double, Double) Constructor that specifies each data value in the PerformanceData struct Declaration public PerformanceData(double time, double distance, double velocity, double acceleration) Parameters Type Name Description Double time The time (seconds) at which these data are measured Double distance The distance traveled, meters Double velocity The instantaneous velocity, meters per second Double acceleration The instantaneous acceleration, meters per second squared Fields | Improve this Doc View Source acceleration The instantaneous acceleration, meters per second squared Declaration public double acceleration Field Value Type Description Double | Improve this Doc View Source distance The distance traveled, meters Declaration public double distance Field Value Type Description Double | Improve this Doc View Source time The time (seconds) at which these data are measured Declaration public double time Field Value Type Description Double | Improve this Doc View Source velocity The instantaneous velocity, meters per second Declaration public double velocity Field Value Type Description Double Properties | Improve this Doc View Source Item[PerfDataType] Gets or sets the data value as specified by the PerfDataType enum Declaration public double this[PerfDataType type] { get; set; } Parameters Type Name Description PerfDataType type The required data value type Property Value Type Description Double"
  },
  "api/ZedGraph.PieItem.Default.html": {
    "href": "api/ZedGraph.PieItem.Default.html",
    "title": "Struct PieItem.Default",
    "keywords": "Struct PieItem.Default Specify the default property values for the PieItem class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source BorderColor The default color for drawing frames around PieItem ( Color property). Declaration public static Color BorderColor Field Value Type Description Color | Improve this Doc View Source BorderWidth The default pen width to be used for drawing the border around the PieItem ( Width property). Units are points. Declaration public static float BorderWidth Field Value Type Description Single | Improve this Doc View Source Displacement Default PieItem displacement. Declaration public static double Displacement Field Value Type Description Double | Improve this Doc View Source FillBrush The default custom brush for filling in the PieItem. ( Brush property). Declaration public static Brush FillBrush Field Value Type Description Brush | Improve this Doc View Source FillColor The default color for filling in the PieItem ( Color property). Declaration public static Color FillColor Field Value Type Description Color | Improve this Doc View Source FillType The default fill mode for this PieItem ( Type property). Declaration public static FillType FillType Field Value Type Description FillType | Improve this Doc View Source FontSize The default font size for LabelDetail entries ( Size property). Units are in points (1/72 inch). Declaration public static float FontSize Field Value Type Description Single | Improve this Doc View Source IsBorderVisible The default border mode for PieItem ( IsVisible property). true to display frame around PieItem, false otherwise Declaration public static bool IsBorderVisible Field Value Type Description Boolean | Improve this Doc View Source isVisible Default value for controlling PieItem display. Declaration public static bool isVisible Field Value Type Description Boolean | Improve this Doc View Source LabelType Default value for LabelType . Declaration public static PieLabelType LabelType Field Value Type Description PieLabelType | Improve this Doc View Source PercentDecimalDigits Default value for the number of decimal digits to be displayed where LabelType contains a percent. Declaration public static int PercentDecimalDigits Field Value Type Description Int32 | Improve this Doc View Source ValueDecimalDigits Default value for the number of decimal digits to be displayed when LabelType contains a value. Declaration public static int ValueDecimalDigits Field Value Type Description Int32"
  },
  "api/ZedGraph.PieItem.html": {
    "href": "api/ZedGraph.PieItem.html",
    "title": "Class PieItem",
    "keywords": "Class PieItem A class representing a pie chart object comprised of one or more PieItem s. Inheritance Object CurveItem PieItem Implements ICloneable ISerializable Inherited Members CurveItem._isX2Axis CurveItem._isY2Axis CurveItem._yAxisIndex CurveItem._isVisible CurveItem._isSelected CurveItem._isSelectable CurveItem._isOverrideOrdinal CurveItem._points CurveItem.Tag CurveItem.schema CurveItem.Label CurveItem.Color CurveItem.IsVisible CurveItem.IsSelected CurveItem.IsSelectable CurveItem.IsOverrideOrdinal CurveItem.IsX2Axis CurveItem.IsY2Axis CurveItem.YAxisIndex CurveItem.IsBar CurveItem.IsPie CurveItem.IsLine CurveItem.NPts CurveItem.Points CurveItem.Item[Int32] CurveItem.Link CurveItem.AddPoint(Double, Double) CurveItem.AddPoint(PointPair) CurveItem.Clear() CurveItem.RemovePoint(Int32) CurveItem.GetXAxis(GraphPane) CurveItem.GetYAxis(GraphPane) CurveItem.GetYAxisIndex(GraphPane) CurveItem.MakeUnique() CurveItem.MakeUnique(ColorSymbolRotator) CurveItem.GetRange(Double, Double, Double, Double, Boolean, Boolean, GraphPane) CurveItem.BaseAxis(GraphPane) CurveItem.ValueAxis(GraphPane) CurveItem.GetBarWidth(GraphPane) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class PieItem : CurveItem, ICloneable, ISerializable Constructors | Improve this Doc View Source PieItem(Double, Color, Double, String) Create a new PieItem . Declaration public PieItem(double pieValue, Color color, double displacement, string label) Parameters Type Name Description Double pieValue The value associated with this PieItem instance. Color color The display color for this PieItem instance. Double displacement The amount this PieItem instance will be displaced from the center point. String label Text label for this PieItem instance. | Improve this Doc View Source PieItem(Double, Color, Color, Single, Double, String) Create a new PieItem , providing a gradient fill for the pie color. Declaration public PieItem(double pieValue, Color color1, Color color2, float fillAngle, double displacement, string label) Parameters Type Name Description Double pieValue The value associated with this PieItem instance. Color color1 The starting display color for the gradient Fill for this PieItem instance. Color color2 The ending display color for the gradient Fill for this PieItem instance. Single fillAngle The angle for the gradient Fill . Double displacement The amount this PieItem instance will be displaced from the center point. String label Text label for this PieItem instance. | Improve this Doc View Source PieItem(Double, String) Create a new PieItem . Declaration public PieItem(double pieValue, string label) Parameters Type Name Description Double pieValue The value associated with this PieItem instance. String label Text label for this PieItem instance | Improve this Doc View Source PieItem(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected PieItem(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source PieItem(PieItem) The Copy Constructor Declaration public PieItem(PieItem rhs) Parameters Type Name Description PieItem rhs The PieItem object from which to copy Fields | Improve this Doc View Source schema2 Current schema value that defines the version of the serialized file Declaration public const int schema2 = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source Border Gets or sets the Border object so as to be able to modify its properties. Declaration public Border Border { get; set; } Property Value Type Description Border | Improve this Doc View Source Displacement Gets or sets the a value which determines the amount, if any, of this PieItem displacement. Declaration public double Displacement { get; set; } Property Value Type Description Double | Improve this Doc View Source Fill Gets or sets the Fill object which is used to fill the pie slice with color. Declaration public Fill Fill { get; set; } Property Value Type Description Fill | Improve this Doc View Source LabelDetail Gets or sets the TextObj to be used for displaying this PieItem 's label. Declaration public TextObj LabelDetail { get; set; } Property Value Type Description TextObj | Improve this Doc View Source LabelType Gets or sets the PieLabelType to be used in displaying PieItem labels. Declaration public PieLabelType LabelType { get; set; } Property Value Type Description PieLabelType | Improve this Doc View Source PercentDecimalDigits Gets or sets the number of decimal digits to be displayed in a PieItem percent label. Declaration public int PercentDecimalDigits { get; set; } Property Value Type Description Int32 | Improve this Doc View Source SlicePath Gets a path representing this PieItem Declaration public GraphicsPath SlicePath { get; } Property Value Type Description GraphicsPath | Improve this Doc View Source Value Gets or sets the value of this PieItem . Minimum value is 0. Declaration public double Value { get; set; } Property Value Type Description Double | Improve this Doc View Source ValueDecimalDigits Gets or sets the number of decimal digits to be displayed in a PieItem value label. Declaration public int ValueDecimalDigits { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source CalcPieRect(Graphics, GraphPane, Single, RectangleF) Calculate the RectangleF that will be used to define the bounding rectangle of the Pie. Declaration public static RectangleF CalcPieRect(Graphics g, GraphPane pane, float scaleFactor, RectangleF chartRect) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. RectangleF chartRect The RectangleF (normally the Rect ) that bounds this pie. Returns Type Description RectangleF Remarks This rectangle always lies inside of the Rect , and it is normally a square so that the pie itself is not oval-shaped. | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public PieItem Clone() Returns Type Description PieItem A new, independent copy of this class | Improve this Doc View Source DesignLabel(Graphics, GraphPane, RectangleF, Single) This method collects all the data relative to rendering this PieItem 's label. Declaration public void DesignLabel(Graphics g, GraphPane pane, RectangleF rect, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. RectangleF rect The rectangle used for rendering this PieItem Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. | Improve this Doc View Source Draw(Graphics, GraphPane, Int32, Single) Do all rendering associated with this PieItem item to the specified Graphics device. This method is normally only called by the Draw method of the parent CurveList collection object. Declaration public override void Draw(Graphics g, GraphPane pane, int pos, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Int32 pos Not used for rendering Pies Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Overrides CurveItem.Draw(Graphics, GraphPane, Int32, Single) | Improve this Doc View Source DrawLabel(Graphics, GraphPane, RectangleF, Single) Render the label for this PieItem . Declaration public void DrawLabel(Graphics g, GraphPane pane, RectangleF rect, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. RectangleF rect Bounding rectangle for this PieItem . Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. | Improve this Doc View Source DrawLegendKey(Graphics, GraphPane, RectangleF, Single) Draw a legend key entry for this PieItem at the specified location Declaration public override void DrawLegendKey(Graphics g, GraphPane pane, RectangleF rect, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. RectangleF rect The RectangleF struct that specifies the location for the legend key Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Overrides CurveItem.DrawLegendKey(Graphics, GraphPane, RectangleF, Single) | Improve this Doc View Source GetCoords(GraphPane, Int32, out String) Determine the coords for the rectangle associated with a specified point for this CurveItem Declaration public override bool GetCoords(GraphPane pane, int i, out string coords) Parameters Type Name Description GraphPane pane The GraphPane to which this curve belongs Int32 i The index of the point of interest String coords A list of coordinates that represents the \"rect\" for this point (used in an html AREA tag) Returns Type Description Boolean true if it's a valid point, false otherwise Overrides CurveItem.GetCoords(GraphPane, Int32, out String) | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides CurveItem.GetObjectData(SerializationInfo, StreamingContext) Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.PieLabelType.html": {
    "href": "api/ZedGraph.PieLabelType.html",
    "title": "Enum PieLabelType",
    "keywords": "Enum PieLabelType Enumeration that determines the type of label that is displayed for each pie slice (see LabelType ). Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public enum PieLabelType Fields Name Description Name Displays Label for a slice in a Pie Chart. Name_Percent Displays Label and Value (as % of total) for a slice in a Pie Chart. Name_Value Displays Label and Value for a slice in a Pie Chart. Name_Value_Percent Displays a Label containing the Value both as an absolute number and as percentage of the total. None No label displayed. Percent Displays Value (as % of total) for a slice in a Pie Chart. Value Displays Value for a slice in a Pie Chart."
  },
  "api/ZedGraph.PointD.html": {
    "href": "api/ZedGraph.PointD.html",
    "title": "Struct PointD",
    "keywords": "Struct PointD Simple struct that stores X and Y coordinates as doubles. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public struct PointD Constructors | Improve this Doc View Source PointD(Double, Double) Construct a PointD object from two double values. Declaration public PointD(double x, double y) Parameters Type Name Description Double x The X coordinate Double y The Y coordinate Fields | Improve this Doc View Source X The X coordinate Declaration public double X Field Value Type Description Double | Improve this Doc View Source Y The Y coordinate Declaration public double Y Field Value Type Description Double"
  },
  "api/ZedGraph.PointPair.html": {
    "href": "api/ZedGraph.PointPair.html",
    "title": "Class PointPair",
    "keywords": "Class PointPair A simple point represented by an (X,Y,Z) group of double values. Inheritance Object PointPairBase PointPair PointPair4 PointPairCV StockPt Implements ISerializable ICloneable Inherited Members PointPairBase.Missing PointPairBase.DefaultFormat PointPairBase.X PointPairBase.Y PointPairBase.schema PointPairBase.IsMissing PointPairBase.IsInvalid PointPairBase.IsValueInvalid(Double) PointPairBase.ToString() PointPairBase.ToString(String) PointPairBase.ToString(String, String) Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class PointPair : PointPairBase, ISerializable, ICloneable Constructors | Improve this Doc View Source PointPair() Default Constructor Declaration public PointPair() | Improve this Doc View Source PointPair(Double, Double) Creates a point pair with the specified X and Y. Declaration public PointPair(double x, double y) Parameters Type Name Description Double x This pair's x coordinate. Double y This pair's y coordinate. | Improve this Doc View Source PointPair(Double, Double, Double) Creates a point pair with the specified X, Y, and base value. Declaration public PointPair(double x, double y, double z) Parameters Type Name Description Double x This pair's x coordinate. Double y This pair's y coordinate. Double z This pair's z or lower dependent coordinate. | Improve this Doc View Source PointPair(Double, Double, Double, Object) Creates a point pair with the specified X, Y, base value, and ( Tag ). Declaration public PointPair(double x, double y, double z, object tag) Parameters Type Name Description Double x This pair's x coordinate. Double y This pair's y coordinate. Double z This pair's z or lower dependent coordinate. Object tag This pair's Tag property | Improve this Doc View Source PointPair(Double, Double, Double, String) Creates a point pair with the specified X, Y, base value, and string label ( Tag ). Declaration public PointPair(double x, double y, double z, string label) Parameters Type Name Description Double x This pair's x coordinate. Double y This pair's y coordinate. Double z This pair's z or lower dependent coordinate. String label This pair's string label ( Tag ) | Improve this Doc View Source PointPair(Double, Double, String) Creates a point pair with the specified X, Y, and label ( Tag ). Declaration public PointPair(double x, double y, string label) Parameters Type Name Description Double x This pair's x coordinate. Double y This pair's y coordinate. String label This pair's string label ( Tag ) | Improve this Doc View Source PointPair(PointF) Creates a point pair from the specified PointF struct. Declaration public PointPair(PointF pt) Parameters Type Name Description PointF pt The PointF struct from which to get the new PointPair values. | Improve this Doc View Source PointPair(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected PointPair(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source PointPair(PointPair) The PointPair copy constructor. Declaration public PointPair(PointPair rhs) Parameters Type Name Description PointPair rhs The basis for the copy. Fields | Improve this Doc View Source schema2 Current schema value that defines the version of the serialized file Declaration public const int schema2 = 11 Field Value Type Description Int32 | Improve this Doc View Source Tag A tag object for use by the user. This can be used to store additional information associated with the PointPair . ZedGraph never modifies this value, but if it is a String type, it may be displayed in a within the object. Declaration public object Tag Field Value Type Description Object Remarks Note that, if you are going to Serialize ZedGraph data, then any type that you store in Tag must be a serializable type (or it will cause an exception). | Improve this Doc View Source Z This PointPair's Z coordinate. Also used for the lower value (dependent axis) for HiLowBarItem and ErrorBarItem charts. Declaration public double Z Field Value Type Description Double Properties | Improve this Doc View Source ColorValue The ColorValue property is just an alias for the Z property. Declaration public virtual double ColorValue { get; set; } Property Value Type Description Double Remarks For other types, such as the StockPt , the StockPt can be mapped to a unique value. This is used with the GradientByColorValue option. | Improve this Doc View Source IsInvalid3D Readonly value that determines if either the X, Y, or Z coordinate in this PointPair is an invalid (not plotable) value. It is considered invalid if it is missing (equal to System.Double.Max), Infinity, or NaN. Declaration public bool IsInvalid3D { get; } Property Value Type Description Boolean true if any value is invalid | Improve this Doc View Source LowValue The \"low\" value for this point (lower dependent-axis value). This is really just an alias for Z . Declaration public double LowValue { get; set; } Property Value Type Description Double The lower dependent value for this PointPair . Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public PointPair Clone() Returns Type Description PointPair A new, independent copy of this class | Improve this Doc View Source Equals(Object) Compare two PointPair objects for equality. To be equal, X, Y, and Z must be exactly the same between the two objects. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The PointPair object to be compared with. Returns Type Description Boolean true if the PointPair objects are equal, false otherwise Overrides PointPairBase.Equals(Object) | Improve this Doc View Source GetHashCode() Return the HashCode from the base class. Declaration public override int GetHashCode() Returns Type Description Int32 Overrides PointPairBase.GetHashCode() | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides PointPairBase.GetObjectData(SerializationInfo, StreamingContext) | Improve this Doc View Source ToString(Boolean) Format this PointPair value using the default format. Example: \"( 12.345, -16.876 )\". The two double values are formatted with the \"g\" format type. Declaration public virtual string ToString(bool isShowZ) Parameters Type Name Description Boolean isShowZ true to show the third \"Z\" or low dependent value coordinate Returns Type Description String A string representation of the PointPair | Improve this Doc View Source ToString(String, Boolean) Format this PointPair value using a general format string. Example: a format string of \"e2\" would give \"( 1.23e+001, -1.69e+001 )\". If is true, then the third \"Z\" coordinate is also shown. Declaration public virtual string ToString(string format, bool isShowZ) Parameters Type Name Description String format A format string that will be used to format each of the two double type values (see ToString() ). Boolean isShowZ true to show the third \"Z\" or low dependent value coordinate Returns Type Description String A string representation of the PointPair | Improve this Doc View Source ToString(String, String, String) Format this PointPair value using different general format strings for the X, Y, and Z values. Example: a format string of \"e2\" would give \"( 1.23e+001, -1.69e+001 )\". Declaration public string ToString(string formatX, string formatY, string formatZ) Parameters Type Name Description String formatX A format string that will be used to format the X double type value (see ToString() ). String formatY A format string that will be used to format the Y double type value (see ToString() ). String formatZ A format string that will be used to format the Z double type value (see ToString() ). Returns Type Description String A string representation of the PointPair Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.Runtime.Serialization.ISerializable System.ICloneable"
  },
  "api/ZedGraph.PointPair.PointPairComparer.html": {
    "href": "api/ZedGraph.PointPair.PointPairComparer.html",
    "title": "Class PointPair.PointPairComparer",
    "keywords": "Class PointPair.PointPairComparer Compares points based on their x values. Is setup to be used in an ascending order sort. Sort() Inheritance Object PointPair.PointPairComparer Implements IComparer < PointPair > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public class PointPairComparer : IComparer<PointPair> Constructors | Improve this Doc View Source PointPairComparer(SortType) Constructor for PointPairComparer. Declaration public PointPairComparer(SortType type) Parameters Type Name Description SortType type The axis type on which to sort. Methods | Improve this Doc View Source Compare(PointPair, PointPair) Compares two PointPair s. Declaration public int Compare(PointPair l, PointPair r) Parameters Type Name Description PointPair l Point to the left. PointPair r Point to the right. Returns Type Description Int32 -1, 0, or 1 depending on l.X's relation to r.X Implements System.Collections.Generic.IComparer<T>"
  },
  "api/ZedGraph.PointPair.PointPairComparerY.html": {
    "href": "api/ZedGraph.PointPair.PointPairComparerY.html",
    "title": "Class PointPair.PointPairComparerY",
    "keywords": "Class PointPair.PointPairComparerY Compares points based on their y values. Is setup to be used in an ascending order sort. Sort() Inheritance Object PointPair.PointPairComparerY Implements IComparer < PointPair > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public class PointPairComparerY : IComparer<PointPair> Methods | Improve this Doc View Source Compare(PointPair, PointPair) Compares two PointPair s. Declaration public int Compare(PointPair l, PointPair r) Parameters Type Name Description PointPair l Point to the left. PointPair r Point to the right. Returns Type Description Int32 -1, 0, or 1 depending on l.Y's relation to r.Y Implements System.Collections.Generic.IComparer<T>"
  },
  "api/ZedGraph.PointPair4.html": {
    "href": "api/ZedGraph.PointPair4.html",
    "title": "Class PointPair4",
    "keywords": "Class PointPair4 The basic PointPair class holds three data values (X, Y, Z). This class extends the basic PointPair to contain four data values (X, Y, Z, T). Inheritance Object PointPairBase PointPair PointPair4 Implements ICloneable ISerializable Inherited Members PointPair.Z PointPair.Tag PointPair.ICloneable.Clone() PointPair.Clone() PointPair.schema2 PointPair.IsInvalid3D PointPair.LowValue PointPair.ColorValue PointPair.Equals(Object) PointPair.GetHashCode() PointPair.ToString(String, String, String) PointPairBase.Missing PointPairBase.DefaultFormat PointPairBase.X PointPairBase.Y PointPairBase.schema PointPairBase.IsMissing PointPairBase.IsInvalid PointPairBase.IsValueInvalid(Double) PointPairBase.ToString() PointPairBase.ToString(String) PointPairBase.ToString(String, String) Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class PointPair4 : PointPair, ICloneable, ISerializable Constructors | Improve this Doc View Source PointPair4() Default Constructor Declaration public PointPair4() | Improve this Doc View Source PointPair4(Double, Double, Double, Double) Creates a point pair with the specified X, Y, Z, and T value. Declaration public PointPair4(double x, double y, double z, double t) Parameters Type Name Description Double x This pair's x coordinate. Double y This pair's y coordinate. Double z This pair's z coordinate. Double t This pair's t coordinate. | Improve this Doc View Source PointPair4(Double, Double, Double, Double, String) Creates a point pair with the specified X, Y, base value, and label ( Tag ). Declaration public PointPair4(double x, double y, double z, double t, string label) Parameters Type Name Description Double x This pair's x coordinate. Double y This pair's y coordinate. Double z This pair's z coordinate. Double t This pair's t coordinate. String label This pair's string label ( Tag ) | Improve this Doc View Source PointPair4(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected PointPair4(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source PointPair4(PointPair4) The PointPair4 copy constructor. Declaration public PointPair4(PointPair4 rhs) Parameters Type Name Description PointPair4 rhs The basis for the copy. Fields | Improve this Doc View Source schema3 Current schema value that defines the version of the serialized file Declaration public const int schema3 = 11 Field Value Type Description Int32 | Improve this Doc View Source T This PointPair4's T coordinate. Declaration public double T Field Value Type Description Double Properties | Improve this Doc View Source IsInvalid4D Readonly value that determines if either the X, Y, Z, or T coordinate in this PointPair4 is an invalid (not plotable) value. It is considered invalid if it is missing (equal to System.Double.Max), Infinity, or NaN. Declaration public bool IsInvalid4D { get; } Property Value Type Description Boolean true if any value is invalid Methods | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides PointPair.GetObjectData(SerializationInfo, StreamingContext) | Improve this Doc View Source ToString(Boolean) Format this PointPair4 value using the default format. Example: \"( 12.345, -16.876 )\". The two double values are formatted with the \"g\" format type. Declaration public string ToString(bool isShowZT) Parameters Type Name Description Boolean isShowZT true to show the third \"Z\" and fourth \"T\" value coordinates Returns Type Description String A string representation of the PointPair4 | Improve this Doc View Source ToString(String, Boolean) Format this PointPair value using a general format string. Example: a format string of \"e2\" would give \"( 1.23e+001, -1.69e+001 )\". If is true, then the third \"Z\" coordinate is also shown. Declaration public string ToString(string format, bool isShowZT) Parameters Type Name Description String format A format string that will be used to format each of the two double type values (see ToString() ). Boolean isShowZT true to show the third \"Z\" or low dependent value coordinate Returns Type Description String A string representation of the PointPair | Improve this Doc View Source ToString(String, String, String, String) Format this PointPair value using different general format strings for the X, Y, and Z values. Example: a format string of \"e2\" would give \"( 1.23e+001, -1.69e+001 )\". Declaration public string ToString(string formatX, string formatY, string formatZ, string formatT) Parameters Type Name Description String formatX A format string that will be used to format the X double type value (see ToString() ). String formatY A format string that will be used to format the Y double type value (see ToString() ). String formatZ A format string that will be used to format the Z double type value (see ToString() ). String formatT A format string that will be used to format the T double type value (see ToString() ). Returns Type Description String A string representation of the PointPair Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.PointPairBase.html": {
    "href": "api/ZedGraph.PointPairBase.html",
    "title": "Class PointPairBase",
    "keywords": "Class PointPairBase This is a base class that provides base-level functionality for a data point consisting of an (X,Y) pair of double values. Inheritance Object PointPairBase PointPair Implements ISerializable Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class PointPairBase : ISerializable Remarks This class is typically a base class for actual PointPair type implementations. Constructors | Improve this Doc View Source PointPairBase() Default Constructor Declaration public PointPairBase() | Improve this Doc View Source PointPairBase(Double, Double) Creates a point pair with the specified X and Y. Declaration public PointPairBase(double x, double y) Parameters Type Name Description Double x This pair's x coordinate. Double y This pair's y coordinate. | Improve this Doc View Source PointPairBase(PointF) Creates a point pair from the specified PointF struct. Declaration public PointPairBase(PointF pt) Parameters Type Name Description PointF pt The PointF struct from which to get the new PointPair values. | Improve this Doc View Source PointPairBase(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected PointPairBase(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source PointPairBase(PointPairBase) The PointPairBase copy constructor. Declaration public PointPairBase(PointPairBase rhs) Parameters Type Name Description PointPairBase rhs The basis for the copy. Fields | Improve this Doc View Source DefaultFormat The default format to be used for displaying point values via the ToString() method. Declaration public const string DefaultFormat = \"G\" Field Value Type Description String | Improve this Doc View Source Missing Missing values are represented internally using MaxValue . Declaration public const double Missing = 1.7976931348623157E+308 Field Value Type Description Double | Improve this Doc View Source schema Current schema value that defines the version of the serialized file Declaration public const int schema = 11 Field Value Type Description Int32 | Improve this Doc View Source X This PointPair's X coordinate Declaration public double X Field Value Type Description Double | Improve this Doc View Source Y This PointPair's Y coordinate Declaration public double Y Field Value Type Description Double Properties | Improve this Doc View Source IsInvalid Readonly value that determines if either the X or the Y coordinate in this PointPair is an invalid (not plotable) value. It is considered invalid if it is missing (equal to System.Double.Max), Infinity, or NaN. Declaration public bool IsInvalid { get; } Property Value Type Description Boolean true if either value is invalid | Improve this Doc View Source IsMissing Readonly value that determines if either the X or the Y coordinate in this PointPair is a missing value. Declaration public bool IsMissing { get; } Property Value Type Description Boolean true if either value is missing Methods | Improve this Doc View Source Equals(Object) Compare two PointPairBase objects for equality. To be equal, X and Y must be exactly the same between the two objects. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The PointPairBase object to be compared with. Returns Type Description Boolean true if the PointPairBase objects are equal, false otherwise Overrides Object.Equals(Object) | Improve this Doc View Source GetHashCode() Return the HashCode from the base class. Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public virtual void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source IsValueInvalid(Double) static method to determine if the specified point value is invalid. Declaration public static bool IsValueInvalid(double value) Parameters Type Name Description Double value The value to be checked for validity. Returns Type Description Boolean true if the value is invalid, false otherwise Remarks The value is considered invalid if it is Missing , PositiveInfinity , NegativeInfinity or NaN . | Improve this Doc View Source ToString() Format this PointPair value using the default format. Example: \"( 12.345, -16.876 )\". The two double values are formatted with the \"g\" format type. Declaration public override string ToString() Returns Type Description String A string representation of the PointPair Overrides Object.ToString() | Improve this Doc View Source ToString(String) Format this PointPair value using a general format string. Example: a format string of \"e2\" would give \"( 1.23e+001, -1.69e+001 )\". Declaration public string ToString(string format) Parameters Type Name Description String format A format string that will be used to format each of the two double type values (see ToString() ). Returns Type Description String A string representation of the PointPair | Improve this Doc View Source ToString(String, String) Format this PointPair value using different general format strings for the X and Y values. Example: a format string of \"e2\" would give \"( 1.23e+001, -1.69e+001 )\". The Z value is not displayed (see ToString(String, String, String) ). Declaration public string ToString(string formatX, string formatY) Parameters Type Name Description String formatX A format string that will be used to format the X double type value (see ToString() ). String formatY A format string that will be used to format the Y double type value (see ToString() ). Returns Type Description String A string representation of the PointPair Operators | Improve this Doc View Source Implicit(PointPairBase to PointF) Implicit conversion from PointPair to PointF. Note that this conversion can result in data loss, since the data are being cast from a type double (64 bit) to a float (32 bit). Declaration public static implicit operator PointF(PointPairBase pair) Parameters Type Name Description PointPairBase pair The PointPair struct on which to operate Returns Type Description PointF A PointF struct equivalent to the PointPair Implements System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.PointPairCV.html": {
    "href": "api/ZedGraph.PointPairCV.html",
    "title": "Class PointPairCV",
    "keywords": "Class PointPairCV A simple instance that stores a data point (X, Y, Z). This differs from a regular PointPair in that it maps the ColorValue property to an independent value. That is, ColorValue and Z are not related (as they are in the PointPair ). Inheritance Object PointPairBase PointPair PointPairCV Implements ISerializable ICloneable Inherited Members PointPair.Z PointPair.Tag PointPair.ICloneable.Clone() PointPair.Clone() PointPair.schema2 PointPair.IsInvalid3D PointPair.LowValue PointPair.Equals(Object) PointPair.GetHashCode() PointPair.ToString(Boolean) PointPair.ToString(String, Boolean) PointPair.ToString(String, String, String) PointPairBase.Missing PointPairBase.DefaultFormat PointPairBase.X PointPairBase.Y PointPairBase.schema PointPairBase.IsMissing PointPairBase.IsInvalid PointPairBase.IsValueInvalid(Double) PointPairBase.ToString() PointPairBase.ToString(String) PointPairBase.ToString(String, String) Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public class PointPairCV : PointPair, ISerializable, ICloneable Constructors | Improve this Doc View Source PointPairCV(Double, Double, Double) Creates a point pair with the specified X, Y, and base value. Declaration public PointPairCV(double x, double y, double z) Parameters Type Name Description Double x This pair's x coordinate. Double y This pair's y coordinate. Double z This pair's z or lower dependent coordinate. | Improve this Doc View Source PointPairCV(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected PointPairCV(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Fields | Improve this Doc View Source schema3 Current schema value that defines the version of the serialized file Declaration public const int schema3 = 11 Field Value Type Description Int32 Properties | Improve this Doc View Source ColorValue The ColorValue property. This is used with the GradientByColorValue option. Declaration public override double ColorValue { get; set; } Property Value Type Description Double Overrides PointPair.ColorValue Methods | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides PointPair.GetObjectData(SerializationInfo, StreamingContext) Implements System.Runtime.Serialization.ISerializable System.ICloneable"
  },
  "api/ZedGraph.PointPairList.html": {
    "href": "api/ZedGraph.PointPairList.html",
    "title": "Class PointPairList",
    "keywords": "Class PointPairList A collection class containing a list of PointPair objects that define the set of points to be displayed on the curve. Inheritance Object List < PointPair > PointPairList Implements IList < PointPair > ICollection < PointPair > IEnumerable < PointPair > IList ICollection IEnumerable IPointListEdit IPointList ICloneable Inherited Members System.Collections.Generic.List<ZedGraph.PointPair>.System.Collections.IList.get_Item(System.Int32) System.Collections.Generic.List<ZedGraph.PointPair>.System.Collections.IList.set_Item(System.Int32, System.Object) List<PointPair>.AddRange(IEnumerable<PointPair>) List<PointPair>.AsReadOnly() List<PointPair>.BinarySearch(Int32, Int32, PointPair, IComparer<PointPair>) List<PointPair>.BinarySearch(PointPair) List<PointPair>.BinarySearch(PointPair, IComparer<PointPair>) List<PointPair>.Clear() List<PointPair>.Contains(PointPair) List<PointPair>.ConvertAll<TOutput>(Converter<PointPair, TOutput>) List<PointPair>.CopyTo(Int32, PointPair[], Int32, Int32) List<PointPair>.CopyTo(PointPair[]) List<PointPair>.CopyTo(PointPair[], Int32) List<PointPair>.Exists(Predicate<PointPair>) List<PointPair>.Find(Predicate<PointPair>) List<PointPair>.FindAll(Predicate<PointPair>) List<PointPair>.FindIndex(Int32, Int32, Predicate<PointPair>) List<PointPair>.FindIndex(Int32, Predicate<PointPair>) List<PointPair>.FindIndex(Predicate<PointPair>) List<PointPair>.FindLast(Predicate<PointPair>) List<PointPair>.FindLastIndex(Int32, Int32, Predicate<PointPair>) List<PointPair>.FindLastIndex(Int32, Predicate<PointPair>) List<PointPair>.FindLastIndex(Predicate<PointPair>) List<PointPair>.ForEach(Action<PointPair>) List<PointPair>.GetEnumerator() List<PointPair>.GetRange(Int32, Int32) List<PointPair>.IndexOf(PointPair) List<PointPair>.IndexOf(PointPair, Int32) List<PointPair>.IndexOf(PointPair, Int32, Int32) List<PointPair>.InsertRange(Int32, IEnumerable<PointPair>) List<PointPair>.LastIndexOf(PointPair) List<PointPair>.LastIndexOf(PointPair, Int32) List<PointPair>.LastIndexOf(PointPair, Int32, Int32) List<PointPair>.Remove(PointPair) List<PointPair>.RemoveAll(Predicate<PointPair>) List<PointPair>.RemoveAt(Int32) List<PointPair>.RemoveRange(Int32, Int32) List<PointPair>.Reverse() List<PointPair>.Reverse(Int32, Int32) List<PointPair>.Sort(IComparer<PointPair>) List<PointPair>.Sort(Comparison<PointPair>) List<PointPair>.Sort(Int32, Int32, IComparer<PointPair>) List<PointPair>.IEnumerable<PointPair>.GetEnumerator() List<PointPair>.ICollection.CopyTo(Array, Int32) List<PointPair>.IEnumerable.GetEnumerator() List<PointPair>.IList.Add(Object) List<PointPair>.IList.Contains(Object) List<PointPair>.IList.IndexOf(Object) List<PointPair>.IList.Insert(Int32, Object) List<PointPair>.IList.Remove(Object) List<PointPair>.ToArray() List<PointPair>.TrimExcess() List<PointPair>.TrueForAll(Predicate<PointPair>) List<PointPair>.Capacity List<PointPair>.Count List<PointPair>.Item[Int32] List<PointPair>.ICollection<PointPair>.IsReadOnly List<PointPair>.ICollection.IsSynchronized List<PointPair>.ICollection.SyncRoot List<PointPair>.IList.IsFixedSize List<PointPair>.IList.IsReadOnly List<PointPair>.IList.Item[Int32] Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class PointPairList : List<PointPair>, IList<PointPair>, ICollection<PointPair>, IEnumerable<PointPair>, IList, ICollection, IEnumerable, IPointListEdit, IPointList, ICloneable Constructors | Improve this Doc View Source PointPairList() Default constructor for the collection class Declaration public PointPairList() | Improve this Doc View Source PointPairList(Double[], Double[]) Constructor to initialize the PointPairList from two arrays of type double. Declaration public PointPairList(double[] x, double[] y) Parameters Type Name Description Double [] x Double [] y | Improve this Doc View Source PointPairList(Double[], Double[], Double[]) Constructor to initialize the PointPairList from three arrays of type double. Declaration public PointPairList(double[] x, double[] y, double[] baseVal) Parameters Type Name Description Double [] x Double [] y Double [] baseVal | Improve this Doc View Source PointPairList(IPointList) Constructor to initialize the PointPairList from an IPointList Declaration public PointPairList(IPointList list) Parameters Type Name Description IPointList list | Improve this Doc View Source PointPairList(PointPairList) The Copy Constructor Declaration public PointPairList(PointPairList rhs) Parameters Type Name Description PointPairList rhs The PointPairList from which to copy Fields | Improve this Doc View Source _sorted Private field to maintain the sort status of this PointPairList . Use the public property Sorted to access this value. Declaration [CLSCompliant(false)] protected bool _sorted Field Value Type Description Boolean Properties | Improve this Doc View Source Sorted true if the list is currently sorted. Declaration public bool Sorted { get; } Property Value Type Description Boolean See Also Sort() Methods | Improve this Doc View Source Add(Double, Double) Add a single point to the PointPairList from values of type double. Declaration public void Add(double x, double y) Parameters Type Name Description Double x The X value Double y The Y value | Improve this Doc View Source Add(Double, Double, Double) Add a single point to the PointPairList from values of type double. Declaration public void Add(double x, double y, double z) Parameters Type Name Description Double x The X value Double y The Y value Double z The Z or lower dependent axis value | Improve this Doc View Source Add(Double, Double, Double, String) Add a single point to the PointPairList from values of type double. Declaration public void Add(double x, double y, double z, string tag) Parameters Type Name Description Double x The X value Double y The Y value Double z The Z or lower dependent axis value String tag The Tag value for the PointPair | Improve this Doc View Source Add(Double, Double, String) Add a single point to the PointPairList from values of type double. Declaration public void Add(double x, double y, string tag) Parameters Type Name Description Double x The X value Double y The Y value String tag The Tag value for the PointPair | Improve this Doc View Source Add(Double[], Double[]) Add a set of points to the PointPairList from two arrays of type double. If either array is null, then a set of ordinal values is automatically generated in its place (see Ordinal . If the arrays are of different size, then the larger array prevails and the smaller array is padded with Missing values. Declaration public void Add(double[] x, double[] y) Parameters Type Name Description Double [] x A double[] array of X values Double [] y A double[] array of Y values | Improve this Doc View Source Add(Double[], Double[], Double[]) Add a set of points to the PointPairList from three arrays of type double. If the X or Y array is null, then a set of ordinal values is automatically generated in its place (see Ordinal . If the is null, then it is set to zero. If the arrays are of different size, then the larger array prevails and the smaller array is padded with Missing values. Declaration public void Add(double[] x, double[] y, double[] z) Parameters Type Name Description Double [] x A double[] array of X values Double [] y A double[] array of Y values Double [] z A double[] array of Z or lower-dependent axis values | Improve this Doc View Source Add(PointPair) Add a PointPair object to the collection at the end of the list. Declaration public void Add(PointPair point) Parameters Type Name Description PointPair point The PointPair object to be added | Improve this Doc View Source Add(PointPairList) Add a PointPairList object to the collection at the end of the list. Declaration public void Add(PointPairList pointList) Parameters Type Name Description PointPairList pointList A reference to the PointPairList object to be added | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public PointPairList Clone() Returns Type Description PointPairList A new, independent copy of this class | Improve this Doc View Source Equals(Object) Compare two PointPairList objects to see if they are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The PointPairList to be compared with for equality. Returns Type Description Boolean true if the PointPairList objects are equal, false otherwise. Overrides Object.Equals(Object) Remarks Equality is based on equal count of PointPair items, and each individual PointPair must be equal (as per the Equals(Object) method. | Improve this Doc View Source GetHashCode() Return the HashCode from the base class. Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() | Improve this Doc View Source IndexOfTag(String) Return the zero-based position index of the PointPair with the specified label Tag . Declaration public int IndexOfTag(string label) Parameters Type Name Description String label The String label that is in the Tag attribute of the item to be found. Returns Type Description Int32 The zero-based index of the specified PointPair , or -1 if the PointPair is not in the list Remarks The Tag object must be of type String for this method to find it. | Improve this Doc View Source Insert(Int32, Double, Double) Add a single point (from values of type double ) to the PointPairList at the specified, zero-based, index location. Declaration public void Insert(int index, double x, double y) Parameters Type Name Description Int32 index The zero-based ordinal index where the point is to be added in the list. Double x The X value Double y The Y value | Improve this Doc View Source Insert(Int32, Double, Double, Double) Add a single point (from values of type double ) to the PointPairList at the specified, zero-based, index location. Declaration public void Insert(int index, double x, double y, double z) Parameters Type Name Description Int32 index The zero-based ordinal index where the point is to be added in the list. Double x The X value Double y The Y value Double z The Z or lower dependent axis value | Improve this Doc View Source Insert(Int32, PointPair) Add a PointPair object to the collection at the specified, zero-based, index location. Declaration public void Insert(int index, PointPair point) Parameters Type Name Description Int32 index The zero-based ordinal index where the point is to be added in the list. PointPair point The PointPair object to be added. | Improve this Doc View Source InterpolateX(Double) Linearly interpolate the data to find an arbitraty Y value that corresponds to the specified X value. Declaration public double InterpolateX(double xTarget) Parameters Type Name Description Double xTarget The target X value on which to interpolate Returns Type Description Double The Y value that corresponds to the value. Remarks This method uses linear interpolation with a binary search algorithm. It therefore requires that the x data be monotonically increasing. Missing values are not allowed. This method will extrapolate outside the range of the PointPairList if necessary. | Improve this Doc View Source InterpolateY(Double) Linearly interpolate the data to find an arbitraty X value that corresponds to the specified Y value. Declaration public double InterpolateY(double yTarget) Parameters Type Name Description Double yTarget The target Y value on which to interpolate Returns Type Description Double The X value that corresponds to the value. Remarks This method uses linear interpolation with a binary search algorithm. It therefore requires that the Y data be monotonically increasing. Missing values are not allowed. This method will extrapolate outside the range of the PointPairList if necessary. | Improve this Doc View Source LinearRegression(IPointList, Int32) Use linear regression to form a least squares fit of an existing IPointList instance. Declaration public PointPairList LinearRegression(IPointList points, int pointCount) Parameters Type Name Description IPointList points An IPointList instance containing the data to be regressed. Int32 pointCount The number of desired points to be included in the resultant PointPairList . Returns Type Description PointPairList A new PointPairList containing the resultant data fit. Remarks The output PointPairList will cover the same X range of data as the original dataset. | Improve this Doc View Source LinearRegression(IPointList, Int32, Double, Double) Use linear regression to form a least squares fit of an existing IPointList instance. Declaration public PointPairList LinearRegression(IPointList points, int pointCount, double minX, double maxX) Parameters Type Name Description IPointList points An IPointList instance containing the data to be regressed. Int32 pointCount The number of desired points to be included in the resultant PointPairList . Double minX The minimum X value of the resultant PointPairList . Double maxX The maximum X value of the resultant PointPairList . Returns Type Description PointPairList A new PointPairList containing the resultant data fit. | Improve this Doc View Source SetX(Double[]) Set the X values for this PointPairList from the specified array of double values. Declaration public void SetX(double[] x) Parameters Type Name Description Double [] x An array of double values that will replace the existing X values in the PointPairList . Remarks If has more values than this list, then the extra values will be ignored. If has less values, then the corresponding PointPairList values will not be changed. That is, if the PointPairList has 20 values and has 15 values, then the first 15 values of the PointPairList will be changed, and the last 5 values will not be changed. | Improve this Doc View Source SetY(Double[]) Set the Y values for this PointPairList from the specified array of double values. Declaration public void SetY(double[] y) Parameters Type Name Description Double [] y An array of double values that will replace the existing Y values in the PointPairList . Remarks If has more values than this list, then the extra values will be ignored. If has less values, then the corresponding PointPairList values will not be changed. That is, if the PointPairList has 20 values and has 15 values, then the first 15 values of the PointPairList will be changed, and the last 5 values will not be changed. | Improve this Doc View Source SetZ(Double[]) Set the Z values for this PointPairList from the specified array of double values. Declaration public void SetZ(double[] z) Parameters Type Name Description Double [] z An array of double values that will replace the existing Z values in the PointPairList . Remarks If has more values than this list, then the extra values will be ignored. If has less values, then the corresponding PointPairList values will not be changed. That is, if the PointPairList has 20 values and has 15 values, then the first 15 values of the PointPairList will be changed, and the last 5 values will not be changed. | Improve this Doc View Source Sort() Sorts the list according to the point x values. Will not sort the list if the list is already sorted. Declaration public bool Sort() Returns Type Description Boolean If the list was sorted before sort was called | Improve this Doc View Source Sort(SortType) Sorts the list according to the point values . Will not sort the list if the list is already sorted. Declaration public bool Sort(SortType type) Parameters Type Name Description SortType type Returns Type Description Boolean If the list was sorted before sort was called | Improve this Doc View Source SplineInterpolateX(Double, Double) Use Cardinal Splines to Interpolate the data to find an arbitraty Y value that corresponds to the specified X value. Declaration public double SplineInterpolateX(double xTarget, double tension) Parameters Type Name Description Double xTarget The target X value on which to interpolate Double tension The tension setting that controls the curvature of the spline fit. Typical values are between 0 and 1, where 0 is a linear fit, and 1 is lots of \"roundness\". Values greater than 1 may give odd results. Returns Type Description Double The Y value that corresponds to the value. Remarks This method uses cardinal spline interpolation with a binary search algorithm. It therefore requires that the x data be monotonically increasing. Missing values are not allowed. This method will not extrapolate outside the range of the PointPairList (it returns Missing if extrapolation would be required). WARNING: Cardinal spline interpolation can generate curves with non-unique X values for higher tension settings. That is, there may be multiple X values for the same Y value. This routine follows the path of the spline curve until it reaches the FIRST OCCURRENCE of the target X value. It does not check to see if other solutions are possible. | Improve this Doc View Source SumX(PointPairList) Add the X values from the specified PointPairList object to this PointPairList . If has more values than this list, then the extra values will be ignored. If has less values, the missing values are assumed to be zero. Declaration public void SumX(PointPairList sumList) Parameters Type Name Description PointPairList sumList A reference to the PointPairList object to be summed into the this PointPairList . | Improve this Doc View Source SumY(PointPairList) Add the Y values from the specified PointPairList object to this PointPairList . If has more values than this list, then the extra values will be ignored. If has less values, the missing values are assumed to be zero. Declaration public void SumY(PointPairList sumList) Parameters Type Name Description PointPairList sumList A reference to the PointPairList object to be summed into the this PointPairList . Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable IPointListEdit IPointList System.ICloneable See Also BasicArrayPointList IPointList"
  },
  "api/ZedGraph.PolyObj.html": {
    "href": "api/ZedGraph.PolyObj.html",
    "title": "Class PolyObj",
    "keywords": "Class PolyObj A class that represents a bordered and/or filled polygon object on the graph. A list of PolyObj objects is maintained by the GraphObjList collection class. Inheritance Object GraphObj BoxObj PolyObj Implements ICloneable ISerializable Inherited Members BoxObj._fill BoxObj._border BoxObj.Fill BoxObj.Border BoxObj.schema2 BoxObj.GetCoords(PaneBase, Graphics, Single, String, String) GraphObj._location GraphObj._isVisible GraphObj._isClippedToChartRect GraphObj.Tag GraphObj.Location GraphObj.ZOrder GraphObj.IsVisible GraphObj.IsClippedToChartRect GraphObj.Link GraphObj.IsInFrontOfData GraphObj.schema Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class PolyObj : BoxObj, ICloneable, ISerializable Constructors | Improve this Doc View Source PolyObj() A default constructor that creates a PolyObj from an empty PointD array. Other properties are defaulted. Declaration public PolyObj() | Improve this Doc View Source PolyObj(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected PolyObj(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source PolyObj(PointD[]) A constructor that allows the position of the PolyObj to be pre-specified. Other properties are defaulted. Declaration public PolyObj(PointD[] points) Parameters Type Name Description PointD [] points The PointD array that defines the polygon. This will be in units determined by CoordinateFrame . | Improve this Doc View Source PolyObj(PointD[], Color, Color) A constructor that allows the position, border color, and solid fill color of the PolyObj to be pre-specified. Declaration public PolyObj(PointD[] points, Color borderColor, Color fillColor) Parameters Type Name Description PointD [] points The PointD array that defines the polygon. This will be in units determined by CoordinateFrame . Color borderColor An arbitrary Color specification for the box border Color fillColor An arbitrary Color specification for the box fill (will be a solid color fill) | Improve this Doc View Source PolyObj(PointD[], Color, Color, Color) A constructor that allows the position, border color, and two-color gradient fill colors of the PolyObj to be pre-specified. Declaration public PolyObj(PointD[] points, Color borderColor, Color fillColor1, Color fillColor2) Parameters Type Name Description PointD [] points The PointD array that defines the polygon. This will be in units determined by CoordinateFrame . Color borderColor An arbitrary Color specification for the box border Color fillColor1 An arbitrary Color specification for the start of the box gradient fill Color fillColor2 An arbitrary Color specification for the end of the box gradient fill | Improve this Doc View Source PolyObj(PolyObj) The Copy Constructor Declaration public PolyObj(PolyObj rhs) Parameters Type Name Description PolyObj rhs The PolyObj object from which to copy Fields | Improve this Doc View Source schema3 Current schema value that defines the version of the serialized file Declaration public const int schema3 = 11 Field Value Type Description Int32 Properties | Improve this Doc View Source IsClosedFigure Gets or sets a value that determines if the polygon will be automatically closed. true to close the figure, false to leave it \"open.\" Declaration public bool IsClosedFigure { get; set; } Property Value Type Description Boolean Remarks This boolean determines whether or not the CloseFigure() method will be called to fully close the path of the polygon. This value defaults to true, and for any closed figure it should fine. If you want to draw a line that does not close into a shape, then you should set this value to false. For a figure that is naturally closed (e.g., the first point of the polygon is the same as the last point), leaving this value set to false may result in minor pixel artifacts due to rounding. | Improve this Doc View Source Points Gets or sets the PointD array that defines the polygon. This will be in units determined by CoordinateFrame . Declaration public PointD[] Points { get; set; } Property Value Type Description PointD [] Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public PolyObj Clone() Returns Type Description PolyObj A new, independent copy of this class | Improve this Doc View Source Draw(Graphics, PaneBase, Single) Render this object to the specified Graphics device. Declaration public override void Draw(Graphics g, PaneBase pane, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. PaneBase pane A reference to the PaneBase object that is the parent or owner of this object. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Overrides BoxObj.Draw(Graphics, PaneBase, Single) Remarks This method is normally only called by the Draw method of the parent GraphObjList collection object. | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides BoxObj.GetObjectData(SerializationInfo, StreamingContext) | Improve this Doc View Source PointInBox(PointF, PaneBase, Graphics, Single) Determine if the specified screen point lies inside the bounding box of this PolyObj . Declaration public override bool PointInBox(PointF pt, PaneBase pane, Graphics g, float scaleFactor) Parameters Type Name Description PointF pt The screen point, in pixels PaneBase pane A reference to the PaneBase object that is the parent or owner of this object. Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Returns Type Description Boolean true if the point lies in the bounding box, false otherwise Overrides BoxObj.PointInBox(PointF, PaneBase, Graphics, Single) Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.RadarPointList.html": {
    "href": "api/ZedGraph.RadarPointList.html",
    "title": "Class RadarPointList",
    "keywords": "Class RadarPointList A class containing a set of data values to be plotted as a RadarPlot. This class will effectively convert the data into PointPair objects by converting the polar coordinates to rectangular coordinates Inheritance Object List < PointPair > RadarPointList Implements IList < PointPair > ICollection < PointPair > IEnumerable < PointPair > IList ICollection IEnumerable IPointListEdit IPointList ICloneable Inherited Members System.Collections.Generic.List<ZedGraph.PointPair>.System.Collections.IList.get_Item(System.Int32) System.Collections.Generic.List<ZedGraph.PointPair>.System.Collections.IList.set_Item(System.Int32, System.Object) List<PointPair>.Add(PointPair) List<PointPair>.AddRange(IEnumerable<PointPair>) List<PointPair>.AsReadOnly() List<PointPair>.BinarySearch(Int32, Int32, PointPair, IComparer<PointPair>) List<PointPair>.BinarySearch(PointPair) List<PointPair>.BinarySearch(PointPair, IComparer<PointPair>) List<PointPair>.Clear() List<PointPair>.Contains(PointPair) List<PointPair>.ConvertAll<TOutput>(Converter<PointPair, TOutput>) List<PointPair>.CopyTo(Int32, PointPair[], Int32, Int32) List<PointPair>.CopyTo(PointPair[]) List<PointPair>.CopyTo(PointPair[], Int32) List<PointPair>.Exists(Predicate<PointPair>) List<PointPair>.Find(Predicate<PointPair>) List<PointPair>.FindAll(Predicate<PointPair>) List<PointPair>.FindIndex(Int32, Int32, Predicate<PointPair>) List<PointPair>.FindIndex(Int32, Predicate<PointPair>) List<PointPair>.FindIndex(Predicate<PointPair>) List<PointPair>.FindLast(Predicate<PointPair>) List<PointPair>.FindLastIndex(Int32, Int32, Predicate<PointPair>) List<PointPair>.FindLastIndex(Int32, Predicate<PointPair>) List<PointPair>.FindLastIndex(Predicate<PointPair>) List<PointPair>.ForEach(Action<PointPair>) List<PointPair>.GetEnumerator() List<PointPair>.GetRange(Int32, Int32) List<PointPair>.IndexOf(PointPair) List<PointPair>.IndexOf(PointPair, Int32) List<PointPair>.IndexOf(PointPair, Int32, Int32) List<PointPair>.Insert(Int32, PointPair) List<PointPair>.InsertRange(Int32, IEnumerable<PointPair>) List<PointPair>.LastIndexOf(PointPair) List<PointPair>.LastIndexOf(PointPair, Int32) List<PointPair>.LastIndexOf(PointPair, Int32, Int32) List<PointPair>.Remove(PointPair) List<PointPair>.RemoveAll(Predicate<PointPair>) List<PointPair>.RemoveAt(Int32) List<PointPair>.RemoveRange(Int32, Int32) List<PointPair>.Reverse() List<PointPair>.Reverse(Int32, Int32) List<PointPair>.Sort() List<PointPair>.Sort(IComparer<PointPair>) List<PointPair>.Sort(Comparison<PointPair>) List<PointPair>.Sort(Int32, Int32, IComparer<PointPair>) List<PointPair>.IEnumerable<PointPair>.GetEnumerator() List<PointPair>.ICollection.CopyTo(Array, Int32) List<PointPair>.IEnumerable.GetEnumerator() List<PointPair>.IList.Add(Object) List<PointPair>.IList.Contains(Object) List<PointPair>.IList.IndexOf(Object) List<PointPair>.IList.Insert(Int32, Object) List<PointPair>.IList.Remove(Object) List<PointPair>.ToArray() List<PointPair>.TrimExcess() List<PointPair>.TrueForAll(Predicate<PointPair>) List<PointPair>.Capacity List<PointPair>.ICollection<PointPair>.IsReadOnly List<PointPair>.ICollection.IsSynchronized List<PointPair>.ICollection.SyncRoot List<PointPair>.IList.IsFixedSize List<PointPair>.IList.IsReadOnly List<PointPair>.IList.Item[Int32] Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class RadarPointList : List<PointPair>, IList<PointPair>, ICollection<PointPair>, IEnumerable<PointPair>, IList, ICollection, IEnumerable, IPointListEdit, IPointList, ICloneable Constructors | Improve this Doc View Source RadarPointList() Default Constructor Declaration public RadarPointList() | Improve this Doc View Source RadarPointList(RadarPointList) Copy Constructor Declaration public RadarPointList(RadarPointList rhs) Parameters Type Name Description RadarPointList rhs Properties | Improve this Doc View Source Clockwise Indicates if points should be added in clockwise or counter-clockwise order Declaration public bool Clockwise { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Count gets the number of points available in the list Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source Item[Int32] Indexer to access the specified PointPair object by its ordinal position in the list. This method does the calculations to convert the data from polar to rectangular coordinates. Declaration public PointPair this[int index] { get; set; } Parameters Type Name Description Int32 index The ordinal position (zero-based) of the PointPair object to be accessed. Property Value Type Description PointPair A PointPair object reference. | Improve this Doc View Source Rotation Sets the angular rotation (starting angle) for the initial axis Declaration public double Rotation { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source Add(Double, Double) Add a single point to the RadarPointList from two values of type double. Declaration public void Add(double r, double z) Parameters Type Name Description Double r The radial coordinate value Double z The 'Z' coordinate value, which is not normally used for plotting, but can be used for GradientByZ type fills | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public RadarPointList Clone() Returns Type Description RadarPointList A new, independent copy of this class Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable IPointListEdit IPointList System.ICloneable See Also BasicArrayPointList IPointList IPointListEdit"
  },
  "api/ZedGraph.RenderModeType.html": {
    "href": "api/ZedGraph.RenderModeType.html",
    "title": "Enum RenderModeType",
    "keywords": "Enum RenderModeType Enum for specifying the type of data to be returned by the ZedGraphWeb Render() method. Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public enum RenderModeType Fields Name Description ImageTag Renders as an IMG tag referencing a local generated image. ContentType stays text. RawImage Renders the binary image. ContentType is changed accordingly."
  },
  "api/ZedGraph.ReversibleFrame.html": {
    "href": "api/ZedGraph.ReversibleFrame.html",
    "title": "Class ReversibleFrame",
    "keywords": "Class ReversibleFrame The reversible frame draws a dashed rectangle Inheritance Object ReversibleFrame Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public class ReversibleFrame Methods | Improve this Doc View Source Draw(Graphics, Color, Rectangle) Draws the reversible frame with the given background color for the specified control rectangle. Declaration public static void Draw(Graphics g, Color backgroundColor, Rectangle rectangle) Parameters Type Name Description Graphics g The graphics object. Color backgroundColor Color of the background. Rectangle rectangle The rectangle."
  },
  "api/ZedGraph.RollingPointPairList.html": {
    "href": "api/ZedGraph.RollingPointPairList.html",
    "title": "Class RollingPointPairList",
    "keywords": "Class RollingPointPairList A class that provides a rolling list of PointPair objects. This is essentially a first-in-first-out (FIFO) queue with a fixed capacity which allows 'rolling' (or oscilloscope like) graphs to be be animated without having the overhead of an ever-growing ArrayList. The queue is constructed with a fixed capacity and new points can be enqueued. When the capacity is reached the oldest (first in) PointPair is overwritten. However, when accessing via IPointList , the PointPair objects are seen in the order in which they were enqeued. RollingPointPairList supports data editing through the IPointListEdit interface. Colin Green with mods by John Champion $Date: 2007-11-05 04:33:26 $ Inheritance Object RollingPointPairList Implements ISerializable IPointListEdit IPointList ICloneable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class RollingPointPairList : ISerializable, IPointListEdit, IPointList, ICloneable Constructors | Improve this Doc View Source RollingPointPairList(Int32) Constructs an empty buffer with the specified capacity. Declaration public RollingPointPairList(int capacity) Parameters Type Name Description Int32 capacity Number of elements in the rolling list. This number cannot be changed once the RollingPointPairList is constructed. | Improve this Doc View Source RollingPointPairList(Int32, Boolean) Constructs an empty buffer with the specified capacity. Pre-allocates space for all PointPair's in the list if preLoad is true. Declaration public RollingPointPairList(int capacity, bool preLoad) Parameters Type Name Description Int32 capacity Number of elements in the rolling list. This number cannot be changed once the RollingPointPairList is constructed. Boolean preLoad true to pre-allocate all PointPair instances in the list, false otherwise. Note that in order to be memory efficient, the Add(Double, Double, Double) method should be used to add data. Avoid the Add(PointPair) method. See Also Add(Double, Double, Double) | Improve this Doc View Source RollingPointPairList(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected RollingPointPairList(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source RollingPointPairList(IPointList) Constructs a buffer with a copy of the items within the provided IPointList . The Capacity is set to the length of the provided list. Declaration public RollingPointPairList(IPointList rhs) Parameters Type Name Description IPointList rhs The IPointList to be copied. Fields | Improve this Doc View Source _headIdx The index of the previously enqueued item. -1 if buffer is empty. Declaration [CLSCompliant(false)] protected int _headIdx Field Value Type Description Int32 | Improve this Doc View Source _mBuffer An array of PointPair objects that acts as the underlying buffer. Declaration [CLSCompliant(false)] protected PointPair[] _mBuffer Field Value Type Description PointPair [] | Improve this Doc View Source _tailIdx The index of the next item to be dequeued. -1 if buffer is empty. Declaration [CLSCompliant(false)] protected int _tailIdx Field Value Type Description Int32 | Improve this Doc View Source schema Current schema value that defines the version of the serialized file Declaration public const int schema = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source Capacity Gets the capacity of the rolling buffer. Declaration public int Capacity { get; } Property Value Type Description Int32 | Improve this Doc View Source Count Gets the count of items within the rolling buffer. Note that this may be less than the capacity. Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source IsEmpty Gets a bolean that indicates if the buffer is empty. Alternatively you can test Count==0. Declaration public bool IsEmpty { get; } Property Value Type Description Boolean | Improve this Doc View Source Item[Int32] Gets or sets the PointPair at the specified index in the buffer. Declaration public PointPair this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description PointPair Remarks Index must be within the current size of the buffer, e.g., the set method will not expand the buffer even if Capacity is available Methods | Improve this Doc View Source Add(Double, Double) Add a set of values onto the head of the queue, overwriting old values if the buffer is full. Declaration public void Add(double x, double y) Parameters Type Name Description Double x The X value Double y The Y value Remarks This method is much more efficient that the Add(PointPair) method, since it does not require that a new PointPair instance be provided. If the buffer already contains a PointPair at the head position, then the x, y, z, and tag values will be copied into the existing PointPair. Otherwise, a new PointPair instance must be created. In this way, each PointPair position in the rolling list will only be allocated one time. To truly be memory efficient, the Remove() , RemoveAt(Int32) , and Pop() methods should be avoided. | Improve this Doc View Source Add(Double, Double, Double) Add a set of values onto the head of the queue, overwriting old values if the buffer is full. Declaration public void Add(double x, double y, double z) Parameters Type Name Description Double x The X value Double y The Y value Double z The Z value Remarks This method is much more efficient that the Add(PointPair) method, since it does not require that a new PointPair instance be provided. If the buffer already contains a PointPair at the head position, then the x, y, z, and tag values will be copied into the existing PointPair. Otherwise, a new PointPair instance must be created. In this way, each PointPair position in the rolling list will only be allocated one time. To truly be memory efficient, the Remove() , RemoveAt(Int32) , and Pop() methods should be avoided. | Improve this Doc View Source Add(Double, Double, Double, Object) Add a set of values onto the head of the queue, overwriting old values if the buffer is full. Declaration public void Add(double x, double y, double z, object tag) Parameters Type Name Description Double x The X value Double y The Y value Double z The Z value Object tag The Tag value for the PointPair Remarks This method is much more efficient that the Add(PointPair) method, since it does not require that a new PointPair instance be provided. If the buffer already contains a PointPair at the head position, then the x, y, z, and tag values will be copied into the existing PointPair. Otherwise, a new PointPair instance must be created. In this way, each PointPair position in the rolling list will only be allocated one time. To truly be memory efficient, the Remove() , RemoveAt(Int32) , and Pop() methods should be avoided. Also, the tag property for this method should be null, since it is a reference type. | Improve this Doc View Source Add(Double, Double, Object) Add a set of values onto the head of the queue, overwriting old values if the buffer is full. Declaration public void Add(double x, double y, object tag) Parameters Type Name Description Double x The X value Double y The Y value Object tag The Tag value for the PointPair Remarks This method is much more efficient that the Add(PointPair) method, since it does not require that a new PointPair instance be provided. If the buffer already contains a PointPair at the head position, then the x, y, z, and tag values will be copied into the existing PointPair. Otherwise, a new PointPair instance must be created. In this way, each PointPair position in the rolling list will only be allocated one time. To truly be memory efficient, the Remove() , RemoveAt(Int32) , and Pop() methods should be avoided. Also, the tag property for this method should be null, since it is a reference type. | Improve this Doc View Source Add(Double[], Double[]) Add a set of points to the RollingPointPairList from two arrays of type double. If either array is null, then a set of ordinal values is automatically generated in its place (see Ordinal ). If the arrays are of different size, then the larger array prevails and the smaller array is padded with Missing values. Declaration public void Add(double[] x, double[] y) Parameters Type Name Description Double [] x A double[] array of X values Double [] y A double[] array of Y values | Improve this Doc View Source Add(Double[], Double[], Double[]) Add a set of points to the RollingPointPairList from three arrays of type double. If the X or Y array is null, then a set of ordinal values is automatically generated in its place (see Ordinal . If the value is null, then it is set to zero. If the arrays are of different size, then the larger array prevails and the smaller array is padded with Missing values. Declaration public void Add(double[] x, double[] y, double[] z) Parameters Type Name Description Double [] x A double[] array of X values Double [] y A double[] array of Y values Double [] z A double[] array of Z values | Improve this Doc View Source Add(IPointList) Add an IPointList object to the head of the queue. Declaration public void Add(IPointList pointList) Parameters Type Name Description IPointList pointList A reference to the IPointList object to be added | Improve this Doc View Source Add(PointPair) Add a PointPair onto the head of the queue, overwriting old values if the buffer is full. Declaration public void Add(PointPair item) Parameters Type Name Description PointPair item The PointPair to be added. | Improve this Doc View Source Clear() Clear the buffer of all PointPair objects. Note that the Capacity remains unchanged. Declaration public void Clear() | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public RollingPointPairList Clone() Returns Type Description RollingPointPairList A new, independent copy of this class | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public virtual void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source Peek() Peek at the PointPair item at the head of the queue. Declaration public PointPair Peek() Returns Type Description PointPair The PointPair item at the head of the queue. Throws an InvalidOperationException if the buffer was empty. | Improve this Doc View Source Pop() Pop an item off the head of the queue. Declaration public PointPair Pop() Returns Type Description PointPair The popped item. Throws an exception if the buffer was empty. | Improve this Doc View Source Remove() Remove an old item from the tail of the queue. Declaration public PointPair Remove() Returns Type Description PointPair The removed item. Throws an InvalidOperationException if the buffer was empty. Check the buffer's length ( Count ) or the IsEmpty property to avoid exceptions. | Improve this Doc View Source RemoveAt(Int32) Remove the PointPair at the specified index Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index The ordinal position of the item to be removed. Throws an ArgumentOutOfRangeException if index is less than zero or greater than or equal to Count Remarks All items in the queue that lie after index will be shifted back by one, and the queue will be one item shorter. | Improve this Doc View Source RemoveRange(Int32, Int32) Remove a range of PointPair objects starting at the specified index Declaration public void RemoveRange(int index, int count) Parameters Type Name Description Int32 index The ordinal position of the item to be removed. Throws an ArgumentOutOfRangeException if index is less than zero or greater than or equal to Count Int32 count The number of items to be removed. Throws an ArgumentOutOfRangeException if count is less than zero or greater than the total available items in the queue Remarks All items in the queue that lie after index will be shifted back, and the queue will be count items shorter. Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.Runtime.Serialization.ISerializable IPointListEdit IPointList System.ICloneable"
  },
  "api/ZedGraph.Sample.html": {
    "href": "api/ZedGraph.Sample.html",
    "title": "Class Sample",
    "keywords": "Class Sample A simple storage class to maintain an individual sampling of data Inheritance Object Sample Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public class Sample Properties | Improve this Doc View Source Position The position at sample time Declaration public double Position { get; set; } Property Value Type Description Double | Improve this Doc View Source Time The time of the sample Declaration public DateTime Time { get; set; } Property Value Type Description DateTime | Improve this Doc View Source Velocity The instantaneous velocity at sample time Declaration public double Velocity { get; set; } Property Value Type Description Double"
  },
  "api/ZedGraph.SampleMultiPointList.html": {
    "href": "api/ZedGraph.SampleMultiPointList.html",
    "title": "Class SampleMultiPointList",
    "keywords": "Class SampleMultiPointList A sample class that holds an internal collection, and implements the IPointList interface so that it can be used by ZedGraph as curve data. Inheritance Object SampleMultiPointList Implements IPointList ICloneable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class SampleMultiPointList : IPointList, ICloneable Remarks This particular class efficiently implements the data storage so that the class can be cloned without duplicating the data points. For example, you can create a SampleMultiPointList , populate it with values, and set XData = Time and YData = Distance . You can then clone this SampleMultiPointList to a new one, and set YData = Velocity . Each of these SampleMultiPointList 's can then be used as an AddCurve(String, IPointList, Color) argument, thereby plotting a distance vs time curve and a velocity vs time curve. There will still be only one copy of the data in memory. Constructors | Improve this Doc View Source SampleMultiPointList() Default constructor Declaration public SampleMultiPointList() | Improve this Doc View Source SampleMultiPointList(SampleMultiPointList) The Copy Constructor. This method does NOT duplicate the data, it merely makes another \"Window\" into the same collection. You can make multiple copies and set the XData and/or YData properties to different values to plot different data, while maintaining only one copy of the original values. Declaration public SampleMultiPointList(SampleMultiPointList rhs) Parameters Type Name Description SampleMultiPointList rhs The SampleMultiPointList from which to copy Fields | Improve this Doc View Source XData Determines what X data will be returned by the indexer of this list. Declaration public PerfDataType XData Field Value Type Description PerfDataType | Improve this Doc View Source YData Determines what Y data will be returned by the indexer of this list. Declaration public PerfDataType YData Field Value Type Description PerfDataType Properties | Improve this Doc View Source Count Gets the number of data points in the collection Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source Item[Int32] Indexer to access the data. This gets the appropriate data and converts to the PointPair struct that is compatible with ZedGraph. The actual data returned depends on the values of XData and YData . Declaration public PointPair this[int index] { get; } Parameters Type Name Description Int32 index The ordinal position of the desired point in the list Property Value Type Description PointPair A PointPair corresponding to the specified ordinal data position Methods | Improve this Doc View Source Add(PerformanceData) Adds the specified PerformanceData struct to the end of the collection. Declaration public int Add(PerformanceData perfData) Parameters Type Name Description PerformanceData perfData A PerformanceData struct to be added Returns Type Description Int32 The ordinal position in the collection where the values were added | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public SampleMultiPointList Clone() Returns Type Description SampleMultiPointList A new, independent copy of this class | Improve this Doc View Source Insert(Int32, PerformanceData) Insert the specified PerformanceData struct into the list at the specified ordinal location. Declaration public void Insert(int index, PerformanceData perfData) Parameters Type Name Description Int32 index The ordinal location at which to insert PerformanceData perfData The PerformanceData struct to be inserted | Improve this Doc View Source RemoveAt(Int32) Remove the PerformanceData struct from the list at the specified ordinal location. Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index The ordinal location of the PerformanceData struct to be removed Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements IPointList System.ICloneable"
  },
  "api/ZedGraph.SamplePointList.html": {
    "href": "api/ZedGraph.SamplePointList.html",
    "title": "Class SamplePointList",
    "keywords": "Class SamplePointList A collection class to maintain a set of samples Inheritance Object SamplePointList Implements IPointList ICloneable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class SamplePointList : IPointList, ICloneable Constructors | Improve this Doc View Source SamplePointList() default constructor Declaration public SamplePointList() | Improve this Doc View Source SamplePointList(SamplePointList) copy constructor -- this returns a copy of the structure, but it does not duplicate the data (it just keeps a reference to the original) Declaration public SamplePointList(SamplePointList rhs) Parameters Type Name Description SamplePointList rhs The SamplePointList to be copied Fields | Improve this Doc View Source XType Determines what data type gets plotted for the X values Declaration public SampleType XType Field Value Type Description SampleType | Improve this Doc View Source YType Determines what data type gets plotted for the Y values Declaration public SampleType YType Field Value Type Description SampleType Properties | Improve this Doc View Source Count Gets the number of samples in the collection Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source Item[Int32] Indexer: get the Sample instance at the specified ordinal position in the list Declaration public PointPair this[int index] { get; } Parameters Type Name Description Int32 index The ordinal position in the list of samples Property Value Type Description PointPair Returns a PointPair instance containing the data specified by XType and YType Methods | Improve this Doc View Source Add(Sample) Append a sample to the collection Declaration public int Add(Sample sample) Parameters Type Name Description Sample sample The sample to append Returns Type Description Int32 The ordinal position at which the sample was added | Improve this Doc View Source Clone() typesafe clone method Declaration public SamplePointList Clone() Returns Type Description SamplePointList A new cloned SamplePointList. This returns a copy of the structure, but it does not duplicate the data (it just keeps a reference to the original) | Improve this Doc View Source GetValue(Sample, SampleType) Get the specified data type from the specified sample Declaration public double GetValue(Sample sample, SampleType type) Parameters Type Name Description Sample sample The sample instance of interest SampleType type The data type to be extracted from the sample Returns Type Description Double A double value representing the requested data Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Declaration object ICloneable.Clone() Returns Type Description Object Implements IPointList System.ICloneable"
  },
  "api/ZedGraph.SampleType.html": {
    "href": "api/ZedGraph.SampleType.html",
    "title": "Enum SampleType",
    "keywords": "Enum SampleType enumeration used to indicate which type of data will be plotted. Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public enum SampleType Fields Name Description Position Designates the \"Position\" property will be used Time Designates the \"Time\" property will be used TimeDiff Designates the \"Time since start\" property will be used VelocityAvg Designates the Average Velocity property will be used VelocityInst Designates the Instantaneous Velocity property will be used"
  },
  "api/ZedGraph.Scale.Default.html": {
    "href": "api/ZedGraph.Scale.Default.html",
    "title": "Struct Scale.Default",
    "keywords": "Struct Scale.Default A simple struct that defines the default property values for the Scale class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source Align The default alignment of the Axis tic labels. This value controls whether the inside, center, or outside edges of the text labels are aligned. Declaration public static AlignP Align Field Value Type Description AlignP See Also AlignP | Improve this Doc View Source AlignH The default alignment of the Axis tic labels. This value controls whether the left, center, or right edges of the text labels are aligned. Declaration public static AlignH AlignH Field Value Type Description AlignH See Also AlignH | Improve this Doc View Source EdgeTolerance Determines the size of the band at the beginning and end of the axis that will have labels omitted if the axis is shifted due to a non-default location using the Cross property. Declaration public static float EdgeTolerance Field Value Type Description Single Remarks This parameter applies only when CrossAuto is false. It is scaled according to the size of the graph based on BaseDimension . When a non-default axis location is selected, the first and last labels on that axis will overlap the opposing axis frame. This parameter allows those labels to be omitted to avoid the overlap. Set this parameter to zero to turn off the effect. | Improve this Doc View Source FillBrush The default custom brush for filling in the scale text background (see Brush property). Declaration public static Brush FillBrush Field Value Type Description Brush | Improve this Doc View Source FillColor The default color for filling in the scale text background (see Color property). Declaration public static Color FillColor Field Value Type Description Color | Improve this Doc View Source FillType The default fill mode for filling in the scale text background (see Type property). Declaration public static FillType FillType Field Value Type Description FillType | Improve this Doc View Source FontBold The default font bold mode for the Axis scale values font specification FontSpec ( IsBold property). true for a bold typeface, false otherwise. Declaration public static bool FontBold Field Value Type Description Boolean | Improve this Doc View Source FontColor The default font color for the Axis scale values font specification FontSpec ( FontColor property). Declaration public static Color FontColor Field Value Type Description Color | Improve this Doc View Source FontFamily The default font family for the Axis scale values font specification FontSpec ( Family property). Declaration public static string FontFamily Field Value Type Description String | Improve this Doc View Source FontItalic The default font italic mode for the Axis scale values font specification FontSpec ( IsItalic property). true for an italic typeface, false otherwise. Declaration public static bool FontItalic Field Value Type Description Boolean | Improve this Doc View Source FontSize The default font size for the Axis scale values font specification FontSpec ( Size property). Units are in points (1/72 inch). Declaration public static float FontSize Field Value Type Description Single | Improve this Doc View Source FontUnderline The default font underline mode for the Axis scale values font specification FontSpec ( IsUnderline property). true for an underlined typeface, false otherwise. Declaration public static bool FontUnderline Field Value Type Description Boolean | Improve this Doc View Source Format The default setting for the Axis scale format string ( Format property). For numeric values, this value is setting according to the Format(String, Object) format strings. For date type values, this value is set as per the ToString() function. Declaration public static string Format Field Value Type Description String | Improve this Doc View Source FormatDayDay A default setting for the Date auto-ranging code. This values applies only to Date-Time type axes. This is the format used for the scale values when auto-ranging code selects a Format of Day for MajorUnit and Day for for MinorUnit . This value is used by the ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double) method. Declaration public static string FormatDayDay Field Value Type Description String See Also DateTimeFormatInfo | Improve this Doc View Source FormatDayHour A default setting for the Date auto-ranging code. This values applies only to Date-Time type axes. This is the format used for the scale values when auto-ranging code selects a Format of Day for MajorUnit and Hour for for MinorUnit . This value is used by the ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double) method. Declaration public static string FormatDayHour Field Value Type Description String See Also DateTimeFormatInfo | Improve this Doc View Source FormatHourHour A default setting for the Date auto-ranging code. This values applies only to Date-Time type axes. This is the format used for the scale values when auto-ranging code selects a Format of Hour for MajorUnit and Hour for for MinorUnit . This value is used by the ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double) method. Declaration public static string FormatHourHour Field Value Type Description String See Also DateTimeFormatInfo | Improve this Doc View Source FormatHourMinute A default setting for the Date auto-ranging code. This values applies only to Date-Time type axes. This is the format used for the scale values when auto-ranging code selects a Format of Hour for MajorUnit and Minute for for MinorUnit . This value is used by the ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double) method. Declaration public static string FormatHourMinute Field Value Type Description String See Also DateTimeFormatInfo | Improve this Doc View Source FormatMillisecond A default setting for the Date auto-ranging code. This values applies only to Date-Time type axes. This is the format used for the scale values when auto-ranging code selects a Format of Millisecond for MajorUnit and Millisecond for for MinorUnit . This value is used by the ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double) method. Declaration public static string FormatMillisecond Field Value Type Description String See Also DateTimeFormatInfo | Improve this Doc View Source FormatMinuteMinute A default setting for the Date auto-ranging code. This values applies only to Date-Time type axes. This is the format used for the scale values when auto-ranging code selects a Format of Minute for MajorUnit and Minute for for MinorUnit . This value is used by the ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double) method. Declaration public static string FormatMinuteMinute Field Value Type Description String See Also DateTimeFormatInfo | Improve this Doc View Source FormatMinuteSecond A default setting for the Date auto-ranging code. This values applies only to Date-Time type axes. This is the format used for the scale values when auto-ranging code selects a Format of Minute for MajorUnit and Second for for MinorUnit . This value is used by the ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double) method. Declaration public static string FormatMinuteSecond Field Value Type Description String See Also DateTimeFormatInfo | Improve this Doc View Source FormatMonthMonth A default setting for the Date auto-ranging code. This values applies only to Date-Time type axes. This is the format used for the scale values when auto-ranging code selects a Format of Month for MajorUnit and Month for for MinorUnit . This value is used by the ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double) method. Declaration public static string FormatMonthMonth Field Value Type Description String See Also DateTimeFormatInfo | Improve this Doc View Source FormatSecondSecond A default setting for the Date auto-ranging code. This values applies only to Date-Time type axes. This is the format used for the scale values when auto-ranging code selects a Format of Second for MajorUnit and Second for for MinorUnit . This value is used by the ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double) method. Declaration public static string FormatSecondSecond Field Value Type Description String See Also DateTimeFormatInfo | Improve this Doc View Source FormatYearMonth A default setting for the Date auto-ranging code. This values applies only to Date-Time type axes. This is the format used for the scale values when auto-ranging code selects a Format of Year for MajorUnit and Month for for MinorUnit . This value is used by the ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double) method. Declaration public static string FormatYearMonth Field Value Type Description String See Also DateTimeFormatInfo | Improve this Doc View Source FormatYearYear A default setting for the Date auto-ranging code. This values applies only to Date-Time type axes. This is the format used for the scale values when auto-ranging code selects a Format of Year for MajorUnit and Year for for MinorUnit . This value is used by the ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double) method. Declaration public static string FormatYearYear Field Value Type Description String See Also DateTimeFormatInfo | Improve this Doc View Source IsLabelsInside The default value for IsLabelsInside , which determines whether or not the scale labels and title for the Axis will appear on the opposite side of the Axis that it normally appears. Declaration public static bool IsLabelsInside Field Value Type Description Boolean | Improve this Doc View Source IsReverse The default reverse mode for the Axis scale ( IsReverse property). true for a reversed scale (X decreasing to the left, Y/Y2 decreasing upwards), false otherwise. Declaration public static bool IsReverse Field Value Type Description Boolean | Improve this Doc View Source IsVisible The default value for IsVisible , which determines whether or not the scale values are displayed. Declaration public static bool IsVisible Field Value Type Description Boolean | Improve this Doc View Source LabelGap The default setting for the gap between the outside tics (or the axis edge if there are no outside tics) and the scale labels, expressed as a fraction of the major tic size. Declaration public static float LabelGap Field Value Type Description Single | Improve this Doc View Source MaxGrace The default \"grace\" value applied to the maximum data range. This value is expressed as a fraction of the total data range. For example, assume the data range is from 4.0 to 16.0, leaving a range of 12.0. If MaxGrace is set to 0.1, then 10% of the range, or 1.2 will be added to the maximum data value. The scale will then be ranged to cover at least 4.0 to 17.2. Declaration public static double MaxGrace Field Value Type Description Double See Also MinGrace MaxGrace | Improve this Doc View Source MaxTextLabels The maximum number of text labels (major tics) that will be allowed on the plot by the automatic scaling logic. This value applies only to Text axes. If there are more than MaxTextLabels on the plot, then MajorStep will be increased to reduce the number of labels. That is, the step size might be increased to 2.0 to show only every other label. Declaration public static double MaxTextLabels Field Value Type Description Double | Improve this Doc View Source MinGrace The default \"grace\" value applied to the minimum data range. This value is expressed as a fraction of the total data range. For example, assume the data range is from 4.0 to 16.0, leaving a range of 12.0. If MinGrace is set to 0.1, then 10% of the range, or 1.2 will be subtracted from the minimum data value. The scale will then be ranged to cover at least 2.8 to 16.0. Declaration public static double MinGrace Field Value Type Description Double See Also MinGrace | Improve this Doc View Source RangeDayDay A default setting for the Date auto-ranging code. This values applies only to Date-Time type axes. If the total span of data exceeds this number (in days), then the auto-range code will select MajorUnit = Day and MinorUnit = Day . This value normally defaults to 10 days. This value is used by the ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double) method. Declaration public static double RangeDayDay Field Value Type Description Double | Improve this Doc View Source RangeDayHour A default setting for the Date auto-ranging code. This values applies only to Date-Time type axes. If the total span of data exceeds this number (in days), then the auto-range code will select MajorUnit = Day and MinorUnit = Hour . This value normally defaults to 3 days. This value is used by the ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double) method. Declaration public static double RangeDayHour Field Value Type Description Double | Improve this Doc View Source RangeHourHour A default setting for the Date auto-ranging code. This values applies only to Date-Time type axes. If the total span of data exceeds this number (in days), then the auto-range code will select MajorUnit = Hour and MinorUnit = Hour . This value normally defaults to 0.4167 days (10 hours). This value is used by the ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double) method. Declaration public static double RangeHourHour Field Value Type Description Double | Improve this Doc View Source RangeHourMinute A default setting for the Date auto-ranging code. This values applies only to Date-Time type axes. If the total span of data exceeds this number (in days), then the auto-range code will select MajorUnit = Hour and MinorUnit = Minute . This value normally defaults to 0.125 days (3 hours). This value is used by the ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double) method. Declaration public static double RangeHourMinute Field Value Type Description Double | Improve this Doc View Source RangeMinuteMinute A default setting for the Date auto-ranging code. This values applies only to Date-Time type axes. If the total span of data exceeds this number (in days), then the auto-range code will select MajorUnit = Minute and MinorUnit = Minute . This value normally defaults to 6.94e-3 days (10 minutes). This value is used by the ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double) method. Declaration public static double RangeMinuteMinute Field Value Type Description Double | Improve this Doc View Source RangeMinuteSecond A default setting for the Date auto-ranging code. This values applies only to Date-Time type axes. If the total span of data exceeds this number (in days), then the auto-range code will select MajorUnit = Minute and MinorUnit = Second . This value normally defaults to 2.083e-3 days (3 minutes). This value is used by the ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double) method. Declaration public static double RangeMinuteSecond Field Value Type Description Double | Improve this Doc View Source RangeMonthMonth A default setting for the Date auto-ranging code. This values applies only to Date-Time type axes. If the total span of data exceeds this number (in days), then the auto-range code will select MajorUnit = Month and MinorUnit = Month . This value normally defaults to 300 days (10 months). This value is used by the ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double) method. Declaration public static double RangeMonthMonth Field Value Type Description Double | Improve this Doc View Source RangeSecondSecond A default setting for the Date auto-ranging code. This values applies only to Date-Time type axes. If the total span of data exceeds this number (in days), then the auto-range code will select MajorUnit = Second and MinorUnit = Second . This value normally defaults to 3.472e-5 days (3 seconds). This value is used by the ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double) method. Declaration public static double RangeSecondSecond Field Value Type Description Double | Improve this Doc View Source RangeYearMonth A default setting for the Date auto-ranging code. This values applies only to Date-Time type axes. If the total span of data exceeds this number (in days), then the auto-range code will select MajorUnit = Year and MinorUnit = Month . This value normally defaults to 730 days (2 years). This value is used by the ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double) method. Declaration public static double RangeYearMonth Field Value Type Description Double | Improve this Doc View Source RangeYearYear A default setting for the Date auto-ranging code. This values applies only to Date-Time type axes. If the total span of data exceeds this number (in days), then the auto-range code will select MajorUnit = Year and MinorUnit = Year . This value normally defaults to 1825 days (5 years). This value is used by the ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double) method. Declaration public static double RangeYearYear Field Value Type Description Double | Improve this Doc View Source TargetMinorXSteps The default target number of minor steps for automatically selecting the X axis scale minor step size (see PickScale(GraphPane, Graphics, Single) ). This number is an initial target value for the number of minor steps on an axis. This value is maintained only in the Scale.Default class, and cannot be changed after compilation. Declaration public static double TargetMinorXSteps Field Value Type Description Double | Improve this Doc View Source TargetMinorYSteps The default target number of minor steps for automatically selecting the Y or Y2 axis scale minor step size (see PickScale(GraphPane, Graphics, Single) ). This number is an initial target value for the number of minor steps on an axis. This value is maintained only in the Scale.Default class, and cannot be changed after compilation. Declaration public static double TargetMinorYSteps Field Value Type Description Double | Improve this Doc View Source TargetXSteps The default target number of steps for automatically selecting the X axis scale step size (see PickScale(GraphPane, Graphics, Single) ). This number is an initial target value for the number of major steps on an axis. This value is maintained only in the Scale.Default class, and cannot be changed after compilation. Declaration public static double TargetXSteps Field Value Type Description Double | Improve this Doc View Source TargetYSteps The default target number of steps for automatically selecting the Y or Y2 axis scale step size (see PickScale(GraphPane, Graphics, Single) ). This number is an initial target value for the number of major steps on an axis. This value is maintained only in the Scale.Default class, and cannot be changed after compilation. Declaration public static double TargetYSteps Field Value Type Description Double | Improve this Doc View Source ZeroLever The default \"zero lever\" for automatically selecting the axis scale range (see PickScale(GraphPane, Graphics, Single) ). This number is used to determine when an axis scale range should be extended to include the zero value. This value is maintained only in the Scale.Default class, and cannot be changed after compilation. Declaration public static double ZeroLever Field Value Type Description Double"
  },
  "api/ZedGraph.Scale.html": {
    "href": "api/ZedGraph.Scale.html",
    "title": "Class Scale",
    "keywords": "Class Scale The Scale class is an abstract base class that encompasses the properties and methods associated with a scale of data. Inheritance Object Scale Implements ISerializable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public abstract class Scale : ISerializable Remarks This class is inherited by the ZedGraph.LinearScale , ZedGraph.LogScale , ZedGraph.OrdinalScale , ZedGraph.TextScale , ZedGraph.DateScale , ZedGraph.ExponentScale , ZedGraph.DateAsOrdinalScale , and ZedGraph.LinearAsOrdinalScale classes to define specific characteristics for those types. Constructors | Improve this Doc View Source Scale(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected Scale(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source Scale(Axis) Basic constructor -- requires that the Scale object be intialized with a pre-existing owner Axis . Declaration public Scale(Axis ownerAxis) Parameters Type Name Description Axis ownerAxis The Axis object that is the owner of this Scale instance. | Improve this Doc View Source Scale(Scale, Axis) Copy Constructor. Create a new Scale object based on the specified existing one. Declaration public Scale(Scale rhs, Axis owner) Parameters Type Name Description Scale rhs The Scale object to be copied. Axis owner The Axis object that will own the new instance of Scale Fields | Improve this Doc View Source schema Current schema value that defines the version of the serialized file Declaration public const int schema = 11 Field Value Type Description Int32 Properties | Improve this Doc View Source Align Controls the alignment of the Axis tic labels. Declaration public AlignP Align { get; set; } Property Value Type Description AlignP Remarks This property controls whether the inside, center, or outside edges of the text labels are aligned. | Improve this Doc View Source AlignH Controls the alignment of the Axis tic labels. Declaration public AlignH AlignH { get; set; } Property Value Type Description AlignH Remarks This property controls whether the left, center, or right edges of the text labels are aligned. | Improve this Doc View Source BaseTic Gets or sets the scale value at which the first major tic label will appear. Declaration public double BaseTic { get; set; } Property Value Type Description Double The value is defined in user scale units Remarks This property allows the scale labels to start at an irregular value. For example, on a scale range with Min = 0, Max = 1000, and MajorStep = 200, a BaseTic value of 50 would cause the scale labels to appear at values 50, 250, 450, 650, and 850. Note that the default value for this property is Missing , which means the value is not used. Setting this property to any value other than Missing will activate the effect. The value specified must coincide with the first major tic. That is, if BaseTic were set to 650 in the example above, then the major tics would only occur at 650 and 850. This setting may affect the minor tics, since the minor tics are always referenced to the BaseTic . That is, in the example above, if the MinorStep were set to 30 (making it a non-multiple of the major step), then the minor tics would occur at 20, 50 (so it lines up with the BaseTic), 80, 110, 140, etc. See Also Min Max MajorStep MinorStep Cross | Improve this Doc View Source Exponent Gets or sets the scale exponent value. This only applies to Exponent . Declaration public double Exponent { get; set; } Property Value Type Description Double See Also Min Max MinorStep MajorStepAuto TargetXSteps TargetYSteps ZeroLever MaxTextLabels | Improve this Doc View Source FontSpec Gets a reference to the FontSpec class used to render the scale values Declaration public FontSpec FontSpec { get; set; } Property Value Type Description FontSpec See Also FontFamily FontSize FontColor FontBold FontUnderline FontItalic | Improve this Doc View Source Format The format of the Axis tic labels. Declaration public string Format { get; set; } Property Value Type Description String The format string conforms to the DateTimeFormatInfo for date formats, and NumberFormatInfo for numeric formats. Remarks This property may be a date format or a numeric format, depending on the setting of Type . This property may be set automatically by ZedGraph, depending on the state of FormatAuto . See Also Mag FormatAuto FontSpec | Improve this Doc View Source FormatAuto Determines whether or not the scale label format Format is determined automatically based on the range of data values. Declaration public bool FormatAuto { get; set; } Property Value Type Description Boolean true if Format will be set automatically, false if it is to be set manually by the user Remarks This value will be set to false if Format is manually changed. See Also Mag Format FontSpec | Improve this Doc View Source IsAnyOrdinal Gets a value that indicates if this Scale is of any of the ordinal types in the AxisType enumeration. Declaration public bool IsAnyOrdinal { get; } Property Value Type Description Boolean See Also Type | Improve this Doc View Source IsDate True if this scale is Date , false otherwise. Declaration public bool IsDate { get; } Property Value Type Description Boolean | Improve this Doc View Source IsExponent True if this scale is Exponent , false otherwise. Declaration public bool IsExponent { get; } Property Value Type Description Boolean | Improve this Doc View Source IsLabelsInside Gets or sets a value that causes the axis scale labels and title to appear on the opposite side of the axis. Declaration public bool IsLabelsInside { get; set; } Property Value Type Description Boolean Remarks For example, setting this flag to true for the YAxis will shift the axis labels and title to the right side of the YAxis instead of the normal left-side location. Set this property to true for the XAxis , and set the Cross property for the XAxis to an arbitrarily large value (assuming IsReverse is false for the YAxis ) in order to have the XAxis appear at the top of the Rect . See Also IsReverse Cross | Improve this Doc View Source IsLog True if this scale is Log , false otherwise. Declaration public bool IsLog { get; } Property Value Type Description Boolean | Improve this Doc View Source IsOrdinal True if this scale is Ordinal , false otherwise. Declaration public bool IsOrdinal { get; } Property Value Type Description Boolean Remarks Note that this is only true for an actual ZedGraph.OrdinalScale class. This property will be false for other ordinal types such as Text , LinearAsOrdinal , or DateAsOrdinal . Use the IsAnyOrdinal as a \"catchall\" for all ordinal type axes. | Improve this Doc View Source IsPreventLabelOverlap Gets or sets a Boolean value that determines if ZedGraph will check to see if the Axis scale labels are close enough to overlap. If so, ZedGraph will adjust the step size to prevent overlap. Declaration public bool IsPreventLabelOverlap { get; set; } Property Value Type Description Boolean boolean value; true to check for overlap, false otherwise Remarks The process of checking for overlap is done during the AxisChange() method call, and affects the selection of the major step size ( MajorStep ). | Improve this Doc View Source IsReverse Determines if the scale values are reversed for this Axis Declaration public bool IsReverse { get; set; } Property Value Type Description Boolean true for the X values to decrease to the right or the Y values to decrease upwards, false otherwise See Also IsReverse | Improve this Doc View Source IsSkipCrossLabel Gets or sets a value that causes the scale label that is located at the Cross value for this Axis to be hidden. Declaration public bool IsSkipCrossLabel { get; set; } Property Value Type Description Boolean Remarks For axes that have an active Cross setting (e.g., CrossAuto is false), the scale label at the Cross value is overlapped by opposing axes. Use this property to hide the scale label to avoid the overlap. | Improve this Doc View Source IsSkipFirstLabel Gets or sets a value that causes the first scale label for this Axis to be hidden. Declaration public bool IsSkipFirstLabel { get; set; } Property Value Type Description Boolean Remarks Often, for axis that have an active Cross setting (e.g., CrossAuto is false), the first and/or last scale label are overlapped by opposing axes. Use this property to hide the first scale label to avoid the overlap. Note that setting this value to true will hide any scale label that appears within EdgeTolerance of the beginning of the Axis . | Improve this Doc View Source IsSkipLastLabel Gets or sets a value that causes the last scale label for this Axis to be hidden. Declaration public bool IsSkipLastLabel { get; set; } Property Value Type Description Boolean Remarks Often, for axis that have an active Cross setting (e.g., CrossAuto is false), the first and/or last scale label are overlapped by opposing axes. Use this property to hide the last scale label to avoid the overlap. Note that setting this value to true will hide any scale label that appears within EdgeTolerance of the end of the Axis . | Improve this Doc View Source IsText True if this scale is Text , false otherwise. Declaration public bool IsText { get; } Property Value Type Description Boolean | Improve this Doc View Source IsUseTenPower Determines if powers-of-ten notation will be used for the numeric value labels. Declaration public bool IsUseTenPower { get; set; } Property Value Type Description Boolean boolean value; true to show the title as a power of ten, false to show a regular numeric value (e.g., \"0.01\", \"10\", \"1000\") Remarks The powers-of-ten notation is just the text \"10\" followed by a superscripted value indicating the magnitude. This mode is only valid for log scales (see IsLog and Type ). | Improve this Doc View Source IsVisible Gets or sets a property that determines whether or not the scale values will be shown. Declaration public bool IsVisible { get; set; } Property Value Type Description Boolean true to show the scale values, false otherwise See Also IsVisible | Improve this Doc View Source LabelGap The gap between the scale labels and the tics. Declaration public float LabelGap { get; set; } Property Value Type Description Single | Improve this Doc View Source Mag The magnitude multiplier for scale values. Declaration public int Mag { get; set; } Property Value Type Description Int32 The magnitude multiplier (power of 10) for the scale value labels Remarks This is used to limit the size of the displayed value labels. For example, if the value is really 2000000, then the graph will display 2000 with a 10^3 magnitude multiplier. This value can be determined automatically depending on the state of MagAuto . If this value is set manually by the user, then MagAuto will also be set to false. See Also IsOmitMag Title Format FontSpec | Improve this Doc View Source MagAuto Determines whether the Mag value will be set automatically based on the data, or manually by the user. Declaration public bool MagAuto { get; set; } Property Value Type Description Boolean true to have Mag set automatically, false otherwise Remarks If the user manually sets the Mag value, then this flag will be set to false. See Also IsOmitMag Title Mag | Improve this Doc View Source MajorStep Gets or sets the scale step size for this Scale (the increment between labeled axis values). Declaration public double MajorStep { get; set; } Property Value Type Description Double The value is defined in user scale units Remarks This value can be set automatically based on the state of MajorStepAuto . If this value is set manually, then MajorStepAuto will also be set to false. This value is ignored for Log axes. For Date axes, this value is defined in units of MajorUnit . See Also Min Max MinorStep MajorStepAuto TargetXSteps TargetYSteps ZeroLever MaxTextLabels | Improve this Doc View Source MajorStepAuto Gets or sets a value that determines whether or not the scale step size MajorStep is set automatically. Declaration public bool MajorStepAuto { get; set; } Property Value Type Description Boolean true for automatic mode, false for manual mode Remarks This value will be set to false if MajorStep is manually changed. See Also MajorStep | Improve this Doc View Source MajorUnit Gets or sets the type of units used for the major step size ( MajorStep ). Declaration public DateUnit MajorUnit { get; set; } Property Value Type Description DateUnit The value is a DateUnit enum type Remarks This unit type only applies to Date-Time axes ( Date = true). The axis is set to date type with the Type property. The unit types are defined as DateUnit . See Also Min Max MajorStep MinorStep MajorStepAuto | Improve this Doc View Source Max Gets or sets the maximum scale value for this Scale . Declaration public virtual double Max { get; set; } Property Value Type Description Double The value is defined in user scale units for Log and Linear axes. For Text and Ordinal axes, this value is an ordinal starting with 1.0. For Date axes, this value is in XL Date format (see XDate , which is the number of days since the reference date of January 1, 1900. Remarks This value can be set automatically based on the state of MaxAuto . If this value is set manually, then MaxAuto will also be set to false. See Also Min MajorStep MinorStep MaxAuto | Improve this Doc View Source MaxAuto Gets or sets a value that determines whether or not the maximum scale value Max is set automatically. Declaration public bool MaxAuto { get; set; } Property Value Type Description Boolean true for automatic mode, false for manual mode Remarks This value will be set to false if Max is manually changed. See Also Max | Improve this Doc View Source MaxGrace Gets or sets the \"grace\" value applied to the maximum data range. Declaration public double MaxGrace { get; set; } Property Value Type Description Double Remarks This values determines how much extra space is left after the last data value. This value is expressed as a fraction of the total data range. For example, assume the data range is from 4.0 to 16.0, leaving a range of 12.0. If MaxGrace is set to 0.1, then 10% of the range, or 1.2 will be added to the maximum data value. The scale will then be ranged to cover at least 4.0 to 17.2. See Also Max MaxGrace MinGrace | Improve this Doc View Source Min Gets or sets the minimum scale value for this Scale . Declaration public virtual double Min { get; set; } Property Value Type Description Double The value is defined in user scale units for Log and Linear axes. For Text and Ordinal axes, this value is an ordinal starting with 1.0. For Date axes, this value is in XL Date format (see XDate , which is the number of days since the reference date of January 1, 1900. Remarks This value can be set automatically based on the state of MinAuto . If this value is set manually, then MinAuto will also be set to false. See Also Max MajorStep MinorStep MinAuto | Improve this Doc View Source MinAuto Gets or sets a value that determines whether or not the minimum scale value Min is set automatically. Declaration public bool MinAuto { get; set; } Property Value Type Description Boolean true for automatic mode, false for manual mode Remarks This value will be set to false if Min is manually changed. See Also Min | Improve this Doc View Source MinGrace Gets or sets the \"grace\" value applied to the minimum data range. Declaration public double MinGrace { get; set; } Property Value Type Description Double Remarks This value is expressed as a fraction of the total data range. For example, assume the data range is from 4.0 to 16.0, leaving a range of 12.0. If MinGrace is set to 0.1, then 10% of the range, or 1.2 will be subtracted from the minimum data value. The scale will then be ranged to cover at least 2.8 to 16.0. See Also Min MinGrace MaxGrace | Improve this Doc View Source MinorStep Gets or sets the scale minor step size for this Scale (the spacing between minor tics). Declaration public double MinorStep { get; set; } Property Value Type Description Double The value is defined in user scale units Remarks This value can be set automatically based on the state of MinorStepAuto . If this value is set manually, then MinorStepAuto will also be set to false. This value is ignored for Log and Text axes. For Date axes, this value is defined in units of MinorUnit . See Also Min Max MajorStep MinorStepAuto | Improve this Doc View Source MinorStepAuto Gets or sets a value that determines whether or not the minor scale step size MinorStep is set automatically. Declaration public bool MinorStepAuto { get; set; } Property Value Type Description Boolean true for automatic mode, false for manual mode Remarks This value will be set to false if MinorStep is manually changed. See Also MinorStep | Improve this Doc View Source MinorUnit Gets or sets the type of units used for the minor step size ( MinorStep ). Declaration public DateUnit MinorUnit { get; set; } Property Value Type Description DateUnit The value is a DateUnit enum type Remarks This unit type only applies to Date-Time axes ( Date = true). The axis is set to date type with the Type property. The unit types are defined as DateUnit . See Also Min Max MajorStep MinorStep MinorStepAuto | Improve this Doc View Source TextLabels The text labels for this Axis . Declaration public string[] TextLabels { get; set; } Property Value Type Description String [] Remarks This property is only applicable if Type is set to Text . | Improve this Doc View Source Type Get an AxisType enumeration that indicates the type of this scale. Declaration public abstract AxisType Type { get; } Property Value Type Description AxisType Methods | Improve this Doc View Source CalcBoundedStepSize(Double, Double) Calculate a step size based on a data range, limited to a maximum number of steps. Declaration protected double CalcBoundedStepSize(double range, double maxSteps) Parameters Type Name Description Double range The range of data in user scale units. This can be a full range of the data for the major step size, or just the value of the major step size to calculate the minor step size Double maxSteps The maximum allowable number of steps to divide the range into Returns Type Description Double The calculated step size for the specified data range. Remarks This utility method will calculate a step size, of no more than maxSteps, using a rational increment (1, 2, or 5 -- which are even divisors of 10). This method is used by PickScale(GraphPane, Graphics, Single) . | Improve this Doc View Source CalcMaxLabels(Graphics, GraphPane, Single) Calculate the maximum number of labels that will fit on this axis. Declaration public int CalcMaxLabels(Graphics g, GraphPane pane, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object associated with this Axis Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Returns Type Description Int32 Remarks This method works for both X and Y direction axes, and it works for angled text (assuming that a bounding box is an appropriate measure). Technically, labels at 45 degree angles could fit better than the return value of this method since the bounding boxes can overlap without the labels actually overlapping. | Improve this Doc View Source CalcStepSize(Double, Double) Calculate a step size based on a data range. Declaration protected static double CalcStepSize(double range, double targetSteps) Parameters Type Name Description Double range The range of data in user scale units. This can be a full range of the data for the major step size, or just the value of the major step size to calculate the minor step size Double targetSteps The desired \"typical\" number of steps to divide the range into Returns Type Description Double The calculated step size for the specified data range. Remarks This utility method will try to honor the TargetXSteps and TargetYSteps number of steps while using a rational increment (1, 2, or 5 -- which are even divisors of 10). This method is used by PickScale(GraphPane, Graphics, Single) . | Improve this Doc View Source CalculateScrollRange(Double, Boolean) Calculates the scroll range with the specified grace value. Declaration public ScrollRange CalculateScrollRange(double grace, bool isScrollable) Parameters Type Name Description Double grace The grace or margin percentage to apply to the scale's range. Boolean isScrollable The desired IsScrollable value. Returns Type Description ScrollRange The ScrollRange value. | Improve this Doc View Source Clone(Axis) Create a new clone of the current item, with a new owner assignment Declaration public abstract Scale Clone(Axis owner) Parameters Type Name Description Axis owner The new Axis instance that will be the owner of the new Scale Returns Type Description Scale A new Scale clone. | Improve this Doc View Source DeLinearize(Double) Convert a value from its linear equivalent to its actual scale value for this type of scale. Declaration public virtual double DeLinearize(double val) Parameters Type Name Description Double val The value to be converted Returns Type Description Double Remarks The default behavior is to just return the value unchanged. However, for Log and Exponent , it returns the anti-log or inverse-power equivalent. | Improve this Doc View Source GetClusterWidth(Double) Calculates the cluster width, in pixels, by transforming the specified clusterScaleWidth. Declaration public float GetClusterWidth(double clusterScaleWidth) Parameters Type Name Description Double clusterScaleWidth The width in user scale units of each bar cluster Returns Type Description Single The equivalent pixel size of the bar cluster | Improve this Doc View Source GetClusterWidth(GraphPane) Determine the width, in pixel units, of each bar cluster including the cluster gaps and bar gaps. Declaration public float GetClusterWidth(GraphPane pane) Parameters Type Name Description GraphPane pane A reference to the GraphPane object associated with this Axis Returns Type Description Single The width of each bar cluster, in pixel units Remarks This method uses the ClusterScaleWidth for non-ordinal axes, or a cluster width of 1.0 for ordinal axes. | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public virtual void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Remarks You MUST set the _ownerAxis property after deserializing a BarSettings object. | Improve this Doc View Source Linearize(Double) Convert a value to its linear equivalent for this type of scale. Declaration public virtual double Linearize(double val) Parameters Type Name Description Double val The value to be converted Returns Type Description Double Remarks The default behavior is to just return the value unchanged. However, for Log and Exponent , it returns the log or power equivalent. | Improve this Doc View Source LocalTransform(Double) Transform the coordinate value from user coordinates (scale value) to graphics device coordinates (pixels). Declaration public float LocalTransform(double x) Parameters Type Name Description Double x The coordinate value, in linearized user scale units, to be transformed Returns Type Description Single the coordinate value transformed to screen coordinates for use in calling the ZedGraph.Scale.Draw(System.Drawing.Graphics,ZedGraph.GraphPane,System.Single,System.Single) method Remarks Assumes that the origin has been set to the \"left\" of this axis, facing from the label side. Note that the left side corresponds to the scale minimum for the X and Y2 axes, but it is the scale maximum for the Y axis. This method takes into account the scale range ( Min and Max ), logarithmic state ( IsLog ), scale reverse state ( IsReverse ) and axis type ( XAxis , YAxis , or Y2Axis ). Note that the Rect must be valid, and SetupScaleData(GraphPane, Axis) must be called for the current configuration before using this method. | Improve this Doc View Source MakeNewScale(Scale, AxisType) A construction method that creates a new Scale object using the properties of an existing Scale object, but specifying a new AxisType . Declaration public Scale MakeNewScale(Scale oldScale, AxisType type) Parameters Type Name Description Scale oldScale The existing Scale object from which to copy the field data. AxisType type An AxisType representing the type of derived type of new Scale object to create. Returns Type Description Scale The new Scale object. Remarks This constructor is used to change the type of an existing Axis . By specifying the old Scale object, you are giving a set of properties (which encompasses all fields associated with the scale, since the derived types have no fields) to be used in creating a new Scale object, only this time having the newly specified object type. | Improve this Doc View Source MyMod(Double, Double) Calculate the modulus (remainder) in a safe manner so that divide by zero errors are avoided Declaration protected double MyMod(double x, double y) Parameters Type Name Description Double x The divisor Double y The dividend Returns Type Description Double the value of the modulus, or zero for the divide-by-zero case | Improve this Doc View Source Pan(Double, Double) Pan the scale given the current and destination values. Declaration public void Pan(double value, double toValue) Parameters Type Name Description Double value The value to pan. Double toValue The end value. | Improve this Doc View Source PickScale(GraphPane, Graphics, Single) Select a reasonable scale given a range of data values. Declaration public virtual void PickScale(GraphPane pane, Graphics g, float scaleFactor) Parameters Type Name Description GraphPane pane A reference to the GraphPane object associated with this Axis Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Remarks The scale range is chosen based on increments of 1, 2, or 5 (because they are even divisors of 10). This routine honors the MinAuto , MaxAuto , and MajorStepAuto autorange settings as well as the IsLog setting. In the event that any of the autorange settings are false, the corresponding Min , Max , or MajorStep setting is explicitly honored, and the remaining autorange settings (if any) will be calculated to accomodate the non-autoranged values. The basic defaults for scale selection are defined using ZeroLever , TargetXSteps , and TargetYSteps from the Scale.Default default class. On Exit: Min is set to scale minimum (if MinAuto = true) Max is set to scale maximum (if MaxAuto = true) MajorStep is set to scale step size (if MajorStepAuto = true) MinorStep is set to scale minor step size (if MinorStepAuto = true) Mag is set to a magnitude multiplier according to the data Format is set to the display format for the values (this controls the number of decimal places, whether there are thousands separators, currency types, etc.) | Improve this Doc View Source ReverseTransform(Single) Reverse transform the user coordinates (scale value) given a graphics device coordinate (pixels). Declaration public double ReverseTransform(float pixVal) Parameters Type Name Description Single pixVal The screen pixel value, in graphics device coordinates to be transformed Returns Type Description Double The user scale value that corresponds to the screen pixel location Remarks This method takes into account the scale range ( Min and Max ), logarithmic state ( IsLog ), scale reverse state ( IsReverse ) and axis type ( XAxis , YAxis , or Y2Axis ). Note that the Rect must be valid, and SetupScaleData(GraphPane, Axis) must be called for the current configuration before using this method (this is called everytime the graph is drawn (i.e., Draw(Graphics) is called). | Improve this Doc View Source SafeExp(Double, Double) Calculate an exponential in a safe manner to avoid math exceptions Declaration public static double SafeExp(double x, double exponent) Parameters Type Name Description Double x The value for which the exponential is to be calculated Double exponent The exponent value to use for calculating the exponential. Returns Type Description Double | Improve this Doc View Source SafeLog(Double) Calculate a base 10 logarithm in a safe manner to avoid math exceptions Declaration public static double SafeLog(double x) Parameters Type Name Description Double x The value for which the logarithm is to be calculated Returns Type Description Double The value of the logarithm, or 0 if the x argument was negative or zero | Improve this Doc View Source Scroll(Double, Double, Double) Scrolls the scale to the specified position. Declaration public void Scroll(double position, double scrollMin, double scrollMax) Parameters Type Name Description Double position The position to srcoll within the window. 0..1. Double scrollMin The minimum value of the scroll window. Double scrollMax The maximum value of the scroll window. | Improve this Doc View Source SetupScaleData(GraphPane, Axis) Setup some temporary transform values in preparation for rendering the Axis . Declaration public virtual void SetupScaleData(GraphPane pane, Axis axis) Parameters Type Name Description GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Axis axis The parent Axis for this Scale Remarks This method is typically called by the parent GraphPane object as part of the Draw(Graphics) method. It is also called by GeneralTransform(Double, Double, CoordType) and ReverseTransform(PointF, out Double, out Double) methods to setup for coordinate transformations. | Improve this Doc View Source Transform(Boolean, Int32, Double) Transform the coordinate value from user coordinates (scale value) to graphics device coordinates (pixels). Declaration public float Transform(bool isOverrideOrdinal, int i, double x) Parameters Type Name Description Boolean isOverrideOrdinal true to force the axis to honor the data value, rather than replacing it with the ordinal value Int32 i The ordinal value of this point, just in case this is an Ordinal axis Double x The coordinate value, in user scale units, to be transformed Returns Type Description Single the coordinate value transformed to screen coordinates for use in calling the Graphics draw routines Remarks This method takes into account the scale range ( Min and Max ), logarithmic state ( IsLog ), scale reverse state ( IsReverse ) and axis type ( XAxis , YAxis , or Y2Axis ). Note that the Rect must be valid, and SetupScaleData(GraphPane, Axis) must be called for the current configuration before using this method (this is called everytime the graph is drawn (i.e., Draw(Graphics) is called). | Improve this Doc View Source Transform(Double) Transform the coordinate value from user coordinates (scale value) to graphics device coordinates (pixels). Declaration public float Transform(double x) Parameters Type Name Description Double x The coordinate value, in user scale units, to be transformed Returns Type Description Single the coordinate value transformed to screen coordinates for use in calling the Graphics draw routines Remarks This method takes into account the scale range ( Min and Max ), logarithmic state ( IsLog ), scale reverse state ( IsReverse ) and axis type ( XAxis , YAxis , or Y2Axis ). Note that the Rect must be valid, and SetupScaleData(GraphPane, Axis) must be called for the current configuration before using this method (this is called everytime the graph is drawn (i.e., Draw(Graphics) is called). | Improve this Doc View Source Zoom(Double, Double, Boolean) Zoom the scale by the specified fraction, around the center value. Declaration public void Zoom(double zoomFraction, double centerVal, bool isZoomOnCenter) Parameters Type Name Description Double zoomFraction The amount to scale/zoom the scale. Double centerVal The value to center the zoom around. Boolean isZoomOnCenter if set to true the is used, otherwise the current center of the scale is used. Remarks When the fraction value is less than 0.0001 or greater than 1000.0 the scale will not be zoomed to avoid invalid scale values. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.ScaleState.html": {
    "href": "api/ZedGraph.ScaleState.html",
    "title": "Class ScaleState",
    "keywords": "Class ScaleState A class that captures an Axis scale range. Inheritance Object ScaleState Implements ICloneable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public class ScaleState : ICloneable Remarks This structure is used by the ZoomState class to store Axis scale range settings in a collection for later retrieval. The class stores the Min , Max , MinorStep , and MajorStep properties, along with the corresponding auto-scale settings: MinAuto , MaxAuto , MinorStepAuto , and MajorStepAuto . Constructors | Improve this Doc View Source ScaleState(Axis) Construct a ScaleState from the specified Axis Declaration public ScaleState(Axis axis) Parameters Type Name Description Axis axis The Axis from which to collect the scale range settings. | Improve this Doc View Source ScaleState(ScaleState) The Copy Constructor Declaration public ScaleState(ScaleState rhs) Parameters Type Name Description ScaleState rhs The ScaleState object from which to copy Methods | Improve this Doc View Source ApplyScale(Axis) Copy the properties from this ScaleState out to the specified Axis . Declaration public void ApplyScale(Axis axis) Parameters Type Name Description Axis axis The Axis reference to which the properties should be copied | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public ScaleState Clone() Returns Type Description ScaleState A new, independent copy of this class | Improve this Doc View Source IsChanged(Axis) Determine if the state contained in this ScaleState object is different from the state of the specified Axis . Declaration public bool IsChanged(Axis axis) Parameters Type Name Description Axis axis The Axis object with which to compare states. Returns Type Description Boolean true if the states are different, false otherwise Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable"
  },
  "api/ZedGraph.ScaleStateList.html": {
    "href": "api/ZedGraph.ScaleStateList.html",
    "title": "Class ScaleStateList",
    "keywords": "Class ScaleStateList A collection class that maintains a list of ScaleState objects, corresponding to the list of Axis objects from YAxisList or Y2AxisList . Inheritance Object List < ScaleState > ScaleStateList Implements IList < ScaleState > ICollection < ScaleState > IEnumerable < ScaleState > IList ICollection IEnumerable ICloneable Inherited Members System.Collections.Generic.List<ZedGraph.ScaleState>.System.Collections.IList.get_Item(System.Int32) System.Collections.Generic.List<ZedGraph.ScaleState>.System.Collections.IList.set_Item(System.Int32, System.Object) List<ScaleState>.Add(ScaleState) List<ScaleState>.AddRange(IEnumerable<ScaleState>) List<ScaleState>.AsReadOnly() List<ScaleState>.BinarySearch(Int32, Int32, ScaleState, IComparer<ScaleState>) List<ScaleState>.BinarySearch(ScaleState) List<ScaleState>.BinarySearch(ScaleState, IComparer<ScaleState>) List<ScaleState>.Clear() List<ScaleState>.Contains(ScaleState) List<ScaleState>.ConvertAll<TOutput>(Converter<ScaleState, TOutput>) List<ScaleState>.CopyTo(Int32, ScaleState[], Int32, Int32) List<ScaleState>.CopyTo(ScaleState[]) List<ScaleState>.CopyTo(ScaleState[], Int32) List<ScaleState>.Exists(Predicate<ScaleState>) List<ScaleState>.Find(Predicate<ScaleState>) List<ScaleState>.FindAll(Predicate<ScaleState>) List<ScaleState>.FindIndex(Int32, Int32, Predicate<ScaleState>) List<ScaleState>.FindIndex(Int32, Predicate<ScaleState>) List<ScaleState>.FindIndex(Predicate<ScaleState>) List<ScaleState>.FindLast(Predicate<ScaleState>) List<ScaleState>.FindLastIndex(Int32, Int32, Predicate<ScaleState>) List<ScaleState>.FindLastIndex(Int32, Predicate<ScaleState>) List<ScaleState>.FindLastIndex(Predicate<ScaleState>) List<ScaleState>.ForEach(Action<ScaleState>) List<ScaleState>.GetEnumerator() List<ScaleState>.GetRange(Int32, Int32) List<ScaleState>.IndexOf(ScaleState) List<ScaleState>.IndexOf(ScaleState, Int32) List<ScaleState>.IndexOf(ScaleState, Int32, Int32) List<ScaleState>.Insert(Int32, ScaleState) List<ScaleState>.InsertRange(Int32, IEnumerable<ScaleState>) List<ScaleState>.LastIndexOf(ScaleState) List<ScaleState>.LastIndexOf(ScaleState, Int32) List<ScaleState>.LastIndexOf(ScaleState, Int32, Int32) List<ScaleState>.Remove(ScaleState) List<ScaleState>.RemoveAll(Predicate<ScaleState>) List<ScaleState>.RemoveAt(Int32) List<ScaleState>.RemoveRange(Int32, Int32) List<ScaleState>.Reverse() List<ScaleState>.Reverse(Int32, Int32) List<ScaleState>.Sort() List<ScaleState>.Sort(IComparer<ScaleState>) List<ScaleState>.Sort(Comparison<ScaleState>) List<ScaleState>.Sort(Int32, Int32, IComparer<ScaleState>) List<ScaleState>.IEnumerable<ScaleState>.GetEnumerator() List<ScaleState>.ICollection.CopyTo(Array, Int32) List<ScaleState>.IEnumerable.GetEnumerator() List<ScaleState>.IList.Add(Object) List<ScaleState>.IList.Contains(Object) List<ScaleState>.IList.IndexOf(Object) List<ScaleState>.IList.Insert(Int32, Object) List<ScaleState>.IList.Remove(Object) List<ScaleState>.ToArray() List<ScaleState>.TrimExcess() List<ScaleState>.TrueForAll(Predicate<ScaleState>) List<ScaleState>.Capacity List<ScaleState>.Count List<ScaleState>.Item[Int32] List<ScaleState>.ICollection<ScaleState>.IsReadOnly List<ScaleState>.ICollection.IsSynchronized List<ScaleState>.ICollection.SyncRoot List<ScaleState>.IList.IsFixedSize List<ScaleState>.IList.IsReadOnly List<ScaleState>.IList.Item[Int32] Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public class ScaleStateList : List<ScaleState>, IList<ScaleState>, ICollection<ScaleState>, IEnumerable<ScaleState>, IList, ICollection, IEnumerable, ICloneable Constructors | Improve this Doc View Source ScaleStateList(ScaleStateList) The Copy Constructor Declaration public ScaleStateList(ScaleStateList rhs) Parameters Type Name Description ScaleStateList rhs The ScaleStateList object from which to copy | Improve this Doc View Source ScaleStateList(Y2AxisList) Construct a new ScaleStateList automatically from an existing Y2AxisList . Declaration public ScaleStateList(Y2AxisList list) Parameters Type Name Description Y2AxisList list The Y2AxisList (a list of Y axes), from which to retrieve the state and create the ScaleState objects. | Improve this Doc View Source ScaleStateList(YAxisList) Construct a new ScaleStateList automatically from an existing YAxisList . Declaration public ScaleStateList(YAxisList list) Parameters Type Name Description YAxisList list The YAxisList (a list of Y axes), from which to retrieve the state and create the ScaleState objects. Methods | Improve this Doc View Source ApplyScale(Y2AxisList) Declaration public void ApplyScale(Y2AxisList list) Parameters Type Name Description Y2AxisList list | Improve this Doc View Source ApplyScale(YAxisList) Declaration public void ApplyScale(YAxisList list) Parameters Type Name Description YAxisList list | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public ScaleStateList Clone() Returns Type Description ScaleStateList A new, independent copy of this class | Improve this Doc View Source IsChanged(Y2AxisList) Iterate through the list of ScaleState objects, comparing them to the state of the specified Y2AxisList Axis objects. Declaration public bool IsChanged(Y2AxisList list) Parameters Type Name Description Y2AxisList list A Y2AxisList object specifying a list of Axis objects to be compared with this ScaleStateList . Returns Type Description Boolean true if a difference is found, false otherwise | Improve this Doc View Source IsChanged(YAxisList) Iterate through the list of ScaleState objects, comparing them to the state of the specified YAxisList Axis objects. Declaration public bool IsChanged(YAxisList list) Parameters Type Name Description YAxisList list A YAxisList object specifying a list of Axis objects to be compared with this ScaleStateList . Returns Type Description Boolean true if a difference is found, false otherwise Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable System.ICloneable"
  },
  "api/ZedGraph.ScrollRange.html": {
    "href": "api/ZedGraph.ScrollRange.html",
    "title": "Struct ScrollRange",
    "keywords": "Struct ScrollRange A simple struct to store minimum and maximum Double type values for the scroll range Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct ScrollRange Constructors | Improve this Doc View Source ScrollRange(Boolean) Sets the scroll range to default values of zero, and sets the IsScrollable property as specified. Declaration public ScrollRange(bool isScrollable) Parameters Type Name Description Boolean isScrollable true to make this item scrollable, false otherwise | Improve this Doc View Source ScrollRange(Double, Double, Boolean) Construct a ScrollRange object given the specified data values. Declaration public ScrollRange(double min, double max, bool isScrollable) Parameters Type Name Description Double min The minimum axis value limit for the scroll bar Double max The maximum axis value limit for the scroll bar Boolean isScrollable true to make this item scrollable, false otherwise | Improve this Doc View Source ScrollRange(ScrollRange) The Copy Constructor Declaration public ScrollRange(ScrollRange rhs) Parameters Type Name Description ScrollRange rhs The ScrollRange object from which to copy Properties | Improve this Doc View Source IsScrollable Gets or sets a property that determines if the Axis corresponding to this ScrollRange object can be scrolled. Declaration public bool IsScrollable { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Max The maximum axis value limit for the scroll bar. Declaration public double Max { get; set; } Property Value Type Description Double | Improve this Doc View Source Min The minimum axis value limit for the scroll bar. Declaration public double Min { get; set; } Property Value Type Description Double"
  },
  "api/ZedGraph.ScrollRangeList.html": {
    "href": "api/ZedGraph.ScrollRangeList.html",
    "title": "Class ScrollRangeList",
    "keywords": "Class ScrollRangeList A collection class containing a list of ScrollRange objects. Inheritance Object List < ScrollRange > ScrollRangeList Implements IList < ScrollRange > ICollection < ScrollRange > IEnumerable < ScrollRange > IList ICollection IEnumerable ICloneable Inherited Members System.Collections.Generic.List<ZedGraph.ScrollRange>.System.Collections.IList.get_Item(System.Int32) System.Collections.Generic.List<ZedGraph.ScrollRange>.System.Collections.IList.set_Item(System.Int32, System.Object) List<ScrollRange>.Add(ScrollRange) List<ScrollRange>.AddRange(IEnumerable<ScrollRange>) List<ScrollRange>.AsReadOnly() List<ScrollRange>.BinarySearch(Int32, Int32, ScrollRange, IComparer<ScrollRange>) List<ScrollRange>.BinarySearch(ScrollRange) List<ScrollRange>.BinarySearch(ScrollRange, IComparer<ScrollRange>) List<ScrollRange>.Clear() List<ScrollRange>.Contains(ScrollRange) List<ScrollRange>.ConvertAll<TOutput>(Converter<ScrollRange, TOutput>) List<ScrollRange>.CopyTo(Int32, ScrollRange[], Int32, Int32) List<ScrollRange>.CopyTo(ScrollRange[]) List<ScrollRange>.CopyTo(ScrollRange[], Int32) List<ScrollRange>.Exists(Predicate<ScrollRange>) List<ScrollRange>.Find(Predicate<ScrollRange>) List<ScrollRange>.FindAll(Predicate<ScrollRange>) List<ScrollRange>.FindIndex(Int32, Int32, Predicate<ScrollRange>) List<ScrollRange>.FindIndex(Int32, Predicate<ScrollRange>) List<ScrollRange>.FindIndex(Predicate<ScrollRange>) List<ScrollRange>.FindLast(Predicate<ScrollRange>) List<ScrollRange>.FindLastIndex(Int32, Int32, Predicate<ScrollRange>) List<ScrollRange>.FindLastIndex(Int32, Predicate<ScrollRange>) List<ScrollRange>.FindLastIndex(Predicate<ScrollRange>) List<ScrollRange>.ForEach(Action<ScrollRange>) List<ScrollRange>.GetEnumerator() List<ScrollRange>.GetRange(Int32, Int32) List<ScrollRange>.IndexOf(ScrollRange) List<ScrollRange>.IndexOf(ScrollRange, Int32) List<ScrollRange>.IndexOf(ScrollRange, Int32, Int32) List<ScrollRange>.Insert(Int32, ScrollRange) List<ScrollRange>.InsertRange(Int32, IEnumerable<ScrollRange>) List<ScrollRange>.LastIndexOf(ScrollRange) List<ScrollRange>.LastIndexOf(ScrollRange, Int32) List<ScrollRange>.LastIndexOf(ScrollRange, Int32, Int32) List<ScrollRange>.Remove(ScrollRange) List<ScrollRange>.RemoveAll(Predicate<ScrollRange>) List<ScrollRange>.RemoveAt(Int32) List<ScrollRange>.RemoveRange(Int32, Int32) List<ScrollRange>.Reverse() List<ScrollRange>.Reverse(Int32, Int32) List<ScrollRange>.Sort() List<ScrollRange>.Sort(IComparer<ScrollRange>) List<ScrollRange>.Sort(Comparison<ScrollRange>) List<ScrollRange>.Sort(Int32, Int32, IComparer<ScrollRange>) List<ScrollRange>.IEnumerable<ScrollRange>.GetEnumerator() List<ScrollRange>.ICollection.CopyTo(Array, Int32) List<ScrollRange>.IEnumerable.GetEnumerator() List<ScrollRange>.IList.Add(Object) List<ScrollRange>.IList.Contains(Object) List<ScrollRange>.IList.IndexOf(Object) List<ScrollRange>.IList.Insert(Int32, Object) List<ScrollRange>.IList.Remove(Object) List<ScrollRange>.ToArray() List<ScrollRange>.TrimExcess() List<ScrollRange>.TrueForAll(Predicate<ScrollRange>) List<ScrollRange>.Capacity List<ScrollRange>.Count List<ScrollRange>.ICollection<ScrollRange>.IsReadOnly List<ScrollRange>.ICollection.IsSynchronized List<ScrollRange>.ICollection.SyncRoot List<ScrollRange>.IList.IsFixedSize List<ScrollRange>.IList.IsReadOnly List<ScrollRange>.IList.Item[Int32] Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public class ScrollRangeList : List<ScrollRange>, IList<ScrollRange>, ICollection<ScrollRange>, IEnumerable<ScrollRange>, IList, ICollection, IEnumerable, ICloneable Constructors | Improve this Doc View Source ScrollRangeList() Default constructor for the collection class. Declaration public ScrollRangeList() | Improve this Doc View Source ScrollRangeList(ScrollRangeList) The Copy Constructor Declaration public ScrollRangeList(ScrollRangeList rhs) Parameters Type Name Description ScrollRangeList rhs The ScrollRangeList object from which to copy Properties | Improve this Doc View Source Item[Int32] Indexer to access the specified ScrollRange object by its ordinal position in the list. Declaration public ScrollRange this[int index] { get; set; } Parameters Type Name Description Int32 index The ordinal position (zero-based) of the ScrollRange object to be accessed. Property Value Type Description ScrollRange A ScrollRange object instance Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public ScrollRangeList Clone() Returns Type Description ScrollRangeList A new, independent copy of this class Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable System.ICloneable"
  },
  "api/ZedGraph.Selection.html": {
    "href": "api/ZedGraph.Selection.html",
    "title": "Class Selection",
    "keywords": "Class Selection Inheritance Object List < CurveItem > CurveList Selection Implements IList < CurveItem > ICollection < CurveItem > IEnumerable < CurveItem > IList ICollection IEnumerable ICloneable Inherited Members CurveList.MaxPts CurveList.NumBars CurveList.NumClusterableBars CurveList.NumPies CurveList.IsPieOnly CurveList.HasData() CurveList.ICloneable.Clone() CurveList.Clone() CurveList.Backward CurveList.Forward CurveList.Item[String] CurveList.IndexOf(String) CurveList.IndexOfTag(String) CurveList.Sort(SortType, Int32) CurveList.Move(Int32, Int32) CurveList.GetRange(Boolean, Boolean, GraphPane) CurveList.Draw(Graphics, GraphPane, Single) CurveList.GetBarItemPos(GraphPane, BarItem) System.Collections.Generic.List<ZedGraph.CurveItem>.System.Collections.IList.get_Item(System.Int32) System.Collections.Generic.List<ZedGraph.CurveItem>.System.Collections.IList.set_Item(System.Int32, System.Object) List<CurveItem>.Add(CurveItem) List<CurveItem>.AddRange(IEnumerable<CurveItem>) List<CurveItem>.AsReadOnly() List<CurveItem>.BinarySearch(Int32, Int32, CurveItem, IComparer<CurveItem>) List<CurveItem>.BinarySearch(CurveItem) List<CurveItem>.BinarySearch(CurveItem, IComparer<CurveItem>) List<CurveItem>.Clear() List<CurveItem>.Contains(CurveItem) List<CurveItem>.ConvertAll<TOutput>(Converter<CurveItem, TOutput>) List<CurveItem>.CopyTo(Int32, CurveItem[], Int32, Int32) List<CurveItem>.CopyTo(CurveItem[]) List<CurveItem>.CopyTo(CurveItem[], Int32) List<CurveItem>.Exists(Predicate<CurveItem>) List<CurveItem>.Find(Predicate<CurveItem>) List<CurveItem>.FindAll(Predicate<CurveItem>) List<CurveItem>.FindIndex(Int32, Int32, Predicate<CurveItem>) List<CurveItem>.FindIndex(Int32, Predicate<CurveItem>) List<CurveItem>.FindIndex(Predicate<CurveItem>) List<CurveItem>.FindLast(Predicate<CurveItem>) List<CurveItem>.FindLastIndex(Int32, Int32, Predicate<CurveItem>) List<CurveItem>.FindLastIndex(Int32, Predicate<CurveItem>) List<CurveItem>.FindLastIndex(Predicate<CurveItem>) List<CurveItem>.ForEach(Action<CurveItem>) List<CurveItem>.GetEnumerator() List<CurveItem>.GetRange(Int32, Int32) List<CurveItem>.IndexOf(CurveItem) List<CurveItem>.IndexOf(CurveItem, Int32) List<CurveItem>.IndexOf(CurveItem, Int32, Int32) List<CurveItem>.Insert(Int32, CurveItem) List<CurveItem>.InsertRange(Int32, IEnumerable<CurveItem>) List<CurveItem>.LastIndexOf(CurveItem) List<CurveItem>.LastIndexOf(CurveItem, Int32) List<CurveItem>.LastIndexOf(CurveItem, Int32, Int32) List<CurveItem>.Remove(CurveItem) List<CurveItem>.RemoveAll(Predicate<CurveItem>) List<CurveItem>.RemoveAt(Int32) List<CurveItem>.RemoveRange(Int32, Int32) List<CurveItem>.Reverse() List<CurveItem>.Reverse(Int32, Int32) List<CurveItem>.Sort() List<CurveItem>.Sort(IComparer<CurveItem>) List<CurveItem>.Sort(Comparison<CurveItem>) List<CurveItem>.Sort(Int32, Int32, IComparer<CurveItem>) List<CurveItem>.IEnumerable<CurveItem>.GetEnumerator() List<CurveItem>.ICollection.CopyTo(Array, Int32) List<CurveItem>.IEnumerable.GetEnumerator() List<CurveItem>.IList.Add(Object) List<CurveItem>.IList.Contains(Object) List<CurveItem>.IList.IndexOf(Object) List<CurveItem>.IList.Insert(Int32, Object) List<CurveItem>.IList.Remove(Object) List<CurveItem>.ToArray() List<CurveItem>.TrimExcess() List<CurveItem>.TrueForAll(Predicate<CurveItem>) List<CurveItem>.Capacity List<CurveItem>.Count List<CurveItem>.Item[Int32] List<CurveItem>.ICollection<CurveItem>.IsReadOnly List<CurveItem>.ICollection.IsSynchronized List<CurveItem>.ICollection.SyncRoot List<CurveItem>.IList.IsFixedSize List<CurveItem>.IList.IsReadOnly List<CurveItem>.IList.Item[Int32] Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public class Selection : CurveList, IList<CurveItem>, ICollection<CurveItem>, IEnumerable<CurveItem>, IList, ICollection, IEnumerable, ICloneable Fields | Improve this Doc View Source Border The Border type to be used for drawing \"selected\" PieItem , BarItem , HiLowBarItem , OHLCBarItem , and JapaneseCandleStickItem item types. Declaration public static Border Border Field Value Type Description Border | Improve this Doc View Source Fill The Fill type to be used for drawing \"selected\" PieItem , BarItem , HiLowBarItem , and JapaneseCandleStickItem item types. Declaration public static Fill Fill Field Value Type Description Fill | Improve this Doc View Source Line The Line type to be used for drawing \"selected\" LineItem and StickItem types Declaration public static Line Line Field Value Type Description Line | Improve this Doc View Source Symbol The Symbol type to be used for drawing \"selected\" LineItem and ErrorBarItem types. Declaration public static Symbol Symbol Field Value Type Description Symbol Methods | Improve this Doc View Source AddToSelection(MasterPane, CurveItem) Add a CurveItem to the selection list. Declaration public void AddToSelection(MasterPane master, CurveItem ci) Parameters Type Name Description MasterPane master The MasterPane that is the \"owner\" of the CurveItem 's. CurveItem ci The CurveItem to be added to the list. | Improve this Doc View Source AddToSelection(MasterPane, CurveList) Add a list of CurveItem 's to the selection list. Declaration public void AddToSelection(MasterPane master, CurveList ciList) Parameters Type Name Description MasterPane master The MasterPane that is the \"owner\" of the CurveItem 's. CurveList ciList The list of CurveItem 's to be added to the list. | Improve this Doc View Source ClearSelection(MasterPane) Clear the selection list and trigger a SelectionChangedEvent . Declaration public void ClearSelection(MasterPane master) Parameters Type Name Description MasterPane master The MasterPane that \"owns\" the selection list. | Improve this Doc View Source ClearSelection(MasterPane, Boolean) Clear the selection list and optionally trigger a SelectionChangedEvent . Declaration public void ClearSelection(MasterPane master, bool sendEvent) Parameters Type Name Description MasterPane master The MasterPane that \"owns\" the selection list. Boolean sendEvent true to trigger a SelectionChangedEvent , false otherwise. | Improve this Doc View Source RemoveFromSelection(MasterPane, CurveItem) Remove the specified CurveItem from the selection list. Declaration public void RemoveFromSelection(MasterPane master, CurveItem ci) Parameters Type Name Description MasterPane master The MasterPane that is the \"owner\" of the CurveItem 's. CurveItem ci The CurveItem to be removed from the list. | Improve this Doc View Source Select(MasterPane, CurveItem) Place a CurveItem in the selection list, removing all other items. Declaration public void Select(MasterPane master, CurveItem ci) Parameters Type Name Description MasterPane master The MasterPane that is the \"owner\" of the CurveItem 's. CurveItem ci The CurveItem to be added to the list. | Improve this Doc View Source Select(MasterPane, CurveList) Place a list of CurveItem 's in the selection list, removing all other items. Declaration public void Select(MasterPane master, CurveList ciList) Parameters Type Name Description MasterPane master The MasterPane that is the \"owner\" of the CurveItem 's. CurveList ciList The list of CurveItem to be added to the list. | Improve this Doc View Source UpdateSelection(MasterPane) Mark the CurveItem 's that are included in the selection list by setting the IsSelected property to true. Declaration public void UpdateSelection(MasterPane master) Parameters Type Name Description MasterPane master The MasterPane that \"owns\" the selection list. Events | Improve this Doc View Source SelectionChangedEvent Subscribe to this event to receive notice that the list of selected CurveItems has changed Declaration public event EventHandler SelectionChangedEvent Event Type Type Description EventHandler Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable System.ICloneable"
  },
  "api/ZedGraph.SortType.html": {
    "href": "api/ZedGraph.SortType.html",
    "title": "Enum SortType",
    "keywords": "Enum SortType Enumeration type that defines which set of data points - X or Y - is used Sort() to perform the sort. Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public enum SortType Fields Name Description XValues Use the X values to sort the list. YValues Use the Y values to sort the list."
  },
  "api/ZedGraph.StepType.html": {
    "href": "api/ZedGraph.StepType.html",
    "title": "Enum StepType",
    "keywords": "Enum StepType Enumeration type that defines how a curve is drawn. Curves can be drawn as ordinary lines by connecting the points directly, or in a stair-step fashion as a series of discrete, constant values. In a stair step plot, all lines segments are either horizontal or vertical. In a non-step (line) plot, the lines can be any angle. Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public enum StepType Fields Name Description ForwardSegment Draw the CurveItem as a segment in which each point defines the beginning (left side) of a new \"stair.\" This implies the points are defined at the beginning of an \"event.\" Note that ForwardSegment is different from ForwardStep in that it does not draw the vertical portion of the step. ForwardStep Draw the CurveItem as a stair-step in which each point defines the beginning (left side) of a new stair. This implies the points are defined at the beginning of an \"event.\" NonStep Draw the CurveItem as an ordinary line, in which the points are connected directly by line segments. RearwardSegment Draw the CurveItem as a segment in which each point defines the end (right side) of a new \"stair.\" This implies the points are defined at the end of an \"event.\" Note that RearwardSegment is different from RearwardStep in that it does not draw the vertical portion of the step. RearwardStep Draw the CurveItem as a stair-step in which each point defines the end (right side) of a new stair. This implies the points are defined at the end of an \"event.\" See Also StepType"
  },
  "api/ZedGraph.StickItem.html": {
    "href": "api/ZedGraph.StickItem.html",
    "title": "Class StickItem",
    "keywords": "Class StickItem Encapsulates a curve type that is displayed as a series of vertical \"sticks\", one at each defined point. Inheritance Object CurveItem LineItem StickItem Implements ICloneable ISerializable Inherited Members LineItem._symbol LineItem._line LineItem.Symbol LineItem.Line LineItem.schema2 LineItem.Draw(Graphics, GraphPane, Int32, Single) LineItem.DrawLegendKey(Graphics, GraphPane, RectangleF, Single) LineItem.MakeUnique(ColorSymbolRotator) LineItem.GetCoords(GraphPane, Int32, String) CurveItem._isX2Axis CurveItem._isY2Axis CurveItem._yAxisIndex CurveItem._isVisible CurveItem._isSelected CurveItem._isSelectable CurveItem._isOverrideOrdinal CurveItem._points CurveItem.Tag CurveItem.schema CurveItem.Label CurveItem.Color CurveItem.IsVisible CurveItem.IsSelected CurveItem.IsSelectable CurveItem.IsOverrideOrdinal CurveItem.IsX2Axis CurveItem.IsY2Axis CurveItem.YAxisIndex CurveItem.IsBar CurveItem.IsPie CurveItem.IsLine CurveItem.NPts CurveItem.Points CurveItem.Item[Int32] CurveItem.Link CurveItem.AddPoint(Double, Double) CurveItem.AddPoint(PointPair) CurveItem.Clear() CurveItem.RemovePoint(Int32) CurveItem.GetXAxis(GraphPane) CurveItem.GetYAxis(GraphPane) CurveItem.GetYAxisIndex(GraphPane) CurveItem.MakeUnique() CurveItem.GetRange(Double, Double, Double, Double, Boolean, Boolean, GraphPane) CurveItem.BaseAxis(GraphPane) CurveItem.ValueAxis(GraphPane) CurveItem.GetBarWidth(GraphPane) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class StickItem : LineItem, ICloneable, ISerializable Remarks The sticks run from the zero value of the Y axis, to the Y point defined in each PointPair of the IPointList (see Points ). The properties of the sticks are defined in the Line property. Normally, the Symbol is not visible. However, if you manually enable the Symbol using the IsVisible property, the symbols will be drawn at the \"Z\" value from each PointPair (see Z ). Constructors | Improve this Doc View Source StickItem(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected StickItem(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source StickItem(String) Create a new StickItem , specifying only the legend Label . Declaration public StickItem(string label) Parameters Type Name Description String label The label that will appear in the legend. | Improve this Doc View Source StickItem(String, Double[], Double[], Color) Create a new StickItem using the specified properties. Declaration public StickItem(string label, double[] x, double[] y, Color color) Parameters Type Name Description String label The label that will appear in the legend. Double [] x An array of double precision values that define the independent (X axis) values for this curve Double [] y An array of double precision values that define the dependent (Y axis) values for this curve Color color A Color value that will be applied to the Line and Symbol properties. | Improve this Doc View Source StickItem(String, Double[], Double[], Color, Single) Create a new StickItem using the specified properties. Declaration public StickItem(string label, double[] x, double[] y, Color color, float lineWidth) Parameters Type Name Description String label The label that will appear in the legend. Double [] x An array of double precision values that define the independent (X axis) values for this curve Double [] y An array of double precision values that define the dependent (Y axis) values for this curve Color color A Color value that will be applied to the Line and Symbol properties. Single lineWidth The width (in points) to be used for the Line . This width is scaled based on CalcScaleFactor() . Use a value of zero to hide the line (see IsVisible ). | Improve this Doc View Source StickItem(String, IPointList, Color) Create a new StickItem using the specified properties. Declaration public StickItem(string label, IPointList points, Color color) Parameters Type Name Description String label The label that will appear in the legend. IPointList points A IPointList of double precision value pairs that define the X and Y values for this curve Color color A Color value that will be applied to the Line and Symbol properties. | Improve this Doc View Source StickItem(String, IPointList, Color, Single) Create a new StickItem using the specified properties. Declaration public StickItem(string label, IPointList points, Color color, float lineWidth) Parameters Type Name Description String label The label that will appear in the legend. IPointList points A IPointList of double precision value pairs that define the X and Y values for this curve Color color A Color value that will be applied to the Line and Symbol properties. Single lineWidth The width (in points) to be used for the Line . This width is scaled based on CalcScaleFactor() . Use a value of zero to hide the line (see IsVisible ). | Improve this Doc View Source StickItem(StickItem) The Copy Constructor Declaration public StickItem(StickItem rhs) Parameters Type Name Description StickItem rhs The StickItem object from which to copy Fields | Improve this Doc View Source schema3 Current schema value that defines the version of the serialized file Declaration public const int schema3 = 10 Field Value Type Description Int32 Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public StickItem Clone() Returns Type Description StickItem A new, independent copy of this class | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides LineItem.GetObjectData(SerializationInfo, StreamingContext) Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.StockPointList.html": {
    "href": "api/ZedGraph.StockPointList.html",
    "title": "Class StockPointList",
    "keywords": "Class StockPointList A collection class containing a list of StockPt objects that define the set of points to be displayed on the curve. Inheritance Object List < StockPt > StockPointList Implements IList < StockPt > ICollection < StockPt > IEnumerable < StockPt > IList ICollection IEnumerable IPointListEdit IPointList ICloneable Inherited Members System.Collections.Generic.List<ZedGraph.StockPt>.System.Collections.IList.get_Item(System.Int32) System.Collections.Generic.List<ZedGraph.StockPt>.System.Collections.IList.set_Item(System.Int32, System.Object) List<StockPt>.AddRange(IEnumerable<StockPt>) List<StockPt>.AsReadOnly() List<StockPt>.BinarySearch(Int32, Int32, StockPt, IComparer<StockPt>) List<StockPt>.BinarySearch(StockPt) List<StockPt>.BinarySearch(StockPt, IComparer<StockPt>) List<StockPt>.Clear() List<StockPt>.Contains(StockPt) List<StockPt>.ConvertAll<TOutput>(Converter<StockPt, TOutput>) List<StockPt>.CopyTo(Int32, StockPt[], Int32, Int32) List<StockPt>.CopyTo(StockPt[]) List<StockPt>.CopyTo(StockPt[], Int32) List<StockPt>.Exists(Predicate<StockPt>) List<StockPt>.Find(Predicate<StockPt>) List<StockPt>.FindAll(Predicate<StockPt>) List<StockPt>.FindIndex(Int32, Int32, Predicate<StockPt>) List<StockPt>.FindIndex(Int32, Predicate<StockPt>) List<StockPt>.FindIndex(Predicate<StockPt>) List<StockPt>.FindLast(Predicate<StockPt>) List<StockPt>.FindLastIndex(Int32, Int32, Predicate<StockPt>) List<StockPt>.FindLastIndex(Int32, Predicate<StockPt>) List<StockPt>.FindLastIndex(Predicate<StockPt>) List<StockPt>.ForEach(Action<StockPt>) List<StockPt>.GetEnumerator() List<StockPt>.GetRange(Int32, Int32) List<StockPt>.IndexOf(StockPt) List<StockPt>.IndexOf(StockPt, Int32) List<StockPt>.IndexOf(StockPt, Int32, Int32) List<StockPt>.Insert(Int32, StockPt) List<StockPt>.InsertRange(Int32, IEnumerable<StockPt>) List<StockPt>.LastIndexOf(StockPt) List<StockPt>.LastIndexOf(StockPt, Int32) List<StockPt>.LastIndexOf(StockPt, Int32, Int32) List<StockPt>.Remove(StockPt) List<StockPt>.RemoveAll(Predicate<StockPt>) List<StockPt>.RemoveAt(Int32) List<StockPt>.RemoveRange(Int32, Int32) List<StockPt>.Reverse() List<StockPt>.Reverse(Int32, Int32) List<StockPt>.Sort() List<StockPt>.Sort(IComparer<StockPt>) List<StockPt>.Sort(Comparison<StockPt>) List<StockPt>.Sort(Int32, Int32, IComparer<StockPt>) List<StockPt>.IEnumerable<StockPt>.GetEnumerator() List<StockPt>.ICollection.CopyTo(Array, Int32) List<StockPt>.IEnumerable.GetEnumerator() List<StockPt>.IList.Add(Object) List<StockPt>.IList.Contains(Object) List<StockPt>.IList.IndexOf(Object) List<StockPt>.IList.Insert(Int32, Object) List<StockPt>.IList.Remove(Object) List<StockPt>.ToArray() List<StockPt>.TrimExcess() List<StockPt>.TrueForAll(Predicate<StockPt>) List<StockPt>.Capacity List<StockPt>.Count List<StockPt>.ICollection<StockPt>.IsReadOnly List<StockPt>.ICollection.IsSynchronized List<StockPt>.ICollection.SyncRoot List<StockPt>.IList.IsFixedSize List<StockPt>.IList.IsReadOnly List<StockPt>.IList.Item[Int32] Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class StockPointList : List<StockPt>, IList<StockPt>, ICollection<StockPt>, IEnumerable<StockPt>, IList, ICollection, IEnumerable, IPointListEdit, IPointList, ICloneable Constructors | Improve this Doc View Source StockPointList() Default constructor for the collection class Declaration public StockPointList() | Improve this Doc View Source StockPointList(StockPointList) The Copy Constructor Declaration public StockPointList(StockPointList rhs) Parameters Type Name Description StockPointList rhs The StockPointList from which to copy Properties | Improve this Doc View Source Item[Int32] Indexer to access the specified StockPt object by its ordinal position in the list. Declaration public PointPair this[int index] { get; set; } Parameters Type Name Description Int32 index The ordinal position (zero-based) of the StockPt object to be accessed. Property Value Type Description PointPair A StockPt object reference. Methods | Improve this Doc View Source Add(Double, Double) Add a StockPt object to the collection at the end of the list using the specified values. The unspecified values (low, open, close) are all set to Missing . Declaration public void Add(double date, double high) Parameters Type Name Description Double date An XDate value Double high The high value for the day | Improve this Doc View Source Add(Double, Double, Double, Double, Double, Double) Add a single point to the PointPairList from values of type double. Declaration public void Add(double date, double high, double low, double open, double close, double vol) Parameters Type Name Description Double date An XDate value Double high The high value for the day Double low The low value for the day Double open The opening value for the day Double close The closing value for the day Double vol The trading volume for the day | Improve this Doc View Source Add(PointPair) Add a PointPair object to the collection at the end of the list. Declaration public void Add(PointPair point) Parameters Type Name Description PointPair point The PointPair object to be added | Improve this Doc View Source Add(StockPt) Add a StockPt object to the collection at the end of the list. Declaration public void Add(StockPt point) Parameters Type Name Description StockPt point The StockPt object to be added | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public StockPointList Clone() Returns Type Description StockPointList A new, independent copy of this class | Improve this Doc View Source GetAt(Int32) Access the StockPt at the specified ordinal index. Declaration public StockPt GetAt(int index) Parameters Type Name Description Int32 index The ordinal position (zero-based) in the list Returns Type Description StockPt The specified StockPt . Remarks To be compatible with the IPointList interface, the StockPointList must implement an index that returns a PointPair rather than a StockPt . This method will return the actual StockPt at the specified position. Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable IPointListEdit IPointList System.ICloneable"
  },
  "api/ZedGraph.StockPt.html": {
    "href": "api/ZedGraph.StockPt.html",
    "title": "Class StockPt",
    "keywords": "Class StockPt The basic PointPair class holds three data values (X, Y, Z). This class extends the basic PointPair to contain five data values (X, Y, Z, Open, Close). Inheritance Object PointPairBase PointPair StockPt Implements ICloneable ISerializable Inherited Members PointPair.Z PointPair.Tag PointPair.ICloneable.Clone() PointPair.Clone() PointPair.schema2 PointPair.IsInvalid3D PointPair.LowValue PointPair.Equals(Object) PointPair.GetHashCode() PointPair.ToString(String, String, String) PointPairBase.Missing PointPairBase.DefaultFormat PointPairBase.X PointPairBase.Y PointPairBase.schema PointPairBase.IsMissing PointPairBase.IsInvalid PointPairBase.IsValueInvalid(Double) PointPairBase.ToString() PointPairBase.ToString(String) PointPairBase.ToString(String, String) Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class StockPt : PointPair, ICloneable, ISerializable Remarks The values are remapped to Date , High , Low , Open , and Close . Constructors | Improve this Doc View Source StockPt() Default Constructor Declaration public StockPt() | Improve this Doc View Source StockPt(Double, Double, Double, Double, Double, Double) Construct a new StockPt from the specified data values Declaration public StockPt(double date, double high, double low, double open, double close, double vol) Parameters Type Name Description Double date The trading date ( XDate ) Double high The daily high stock price Double low The daily low stock price Double open The opening stock price Double close The closing stock price Double vol The daily trading volume | Improve this Doc View Source StockPt(Double, Double, Double, Double, Double, Double, String) Construct a new StockPt from the specified data values including a Tag property Declaration public StockPt(double date, double high, double low, double open, double close, double vol, string tag) Parameters Type Name Description Double date The trading date ( XDate ) Double high The daily high stock price Double low The daily low stock price Double open The opening stock price Double close The closing stock price Double vol The daily trading volume String tag The user-defined Tag property. | Improve this Doc View Source StockPt(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected StockPt(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source StockPt(PointPair) The StockPt copy constructor. Declaration public StockPt(PointPair rhs) Parameters Type Name Description PointPair rhs The basis for the copy. | Improve this Doc View Source StockPt(StockPt) The StockPt copy constructor. Declaration public StockPt(StockPt rhs) Parameters Type Name Description StockPt rhs The basis for the copy. Fields | Improve this Doc View Source Close This closing value Declaration public double Close Field Value Type Description Double | Improve this Doc View Source Open This opening value Declaration public double Open Field Value Type Description Double | Improve this Doc View Source schema3 Current schema value that defines the version of the serialized file Declaration public const int schema3 = 11 Field Value Type Description Int32 | Improve this Doc View Source Vol This daily trading volume Declaration public double Vol Field Value Type Description Double Properties | Improve this Doc View Source ColorValue The ColorValue property. This is used with the GradientByColorValue option. Declaration public override double ColorValue { get; set; } Property Value Type Description Double Overrides PointPair.ColorValue | Improve this Doc View Source Date Map the Date property to the X value Declaration public double Date { get; set; } Property Value Type Description Double | Improve this Doc View Source High Map the high property to the Y value Declaration public double High { get; set; } Property Value Type Description Double | Improve this Doc View Source IsInvalid5D Readonly value that determines if either the Date, Close, Open, High, or Low coordinate in this StockPt is an invalid (not plotable) value. It is considered invalid if it is missing (equal to System.Double.Max), Infinity, or NaN. Declaration public bool IsInvalid5D { get; } Property Value Type Description Boolean true if any value is invalid | Improve this Doc View Source Low Map the low property to the Z value Declaration public double Low { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides PointPair.GetObjectData(SerializationInfo, StreamingContext) | Improve this Doc View Source ToString(Boolean) Format this StockPt value using the default format. Example: \"( 12.345, -16.876 )\". The two double values are formatted with the \"g\" format type. Declaration public override string ToString(bool isShowAll) Parameters Type Name Description Boolean isShowAll true to show all the value coordinates Returns Type Description String A string representation of the StockPt . Overrides PointPair.ToString(Boolean) | Improve this Doc View Source ToString(String, Boolean) Format this PointPair value using a general format string. Example: a format string of \"e2\" would give \"( 1.23e+001, -1.69e+001 )\". If is true, then the third all coordinates are shown. Declaration public override string ToString(string format, bool isShowAll) Parameters Type Name Description String format A format string that will be used to format each of the two double type values (see ToString() ). Boolean isShowAll true to show all the value coordinates Returns Type Description String A string representation of the PointPair Overrides PointPair.ToString(String, Boolean) Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.Symbol.Default.html": {
    "href": "api/ZedGraph.Symbol.Default.html",
    "title": "Struct Symbol.Default",
    "keywords": "Struct Symbol.Default A simple struct that defines the default property values for the Symbol class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source BorderColor The default color for drawing symbols ( Color property). Declaration public static Color BorderColor Field Value Type Description Color | Improve this Doc View Source FillBrush The default custom brush for filling in this Symbol ( Brush property). Declaration public static Brush FillBrush Field Value Type Description Brush | Improve this Doc View Source FillColor The default color for filling in this Symbol ( Color property). Declaration public static Color FillColor Field Value Type Description Color | Improve this Doc View Source FillType The default fill mode for the curve ( Type property). Declaration public static FillType FillType Field Value Type Description FillType | Improve this Doc View Source IsAntiAlias The default value for the IsAntiAlias property. Declaration public static bool IsAntiAlias Field Value Type Description Boolean | Improve this Doc View Source IsBorderVisible The default for drawing frames around symbols ( IsVisible property). true to display symbol frames, false to hide them. Declaration public static bool IsBorderVisible Field Value Type Description Boolean | Improve this Doc View Source IsVisible The default display mode for symbols ( IsVisible property). true to display symbols, false to hide them. Declaration public static bool IsVisible Field Value Type Description Boolean | Improve this Doc View Source PenWidth The default pen width to be used for drawing curve symbols ( Width property). Units are points. Declaration public static float PenWidth Field Value Type Description Single | Improve this Doc View Source Size The default size for curve symbols ( Size property), in units of points. Declaration public static float Size Field Value Type Description Single | Improve this Doc View Source Type The default symbol type for curves ( Type property). This is defined as a SymbolType enumeration. Declaration public static SymbolType Type Field Value Type Description SymbolType"
  },
  "api/ZedGraph.Symbol.html": {
    "href": "api/ZedGraph.Symbol.html",
    "title": "Class Symbol",
    "keywords": "Class Symbol This class handles the drawing of the curve Symbol objects. The symbols are the small shapes that appear over each defined point along the curve. Inheritance Object Symbol Implements ICloneable ISerializable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class Symbol : ICloneable, ISerializable Constructors | Improve this Doc View Source Symbol() Default constructor that sets all Symbol properties to default values as defined in the Symbol.Default class. Declaration public Symbol() | Improve this Doc View Source Symbol(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected Symbol(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source Symbol(Symbol) The Copy Constructor Declaration public Symbol(Symbol rhs) Parameters Type Name Description Symbol rhs The Symbol object from which to copy | Improve this Doc View Source Symbol(SymbolType, Color) Default constructor that sets the SymbolType and Color as specified, and the remaining Symbol properties to default values as defined in the Symbol.Default class. Declaration public Symbol(SymbolType type, Color color) Parameters Type Name Description SymbolType type A SymbolType enum value indicating the shape of the symbol Color color A Color value indicating the color of the symbol Fields | Improve this Doc View Source schema Current schema value that defines the version of the serialized file Declaration public const int schema = 11 Field Value Type Description Int32 Properties | Improve this Doc View Source Border Gets or sets the Border data for this Symbol , which controls the border outline of the symbol. Declaration public Border Border { get; set; } Property Value Type Description Border | Improve this Doc View Source Fill Gets or sets the Fill data for this Symbol . Declaration public Fill Fill { get; set; } Property Value Type Description Fill | Improve this Doc View Source IsAntiAlias Gets or sets a value that determines if the symbols are drawn using Anti-Aliasing capabilities from the Graphics class. Declaration public bool IsAntiAlias { get; set; } Property Value Type Description Boolean Remarks If this value is set to true, then the SmoothingMode property will be set to HighQuality only while this Symbol is drawn. A value of false will leave the value of SmoothingMode unchanged. | Improve this Doc View Source IsVisible Gets or sets a property that shows or hides the Symbol . Declaration public bool IsVisible { get; set; } Property Value Type Description Boolean true to show the symbol, false to hide it See Also IsVisible | Improve this Doc View Source Size Gets or sets the size of the Symbol Declaration public float Size { get; set; } Property Value Type Description Single Size in points (1/72 inch) See Also Size | Improve this Doc View Source Type Gets or sets the type (shape) of the Symbol Declaration public SymbolType Type { get; set; } Property Value Type Description SymbolType A SymbolType enum value indicating the shape See Also Type | Improve this Doc View Source UserSymbol Gets or sets the GraphicsPath data for this Symbol , describing the user-defined symbol type. Declaration public GraphicsPath UserSymbol { get; set; } Property Value Type Description GraphicsPath Remarks This value only applies if Type is UserDefined Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public Symbol Clone() Returns Type Description Symbol A new, independent copy of this class | Improve this Doc View Source Draw(Graphics, GraphPane, LineItem, Single, Boolean) Draw this CurveItem to the specified Graphics device as a symbol at each defined point. The routine only draws the symbols; the lines are draw by the DrawCurve(Graphics, GraphPane, CurveItem, Single) method. This method is normally only called by the Draw method of the CurveItem object Declaration public void Draw(Graphics g, GraphPane pane, LineItem curve, float scaleFactor, bool isSelected) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. LineItem curve A LineItem representing this curve. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Boolean isSelected Indicates that the Symbol should be drawn with attributes from the Selection class. | Improve this Doc View Source DrawSymbol(Graphics, GraphPane, Int32, Int32, Single, Boolean, PointPair) Draw the Symbol to the specified Graphics device at the specified location. This routine draws a single symbol. Declaration public void DrawSymbol(Graphics g, GraphPane pane, int x, int y, float scaleFactor, bool isSelected, PointPair dataValue) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Int32 x The x position of the center of the symbol in pixel units Int32 y The y position of the center of the symbol in pixel units Single scaleFactor The scaling factor for the features of the graph based on the BaseDimension . This scaling factor is calculated by the CalcScaleFactor() method. The scale factor represents a linear multiple to be applied to font sizes, symbol sizes, etc. Boolean isSelected Indicates that the Symbol should be drawn with attributes from the Selection class. PointPair dataValue The data value to be used for a value-based color gradient. This is only applicable for GradientByX , GradientByY or GradientByZ . | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public virtual void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source MakePath(Graphics, Single) Create a GraphicsPath struct for the current symbol based on the specified scaleFactor and assuming the symbol will be centered at position 0,0. Declaration public GraphicsPath MakePath(Graphics g, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. Single scaleFactor The scaling factor for the features of the graph based on the BaseDimension . This scaling factor is calculated by the CalcScaleFactor() method. The scale factor represents a linear multiple to be applied to font sizes, symbol sizes, etc. Returns Type Description GraphicsPath Returns the GraphicsPath for the current symbol Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.SymbolType.html": {
    "href": "api/ZedGraph.SymbolType.html",
    "title": "Enum SymbolType",
    "keywords": "Enum SymbolType Enumeration type for the various symbol shapes that are available Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public enum SymbolType Fields Name Description Circle Uniform circle Symbol Default A Default symbol type (the symbol type will be obtained from Type . Diamond Rhombus-shaped Symbol HDash Horizontal dash Symbol . This symbol cannot be filled since it has no outline. None No symbol is shown (this is equivalent to using IsVisible = false. Plus \"+\" shaped Symbol . This symbol cannot be filled since it has no outline. Square Square-shaped Symbol Star Asterisk-shaped Symbol . This symbol cannot be filled since it has no outline. Triangle Equilateral triangle Symbol TriangleDown Unilateral triangle Symbol , pointing down. UserDefined A symbol defined by the UserSymbol propery. If no symbol is defined, the Type . symbol will be used. VDash Vertical dash Symbol . This symbol cannot be filled since it has no outline. XCross \"X\" shaped Symbol . This symbol cannot be filled since it has no outline. See Also Fill"
  },
  "api/ZedGraph.TextObj.Default.html": {
    "href": "api/ZedGraph.TextObj.Default.html",
    "title": "Struct TextObj.Default",
    "keywords": "Struct TextObj.Default A simple struct that defines the default property values for the TextObj class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source FontBold The default font bold mode for the TextObj text ( IsBold property). true for a bold typeface, false otherwise. Declaration public static bool FontBold Field Value Type Description Boolean | Improve this Doc View Source FontColor The default font color for the TextObj text ( FontColor property). Declaration public static Color FontColor Field Value Type Description Color | Improve this Doc View Source FontFamily The default font family for the TextObj text ( Family property). Declaration public static string FontFamily Field Value Type Description String | Improve this Doc View Source FontItalic The default font italic mode for the TextObj text ( IsItalic property). true for an italic typeface, false otherwise. Declaration public static bool FontItalic Field Value Type Description Boolean | Improve this Doc View Source FontSize The default font size for the TextObj text ( Size property). Units are in points (1/72 inch). Declaration public static float FontSize Field Value Type Description Single | Improve this Doc View Source FontUnderline The default font underline mode for the TextObj text ( IsUnderline property). true for an underlined typeface, false otherwise. Declaration public static bool FontUnderline Field Value Type Description Boolean"
  },
  "api/ZedGraph.TextObj.html": {
    "href": "api/ZedGraph.TextObj.html",
    "title": "Class TextObj",
    "keywords": "Class TextObj A class that represents a text object on the graph. A list of GraphObj objects is maintained by the GraphObjList collection class. Inheritance Object GraphObj TextObj Implements ICloneable ISerializable Inherited Members GraphObj._location GraphObj._isVisible GraphObj._isClippedToChartRect GraphObj.Tag GraphObj.Location GraphObj.ZOrder GraphObj.IsVisible GraphObj.IsClippedToChartRect GraphObj.Link GraphObj.IsInFrontOfData GraphObj.schema Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class TextObj : GraphObj, ICloneable, ISerializable Constructors | Improve this Doc View Source TextObj() Parameterless constructor that initializes a new TextObj . Declaration public TextObj() | Improve this Doc View Source TextObj(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected TextObj(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source TextObj(String, Double, Double) Constructor that sets all TextObj properties to default values as defined in the TextObj.Default class. Declaration public TextObj(string text, double x, double y) Parameters Type Name Description String text The text to be displayed. Double x The x position of the text. The units of this position are specified by the CoordinateFrame property. The text will be aligned to this position based on the AlignH property. Double y The y position of the text. The units of this position are specified by the CoordinateFrame property. The text will be aligned to this position based on the AlignV property. | Improve this Doc View Source TextObj(String, Double, Double, CoordType) Constructor that sets all TextObj properties to default values as defined in the TextObj.Default class. Declaration public TextObj(string text, double x, double y, CoordType coordType) Parameters Type Name Description String text The text to be displayed. Double x The x position of the text. The units of this position are specified by the CoordinateFrame property. The text will be aligned to this position based on the AlignH property. Double y The y position of the text. The units of this position are specified by the CoordinateFrame property. The text will be aligned to this position based on the AlignV property. CoordType coordType The CoordType enum value that indicates what type of coordinate system the x and y parameters are referenced to. | Improve this Doc View Source TextObj(String, Double, Double, CoordType, AlignH, AlignV) Constructor that sets all TextObj properties to default values as defined in the TextObj.Default class. Declaration public TextObj(string text, double x, double y, CoordType coordType, AlignH alignH, AlignV alignV) Parameters Type Name Description String text The text to be displayed. Double x The x position of the text. The units of this position are specified by the CoordinateFrame property. The text will be aligned to this position based on the AlignH property. Double y The y position of the text. The units of this position are specified by the CoordinateFrame property. The text will be aligned to this position based on the AlignV property. CoordType coordType The CoordType enum value that indicates what type of coordinate system the x and y parameters are referenced to. AlignH alignH The AlignH enum that specifies the horizontal alignment of the object with respect to the (x,y) location AlignV alignV The AlignV enum that specifies the vertical alignment of the object with respect to the (x,y) location | Improve this Doc View Source TextObj(TextObj) The Copy Constructor Declaration public TextObj(TextObj rhs) Parameters Type Name Description TextObj rhs The TextObj object from which to copy Fields | Improve this Doc View Source schema2 Current schema value that defines the version of the serialized file Declaration public const int schema2 = 10 Field Value Type Description Int32 Properties | Improve this Doc View Source FontSpec Gets a reference to the FontSpec class used to render this TextObj Declaration public FontSpec FontSpec { get; set; } Property Value Type Description FontSpec See Also FontColor FontBold FontItalic FontUnderline FontFamily FontSize | Improve this Doc View Source LayoutArea Declaration public SizeF LayoutArea { get; set; } Property Value Type Description SizeF | Improve this Doc View Source Text The TextObj to be displayed. This text can be multi-line by including newline ('\\n') characters between the lines. Declaration public string Text { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public TextObj Clone() Returns Type Description TextObj A new, independent copy of this class | Improve this Doc View Source Draw(Graphics, PaneBase, Single) Render this TextObj object to the specified Graphics device This method is normally only called by the Draw method of the parent GraphObjList collection object. Declaration public override void Draw(Graphics g, PaneBase pane, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. PaneBase pane A reference to the PaneBase object that is the parent or owner of this object. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Overrides GraphObj.Draw(Graphics, PaneBase, Single) | Improve this Doc View Source GetCoords(PaneBase, Graphics, Single, out String, out String) Determines the shape type and Coords values for this GraphObj Declaration public override void GetCoords(PaneBase pane, Graphics g, float scaleFactor, out string shape, out string coords) Parameters Type Name Description PaneBase pane Graphics g Single scaleFactor String shape String coords Overrides GraphObj.GetCoords(PaneBase, Graphics, Single, out String, out String) | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides GraphObj.GetObjectData(SerializationInfo, StreamingContext) | Improve this Doc View Source PointInBox(PointF, PaneBase, Graphics, Single) Determine if the specified screen point lies inside the bounding box of this TextObj . This method takes into account rotation and alignment parameters of the text, as specified in the FontSpec . Declaration public override bool PointInBox(PointF pt, PaneBase pane, Graphics g, float scaleFactor) Parameters Type Name Description PointF pt The screen point, in pixels PaneBase pane A reference to the PaneBase object that is the parent or owner of this object. Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Returns Type Description Boolean true if the point lies in the bounding box, false otherwise Overrides GraphObj.PointInBox(PointF, PaneBase, Graphics, Single) Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.ValueHandler.html": {
    "href": "api/ZedGraph.ValueHandler.html",
    "title": "Class ValueHandler",
    "keywords": "Class ValueHandler A class designed to simplify the process of getting the actual value for the various stacked and regular curve types Inheritance Object ValueHandler Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public class ValueHandler Constructors | Improve this Doc View Source ValueHandler(GraphPane, Boolean) Basic constructor that saves a reference to the parent GraphPane object. Declaration public ValueHandler(GraphPane pane, bool initialize) Parameters Type Name Description GraphPane pane The parent GraphPane object. Boolean initialize A Boolean flag to indicate whether or not the drawing variables should be initialized. Initialization is not required if this is part of a ZedGraph internal draw operation (i.e., its in the middle of a call to Draw(Graphics) ). Otherwise, you should initialize to make sure the drawing variables are configured. true to do an initialization, false otherwise. Methods | Improve this Doc View Source BarCenterValue(CurveItem, Single, Int32, Double, Int32) Calculate the user scale position of the center of the specified bar, using the Axis as specified by Base . This method is used primarily by the FindNearestPoint(PointF, out CurveItem, out Int32) method in order to determine the bar \"location,\" which is defined as the center of the top of the individual bar. Declaration public double BarCenterValue(CurveItem curve, float barWidth, int iCluster, double val, int iOrdinal) Parameters Type Name Description CurveItem curve The CurveItem representing the bar of interest. Single barWidth The width of each individual bar. This can be calculated using the GetBarWidth(GraphPane) method. Int32 iCluster The cluster number for the bar of interest. This is the ordinal position of the current point. That is, if a particular CurveItem has 10 points, then a value of 3 would indicate the 4th point in the data array. Double val The actual independent axis value for the bar of interest. Int32 iOrdinal The ordinal position of the CurveItem of interest. That is, the first bar series is 0, the second is 1, etc. Note that this applies only to the bars. If a graph includes both bars and lines, then count only the bars. Returns Type Description Double A user scale value position of the center of the bar of interest. | Improve this Doc View Source GetValues(CurveItem, Int32, out Double, out Double, out Double) Get the user scale values associate with a particular point of a particular curve. Declaration public bool GetValues(CurveItem curve, int iPt, out double baseVal, out double lowVal, out double hiVal) Parameters Type Name Description CurveItem curve A CurveItem object of interest. Int32 iPt The zero-based point index for the point of interest. Double baseVal A Double value representing the value for the independent axis. Double lowVal A Double value representing the lower value for the dependent axis. Double hiVal A Double value representing the upper value for the dependent axis. Returns Type Description Boolean true if the data point is value, false for Missing , invalid, etc. data. Remarks The main purpose of this method is to handle stacked bars, in which case the stacked values are returned rather than the individual data values. | Improve this Doc View Source GetValues(GraphPane, CurveItem, Int32, out Double, out Double, out Double) Get the user scale values associate with a particular point of a particular curve. Declaration public static bool GetValues(GraphPane pane, CurveItem curve, int iPt, out double baseVal, out double lowVal, out double hiVal) Parameters Type Name Description GraphPane pane The parent GraphPane object. CurveItem curve A CurveItem object of interest. Int32 iPt The zero-based point index for the point of interest. Double baseVal A Double value representing the value for the independent axis. Double lowVal A Double value representing the lower value for the dependent axis. Double hiVal A Double value representing the upper value for the dependent axis. Returns Type Description Boolean true if the data point is value, false for Missing , invalid, etc. data. Remarks The main purpose of this method is to handle stacked bars and lines, in which case the stacked values are returned rather than the individual data values. However, this method works generically for any curve type."
  },
  "api/ZedGraph.ValuesToolTip.html": {
    "href": "api/ZedGraph.ValuesToolTip.html",
    "title": "Class ValuesToolTip",
    "keywords": "Class ValuesToolTip Inheritance Object ValuesToolTip Implements IValuesToolTip Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.WinForms.dll Syntax public class ValuesToolTip : IValuesToolTip Constructors | Improve this Doc View Source ValuesToolTip(Control, Action<Boolean>, Action<Control, String>) Initializes a new instance of the ValuesToolTip class. Declaration public ValuesToolTip(Control control, Action<bool> activeCallback, Action<Control, string> setToolTipCallback) Parameters Type Name Description Control control The control. Action < Boolean > activeCallback The active callback. Action < Control , String > setToolTipCallback The set tool tip callback. Exceptions Type Condition ArgumentNullException control or activeCallback or setToolTipCallback Properties | Improve this Doc View Source ActiveCallback Gets the delegate that is called when the active state of the tool tip is changed. Declaration public Action<bool> ActiveCallback { get; } Property Value Type Description Action < Boolean > The active state delegate callback. | Improve this Doc View Source Control Gets the control that this tool tip instance handles. Declaration public Control Control { get; } Property Value Type Description Control The control that this tool tip instance handles. | Improve this Doc View Source SetCallback Gets the callback delegate to call when the caption is set. Declaration public Action<Control, string> SetCallback { get; } Property Value Type Description Action < Control , String > The callback delegate to call when the caption is set. Methods | Improve this Doc View Source Create(Control, ToolTip) Creates a ValuesToolTip for the specified control, using the supplied tooltip to display values. Declaration public static ValuesToolTip Create(Control control, ToolTip toolTip) Parameters Type Name Description Control control The control. ToolTip toolTip The tool tip. Returns Type Description ValuesToolTip Exceptions Type Condition ArgumentNullException toolTip | Improve this Doc View Source Disable() Disables the tool tip. Declaration public void Disable() | Improve this Doc View Source Enable() Enables the tool tip. Declaration public void Enable() | Improve this Doc View Source Set(String) Sets the specified caption. Declaration public void Set(string caption) Parameters Type Name Description String caption The caption. | Improve this Doc View Source Set(String, Point) Sets the caption for the tool tip at the specified point. Declaration public void Set(string caption, Point point) Parameters Type Name Description String caption The caption. Point point The point. Implements IValuesToolTip"
  },
  "api/ZedGraph.X2Axis.Default.html": {
    "href": "api/ZedGraph.X2Axis.Default.html",
    "title": "Struct X2Axis.Default",
    "keywords": "Struct X2Axis.Default A simple struct that defines the default property values for the X2Axis class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source IsVisible The default display mode for the X2Axis ( IsVisible property). true to display the scale values, title, tic marks, false to hide the axis entirely. Declaration public static bool IsVisible Field Value Type Description Boolean | Improve this Doc View Source IsZeroLine Determines if a line will be drawn at the zero value for the X2Axis , that is, a line that divides the negative values from positive values. IsZeroLine . Declaration public static bool IsZeroLine Field Value Type Description Boolean"
  },
  "api/ZedGraph.X2Axis.html": {
    "href": "api/ZedGraph.X2Axis.html",
    "title": "Class X2Axis",
    "keywords": "Class X2Axis X2Axis inherits from Axis , and defines the special characteristics of a horizontal axis, specifically located at the top of the Rect of the GraphPane object Inheritance Object Axis X2Axis Implements ICloneable ISerializable Inherited Members Axis._isVisible Axis._isAxisSegmentVisible Axis._title Axis.Tag Axis.ScaleFormatEvent Axis.ScaleTitleEvent Axis.schema Axis.Scale Axis.Cross Axis.CrossAuto Axis.MinSpace Axis.Color Axis.MajorTic Axis.MinorTic Axis.MajorGrid Axis.MinorGrid Axis.IsVisible Axis.IsAxisSegmentVisible Axis.Type Axis.Title Axis.AxisGap Axis.ResetAutoScale(GraphPane, Graphics) Axis.Draw(Graphics, GraphPane, Single, Single) Axis.SetMinSpaceBuffer(Graphics, GraphPane, Single, Boolean) Axis.CalcSpace(Graphics, GraphPane, Single, Single) Axis.DrawMinorTics(Graphics, GraphPane, Double, Single, Single, Single) Axis.DrawTitle(Graphics, GraphPane, Single, Single) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class X2Axis : Axis, ICloneable, ISerializable Constructors | Improve this Doc View Source X2Axis() Default constructor that sets all X2Axis properties to default values as defined in the X2Axis.Default class Declaration public X2Axis() | Improve this Doc View Source X2Axis(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected X2Axis(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source X2Axis(String) Default constructor that sets all X2Axis properties to default values as defined in the X2Axis.Default class, except for the axis title Declaration public X2Axis(string title) Parameters Type Name Description String title The Title for this axis | Improve this Doc View Source X2Axis(X2Axis) The Copy Constructor Declaration public X2Axis(X2Axis rhs) Parameters Type Name Description X2Axis rhs The X2Axis object from which to copy Fields | Improve this Doc View Source schema2 Current schema value that defines the version of the serialized file Declaration public const int schema2 = 11 Field Value Type Description Int32 Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public X2Axis Clone() Returns Type Description X2Axis A new, independent copy of this class | Improve this Doc View Source GetCrossAxis(GraphPane) Gets the \"Cross\" axis that corresponds to this axis. Declaration public override Axis GetCrossAxis(GraphPane pane) Parameters Type Name Description GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Returns Type Description Axis Overrides Axis.GetCrossAxis(GraphPane) Remarks The cross axis is the axis which determines the of this Axis when the Cross property is used. The cross axis for any XAxis or X2Axis is always the primary YAxis , and the cross axis for any YAxis or Y2Axis is always the primary XAxis . | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides Axis.GetObjectData(SerializationInfo, StreamingContext) | Improve this Doc View Source SetTransformMatrix(Graphics, GraphPane, Single) Setup the Transform Matrix to handle drawing of this X2Axis Declaration public override void SetTransformMatrix(Graphics g, GraphPane pane, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Overrides Axis.SetTransformMatrix(Graphics, GraphPane, Single) Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.XAxis.Default.html": {
    "href": "api/ZedGraph.XAxis.Default.html",
    "title": "Struct XAxis.Default",
    "keywords": "Struct XAxis.Default A simple struct that defines the default property values for the XAxis class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source IsVisible The default display mode for the XAxis ( IsVisible property). true to display the scale values, title, tic marks, false to hide the axis entirely. Declaration public static bool IsVisible Field Value Type Description Boolean | Improve this Doc View Source IsZeroLine Determines if a line will be drawn at the zero value for the XAxis , that is, a line that divides the negative values from positive values. IsZeroLine . Declaration public static bool IsZeroLine Field Value Type Description Boolean"
  },
  "api/ZedGraph.XAxis.html": {
    "href": "api/ZedGraph.XAxis.html",
    "title": "Class XAxis",
    "keywords": "Class XAxis XAxis inherits from Axis , and defines the special characteristics of a horizontal axis, specifically located at the bottom of the Rect of the GraphPane object Inheritance Object Axis XAxis Implements ICloneable ISerializable Inherited Members Axis._isVisible Axis._isAxisSegmentVisible Axis._title Axis.Tag Axis.ScaleFormatEvent Axis.ScaleTitleEvent Axis.schema Axis.Scale Axis.Cross Axis.CrossAuto Axis.MinSpace Axis.Color Axis.MajorTic Axis.MinorTic Axis.MajorGrid Axis.MinorGrid Axis.IsVisible Axis.IsAxisSegmentVisible Axis.Type Axis.Title Axis.AxisGap Axis.ResetAutoScale(GraphPane, Graphics) Axis.Draw(Graphics, GraphPane, Single, Single) Axis.SetMinSpaceBuffer(Graphics, GraphPane, Single, Boolean) Axis.CalcSpace(Graphics, GraphPane, Single, Single) Axis.DrawMinorTics(Graphics, GraphPane, Double, Single, Single, Single) Axis.DrawTitle(Graphics, GraphPane, Single, Single) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class XAxis : Axis, ICloneable, ISerializable Constructors | Improve this Doc View Source XAxis() Default constructor that sets all XAxis properties to default values as defined in the XAxis.Default class Declaration public XAxis() | Improve this Doc View Source XAxis(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected XAxis(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source XAxis(String) Default constructor that sets all XAxis properties to default values as defined in the XAxis.Default class, except for the axis title Declaration public XAxis(string title) Parameters Type Name Description String title The Title for this axis | Improve this Doc View Source XAxis(XAxis) The Copy Constructor Declaration public XAxis(XAxis rhs) Parameters Type Name Description XAxis rhs The XAxis object from which to copy Fields | Improve this Doc View Source schema2 Current schema value that defines the version of the serialized file Declaration public const int schema2 = 10 Field Value Type Description Int32 Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public XAxis Clone() Returns Type Description XAxis A new, independent copy of this class | Improve this Doc View Source GetCrossAxis(GraphPane) Gets the \"Cross\" axis that corresponds to this axis. Declaration public override Axis GetCrossAxis(GraphPane pane) Parameters Type Name Description GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Returns Type Description Axis Overrides Axis.GetCrossAxis(GraphPane) Remarks The cross axis is the axis which determines the of this Axis when the Cross property is used. The cross axis for any XAxis or X2Axis is always the primary YAxis , and the cross axis for any YAxis or Y2Axis is always the primary XAxis . | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides Axis.GetObjectData(SerializationInfo, StreamingContext) | Improve this Doc View Source SetTransformMatrix(Graphics, GraphPane, Single) Setup the Transform Matrix to handle drawing of this XAxis Declaration public override void SetTransformMatrix(Graphics g, GraphPane pane, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Overrides Axis.SetTransformMatrix(Graphics, GraphPane, Single) Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.XDate.html": {
    "href": "api/ZedGraph.XDate.html",
    "title": "Struct XDate",
    "keywords": "Struct XDate This struct encapsulates a date and time value, and handles associated calculations and conversions between various formats. Implements IComparable Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct XDate : IComparable Remarks This format stored as a double value representing days since a reference date (XL date 0.0 is December 30, 1899 at 00:00 hrs). Negative values are permissible, and the range of valid dates is from noon on January 1st, 4713 B.C. forward. Internally, the date calculations are done using Astronomical Julian Day numbers. The Astronomical Julian Day number is defined as the number of days since noon on January 1st, 4713 B.C. (also referred to as 12:00 on January 1, -4712). NOTE: MS Excel actually has an error in the Serial Date calculations because it errantly assumes 1900 is a leap year. The XDate calculations do not have this same error. Therefore, XDate and Excel Date Serial values are 1 day different up until the date value of 60 (in Excel, this is February 29th, 1900, and in XDate, this is February 28th, 1900). At a value of 61 (March 1st, 1900) or greater, they agree with eachother. Constructors | Improve this Doc View Source XDate(DateTime) Construct a date class from a DateTime struct. Declaration public XDate(DateTime dateTime) Parameters Type Name Description DateTime dateTime A DateTime struct containing the initial date information. | Improve this Doc View Source XDate(Double) Construct a date class from an XL date value. Declaration public XDate(double xlDate) Parameters Type Name Description Double xlDate An XL Date value in floating point double format | Improve this Doc View Source XDate(Int32, Int32, Int32) Construct a date class from a calendar date (year, month, day). Assumes the time of day is 00:00 hrs Declaration public XDate(int year, int month, int day) Parameters Type Name Description Int32 year An integer value for the year, e.g., 1995. Int32 month An integer value for the month of the year, e.g., 8 for August. It is permissible to have months outside of the 1-12 range, which will rollover to the previous or next year. Int32 day An integer value for the day of the month, e.g., 23. It is permissible to have day numbers outside of the 1-31 range, which will rollover to the previous or next month and year. | Improve this Doc View Source XDate(Int32, Int32, Int32, Int32, Int32, Double) Construct a date class from a calendar date and time (year, month, day, hour, minute, second), where seconds is a Double value (allowing fractional seconds). Declaration public XDate(int year, int month, int day, int hour, int minute, double second) Parameters Type Name Description Int32 year An integer value for the year, e.g., 1995. Int32 month An integer value for the month of the year, e.g., 8 for August. It is permissible to have months outside of the 1-12 range, which will rollover to the previous or next year. Int32 day An integer value for the day of the month, e.g., 23. It is permissible to have day numbers outside of the 1-31 range, which will rollover to the previous or next month and year. Int32 hour An integer value for the hour of the day, e.g. 15. It is permissible to have hour values outside the 0-23 range, which will rollover to the previous or next day. Int32 minute An integer value for the minute, e.g. 45. It is permissible to have hour values outside the 0-59 range, which will rollover to the previous or next hour. Double second A double value for the second, e.g. 35.75. It is permissible to have second values outside the 0-59 range, which will rollover to the previous or next minute. | Improve this Doc View Source XDate(Int32, Int32, Int32, Int32, Int32, Int32) Construct a date class from a calendar date and time (year, month, day, hour, minute, second). Declaration public XDate(int year, int month, int day, int hour, int minute, int second) Parameters Type Name Description Int32 year An integer value for the year, e.g., 1995. Int32 month An integer value for the month of the year, e.g., 8 for August. It is permissible to have months outside of the 1-12 range, which will rollover to the previous or next year. Int32 day An integer value for the day of the month, e.g., 23. It is permissible to have day numbers outside of the 1-31 range, which will rollover to the previous or next month and year. Int32 hour An integer value for the hour of the day, e.g. 15. It is permissible to have hour values outside the 0-23 range, which will rollover to the previous or next day. Int32 minute An integer value for the minute, e.g. 45. It is permissible to have hour values outside the 0-59 range, which will rollover to the previous or next hour. Int32 second An integer value for the second, e.g. 35. It is permissible to have second values outside the 0-59 range, which will rollover to the previous or next minute. | Improve this Doc View Source XDate(Int32, Int32, Int32, Int32, Int32, Int32, Int32) Construct a date class from a calendar date and time (year, month, day, hour, minute, second, millisecond). Declaration public XDate(int year, int month, int day, int hour, int minute, int second, int millisecond) Parameters Type Name Description Int32 year An integer value for the year, e.g., 1995. Int32 month An integer value for the month of the year, e.g., 8 for August. It is permissible to have months outside of the 1-12 range, which will rollover to the previous or next year. Int32 day An integer value for the day of the month, e.g., 23. It is permissible to have day numbers outside of the 1-31 range, which will rollover to the previous or next month and year. Int32 hour An integer value for the hour of the day, e.g. 15. It is permissible to have hour values outside the 0-23 range, which will rollover to the previous or next day. Int32 minute An integer value for the minute, e.g. 45. It is permissible to have hour values outside the 0-59 range, which will rollover to the previous or next hour. Int32 second An integer value for the second, e.g. 35. It is permissible to have second values outside the 0-59 range, which will rollover to the previous or next minute. Int32 millisecond An integer value for the millisecond, e.g. 632. It is permissible to have millisecond values outside the 0-999 range, which will rollover to the previous or next second. | Improve this Doc View Source XDate(XDate) The Copy Constructor Declaration public XDate(XDate rhs) Parameters Type Name Description XDate rhs The GraphPane object from which to copy Fields | Improve this Doc View Source DefaultFormatStr The default format string to be used in ToString() when no format is provided Declaration public const string DefaultFormatStr = \"g\" Field Value Type Description String | Improve this Doc View Source HoursPerDay The number of hours in a day Declaration public const double HoursPerDay = 24 Field Value Type Description Double | Improve this Doc View Source JulDayMax The maximum valid Julian Day, which corresponds to December 31st, 9999 A.D. Declaration public const double JulDayMax = 5373483.5 Field Value Type Description Double | Improve this Doc View Source JulDayMin The minimum valid Julian Day, which corresponds to January 1st, 4713 B.C. Declaration public const double JulDayMin = 0 Field Value Type Description Double | Improve this Doc View Source MillisecondsPerDay The number of milliseconds in a day Declaration public const double MillisecondsPerDay = 86400000 Field Value Type Description Double | Improve this Doc View Source MillisecondsPerSecond The number of milliseconds in a second Declaration public const double MillisecondsPerSecond = 1000 Field Value Type Description Double | Improve this Doc View Source MinutesPerDay The number of minutes in a day Declaration public const double MinutesPerDay = 1440 Field Value Type Description Double | Improve this Doc View Source MinutesPerHour The number of minutes in an hour Declaration public const double MinutesPerHour = 60 Field Value Type Description Double | Improve this Doc View Source MonthsPerYear The number of months in a year Declaration public const double MonthsPerYear = 12 Field Value Type Description Double | Improve this Doc View Source SecondsPerDay The number of seconds in a day Declaration public const double SecondsPerDay = 86400 Field Value Type Description Double | Improve this Doc View Source SecondsPerMinute The number of seconds in a minute Declaration public const double SecondsPerMinute = 60 Field Value Type Description Double | Improve this Doc View Source XLDay1 The Astronomical Julian Day number that corresponds to XL Date 0.0 Declaration public const double XLDay1 = 2415018.5 Field Value Type Description Double | Improve this Doc View Source XLDayMax The maximum valid Excel Day, which corresponds to December 31st, 9999 A.D. Declaration public const double XLDayMax = 2958465 Field Value Type Description Double | Improve this Doc View Source XLDayMin The minimum valid Excel Day, which corresponds to January 1st, 4713 B.C. Declaration public const double XLDayMin = -2415018.5 Field Value Type Description Double Properties | Improve this Doc View Source DateTime Gets or sets the date value for this item in .Net DateTime format. Declaration public DateTime DateTime { get; set; } Property Value Type Description DateTime | Improve this Doc View Source DecimalYear Gets or sets the decimal year number (i.e., 1997.345) corresponding to this item. Declaration public double DecimalYear { get; set; } Property Value Type Description Double | Improve this Doc View Source IsValidDate Returns true if this XDate struct is in the valid date range Declaration public bool IsValidDate { get; } Property Value Type Description Boolean | Improve this Doc View Source JulianDay Gets or sets the date value for this item in Julain day format. This is the Astronomical Julian Day number, so a value of 0.0 corresponds to noon GMT on January 1st, -4712. Thus, Julian Day number 2,400,000.0 corresponds to noon GMT on November 16, 1858. Declaration public double JulianDay { get; set; } Property Value Type Description Double | Improve this Doc View Source XLDate Gets or sets the date value for this item in MS Excel format. Declaration public double XLDate { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source AddDays(Double) Add the specified number of days (can be fractional) to the current XDate instance. Declaration public void AddDays(double dDays) Parameters Type Name Description Double dDays The incremental number of days (negative or positive) in floating point double format. | Improve this Doc View Source AddHours(Double) Add the specified number of hours (can be fractional) to the current XDate instance. Declaration public void AddHours(double dHours) Parameters Type Name Description Double dHours The incremental number of hours (negative or positive) in floating point double format. | Improve this Doc View Source AddMilliseconds(Double) Add the specified number of milliseconds (can be fractional) to the current XDate instance. Declaration public void AddMilliseconds(double dMilliseconds) Parameters Type Name Description Double dMilliseconds The incremental number of milliseconds (negative or positive) in floating point double format. | Improve this Doc View Source AddMinutes(Double) Add the specified number of minutes (can be fractional) to the current XDate instance. Declaration public void AddMinutes(double dMinutes) Parameters Type Name Description Double dMinutes The incremental number of minutes (negative or positive) in floating point double format. | Improve this Doc View Source AddMonths(Double) Add the specified number of Months (can be fractional) to the current XDate instance. Declaration public void AddMonths(double dMonths) Parameters Type Name Description Double dMonths The incremental number of months (negative or positive) in floating point double format. | Improve this Doc View Source AddSeconds(Double) Add the specified number of seconds (can be fractional) to the current XDate instance. Declaration public void AddSeconds(double dSeconds) Parameters Type Name Description Double dSeconds The incremental number of seconds (negative or positive) in floating point double format. | Improve this Doc View Source AddYears(Double) Add the specified number of years (can be fractional) to the current XDate instance. Declaration public void AddYears(double dYears) Parameters Type Name Description Double dYears The incremental number of years (negative or positive) in floating point double format. | Improve this Doc View Source CalendarDateToJulianDay(Int32, Int32, Int32, Int32, Int32, Int32) Calculate an Astronomical Julian Day number from the specified Calendar date (year, month, day, hour, minute, second), first normalizing all input data values Declaration public static double CalendarDateToJulianDay(int year, int month, int day, int hour, int minute, int second) Parameters Type Name Description Int32 year The integer year value (e.g., 1994). Int32 month The integer month value (e.g., 7 for July). Int32 day The integer day value (e.g., 19 for the 19th day of the month). Int32 hour The integer hour value (e.g., 14 for 2:00 pm). Int32 minute The integer minute value (e.g., 35 for 35 minutes past the hour). Int32 second The integer second value (e.g., 42 for 42 seconds past the minute). Returns Type Description Double The corresponding Astronomical Julian Day number, expressed in double floating point format | Improve this Doc View Source CalendarDateToJulianDay(Int32, Int32, Int32, Int32, Int32, Int32, Int32) Calculate an Astronomical Julian Day number from the specified Calendar date (year, month, day, hour, minute, second), first normalizing all input data values Declaration public static double CalendarDateToJulianDay(int year, int month, int day, int hour, int minute, int second, int millisecond) Parameters Type Name Description Int32 year The integer year value (e.g., 1994). Int32 month The integer month value (e.g., 7 for July). Int32 day The integer day value (e.g., 19 for the 19th day of the month). Int32 hour The integer hour value (e.g., 14 for 2:00 pm). Int32 minute The integer minute value (e.g., 35 for 35 minutes past the hour). Int32 second The integer second value (e.g., 42 for 42 seconds past the minute). Int32 millisecond The integer second value (e.g., 325 for 325 milliseconds past the minute). Returns Type Description Double The corresponding Astronomical Julian Day number, expressed in double floating point format | Improve this Doc View Source CalendarDateToXLDate(Int32, Int32, Int32, Int32, Int32, Double) Calculate an XL Date from the specified Calendar date (year, month, day, hour, minute, second), first normalizing all input data values. The seconds value is a double type, allowing fractional seconds. Declaration public static double CalendarDateToXLDate(int year, int month, int day, int hour, int minute, double second) Parameters Type Name Description Int32 year The integer year value (e.g., 1994). Int32 month The integer month value (e.g., 7 for July). Int32 day The integer day value (e.g., 19 for the 19th day of the month). Int32 hour The integer hour value (e.g., 14 for 2:00 pm). Int32 minute The integer minute value (e.g., 35 for 35 minutes past the hour). Double second The double second value (e.g., 42.3 for 42.3 seconds past the minute). Returns Type Description Double The corresponding XL date, expressed in double floating point format Remarks The Calendar date is always based on the Gregorian Calendar. Note that the Gregorian calendar is really only valid from October 15, 1582 forward. The countries that adopted the Gregorian calendar first did so on October 4, 1582, so that the next day was October 15, 1582. Prior to that time the Julian Calendar was used. However, Prior to March 1, 4 AD the treatment of leap years was inconsistent, and prior to 45 BC the Julian Calendar did not exist. The XDate struct projects only Gregorian dates backwards and does not deal with Julian calendar dates at all. The ToString(Double, String) method will just append a \"(BC)\" notation to the end of any dates prior to 1 AD, since the DateTime struct throws an exception when formatting earlier dates. | Improve this Doc View Source CalendarDateToXLDate(Int32, Int32, Int32, Int32, Int32, Int32) Calculate an XL Date from the specified Calendar date (year, month, day, hour, minute, second), first normalizing all input data values. Declaration public static double CalendarDateToXLDate(int year, int month, int day, int hour, int minute, int second) Parameters Type Name Description Int32 year The integer year value (e.g., 1994). Int32 month The integer month value (e.g., 7 for July). Int32 day The integer day value (e.g., 19 for the 19th day of the month). Int32 hour The integer hour value (e.g., 14 for 2:00 pm). Int32 minute The integer minute value (e.g., 35 for 35 minutes past the hour). Int32 second The integer second value (e.g., 42 for 42 seconds past the minute). Returns Type Description Double The corresponding XL date, expressed in double floating point format Remarks The Calendar date is always based on the Gregorian Calendar. Note that the Gregorian calendar is really only valid from October 15, 1582 forward. The countries that adopted the Gregorian calendar first did so on October 4, 1582, so that the next day was October 15, 1582. Prior to that time the Julian Calendar was used. However, Prior to March 1, 4 AD the treatment of leap years was inconsistent, and prior to 45 BC the Julian Calendar did not exist. The XDate struct projects only Gregorian dates backwards and does not deal with Julian calendar dates at all. The ToString(Double, String) method will just append a \"(BC)\" notation to the end of any dates prior to 1 AD, since the DateTime struct throws an exception when formatting earlier dates. | Improve this Doc View Source CalendarDateToXLDate(Int32, Int32, Int32, Int32, Int32, Int32, Int32) Calculate an XL Date from the specified Calendar date (year, month, day, hour, minute, second), first normalizing all input data values. Declaration public static double CalendarDateToXLDate(int year, int month, int day, int hour, int minute, int second, int millisecond) Parameters Type Name Description Int32 year The integer year value (e.g., 1994). Int32 month The integer month value (e.g., 7 for July). Int32 day The integer day value (e.g., 19 for the 19th day of the month). Int32 hour The integer hour value (e.g., 14 for 2:00 pm). Int32 minute The integer minute value (e.g., 35 for 35 minutes past the hour). Int32 second The integer second value (e.g., 42 for 42 seconds past the minute). Int32 millisecond The integer millisecond value (e.g., 374 for 374 milliseconds past the second). Returns Type Description Double The corresponding XL date, expressed in double floating point format Remarks The Calendar date is always based on the Gregorian Calendar. Note that the Gregorian calendar is really only valid from October 15, 1582 forward. The countries that adopted the Gregorian calendar first did so on October 4, 1582, so that the next day was October 15, 1582. Prior to that time the Julian Calendar was used. However, Prior to March 1, 4 AD the treatment of leap years was inconsistent, and prior to 45 BC the Julian Calendar did not exist. The XDate struct projects only Gregorian dates backwards and does not deal with Julian calendar dates at all. The ToString(Double, String) method will just append a \"(BC)\" notation to the end of any dates prior to 1 AD, since the DateTime struct throws an exception when formatting earlier dates. | Improve this Doc View Source CompareTo(Object) Compares one XDate object to another. Declaration public int CompareTo(object target) Parameters Type Name Description Object target The second XDate object to be compared. Returns Type Description Int32 zero if target is equal to the current instance, -1 if target is less than the current instance, and 1 if target is greater than the current instance. Remarks This method will throw an exception if target is not an XDate object. | Improve this Doc View Source DateTimeToXLDate(DateTime) Convert a .Net DateTime struct to an XL Format date Declaration public static double DateTimeToXLDate(DateTime dt) Parameters Type Name Description DateTime dt The date value in the form of a .Net DateTime struct Returns Type Description Double The corresponding XL Date, expressed in double floating point format | Improve this Doc View Source DecimalYearToXLDate(Double) Calculate a decimal year value (e.g., 1994.6523) corresponding to the specified XL date Declaration public static double DecimalYearToXLDate(double yearDec) Parameters Type Name Description Double yearDec The decimal year value in floating point double format. Returns Type Description Double The corresponding XL Date, expressed in double floating point format | Improve this Doc View Source Equals(Object) Tests whether obj is either an XDate structure or a double floating point value that is equal to the same date as this XDate struct instance. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare for equality with this XDate instance. This object should be either a type XDate or type double. Returns Type Description Boolean Returns true if obj is the same date as this instance; otherwise, false Overrides ValueType.Equals(Object) | Improve this Doc View Source GetDate(out Int32, out Int32, out Int32) Get the calendar date (year, month, day) corresponding to this instance. Declaration public void GetDate(out int year, out int month, out int day) Parameters Type Name Description Int32 year An integer value for the year, e.g., 1995. Int32 month An integer value for the month of the year, e.g., 8 for August. Int32 day An integer value for the day of the month, e.g., 23. | Improve this Doc View Source GetDate(out Int32, out Int32, out Int32, out Int32, out Int32, out Int32) Get the calendar date (year, month, day, hour, minute, second) corresponding to this instance. Declaration public void GetDate(out int year, out int month, out int day, out int hour, out int minute, out int second) Parameters Type Name Description Int32 year An integer value for the year, e.g., 1995. Int32 month An integer value for the month of the year, e.g., 8 for August. Int32 day An integer value for the day of the month, e.g., 23. Int32 hour An integer value for the hour of the day, e.g. 15. Int32 minute An integer value for the minute, e.g. 45. Int32 second An integer value for the second, e.g. 35. | Improve this Doc View Source GetDayOfYear() Get the day of year value (241.345 means the 241st day of the year) corresponding to this instance. Declaration public double GetDayOfYear() Returns Type Description Double The day of the year in floating point double format. | Improve this Doc View Source GetHashCode() Returns the hash code for this XDate structure. In this case, the hash code is simply the equivalent hash code for the floating point double date value. Declaration public override int GetHashCode() Returns Type Description Int32 An integer representing the hash code for this XDate value Overrides ValueType.GetHashCode() | Improve this Doc View Source JulianDayToCalendarDate(Double, out Int32, out Int32, out Int32, out Int32, out Int32, out Double) Calculate a Calendar date (year, month, day, hour, minute, second) corresponding to the Astronomical Julian Day number Declaration public static void JulianDayToCalendarDate(double jDay, out int year, out int month, out int day, out int hour, out int minute, out double second) Parameters Type Name Description Double jDay The Astronomical Julian Day number to be converted Int32 year The integer year value (e.g., 1994). Int32 month The integer month value (e.g., 7 for July). Int32 day The integer day value (e.g., 19 for the 19th day of the month). Int32 hour The integer hour value (e.g., 14 for 2:00 pm). Int32 minute The integer minute value (e.g., 35 for 35 minutes past the hour). Double second The double second value (e.g., 42.3 for 42.3 seconds past the minute). | Improve this Doc View Source JulianDayToCalendarDate(Double, out Int32, out Int32, out Int32, out Int32, out Int32, out Int32) Calculate a Calendar date (year, month, day, hour, minute, second) corresponding to the Astronomical Julian Day number Declaration public static void JulianDayToCalendarDate(double jDay, out int year, out int month, out int day, out int hour, out int minute, out int second) Parameters Type Name Description Double jDay The Astronomical Julian Day number to be converted Int32 year The integer year value (e.g., 1994). Int32 month The integer month value (e.g., 7 for July). Int32 day The integer day value (e.g., 19 for the 19th day of the month). Int32 hour The integer hour value (e.g., 14 for 2:00 pm). Int32 minute The integer minute value (e.g., 35 for 35 minutes past the hour). Int32 second The integer second value (e.g., 42 for 42 seconds past the minute). | Improve this Doc View Source JulianDayToCalendarDate(Double, out Int32, out Int32, out Int32, out Int32, out Int32, out Int32, out Double) Calculate a Calendar date (year, month, day, hour, minute, second) corresponding to the Astronomical Julian Day number Declaration public static void JulianDayToCalendarDate(double jDay, out int year, out int month, out int day, out int hour, out int minute, out int second, out double millisecond) Parameters Type Name Description Double jDay The Astronomical Julian Day number to be converted Int32 year The integer year value (e.g., 1994). Int32 month The integer month value (e.g., 7 for July). Int32 day The integer day value (e.g., 19 for the 19th day of the month). Int32 hour The integer hour value (e.g., 14 for 2:00 pm). Int32 minute The integer minute value (e.g., 35 for 35 minutes past the hour). Int32 second The integer second value (e.g., 42 for 42 seconds past the minute). Double millisecond The Double millisecond value (e.g., 342.5 for 342.5 milliseconds past the second). | Improve this Doc View Source JulianDayToXLDate(Double) Calculate an XL Date corresponding to the specified Astronomical Julian Day number Declaration public static double JulianDayToXLDate(double jDay) Parameters Type Name Description Double jDay The Astronomical Julian Day number in floating point double format. Returns Type Description Double The corresponding XL Date, expressed in double floating point format | Improve this Doc View Source MakeValidDate(Double) Take the specified date, and bound it to the valid date range for the XDate struct. Declaration public static double MakeValidDate(double xlDate) Parameters Type Name Description Double xlDate The date to be bounded Returns Type Description Double An XLDate value that lies between the minimum and maximum valid date ranges (see XLDayMin and XLDayMax ) | Improve this Doc View Source SetDate(Int32, Int32, Int32) Set the calendar date (year, month, day) of this instance. Declaration public void SetDate(int year, int month, int day) Parameters Type Name Description Int32 year An integer value for the year, e.g., 1995. Int32 month An integer value for the month of the year, e.g., 8 for August. Int32 day An integer value for the day of the month, e.g., 23. | Improve this Doc View Source SetDate(Int32, Int32, Int32, Int32, Int32, Int32) Set the calendar date (year, month, day, hour, minute, second) of this instance. Declaration public void SetDate(int year, int month, int day, int hour, int minute, int second) Parameters Type Name Description Int32 year An integer value for the year, e.g., 1995. Int32 month An integer value for the month of the year, e.g., 8 for August. Int32 day An integer value for the day of the month, e.g., 23. Int32 hour An integer value for the hour of the day, e.g. 15. Int32 minute An integer value for the minute, e.g. 45. Int32 second An integer value for the second, e.g. 35. | Improve this Doc View Source ToString() Format this XDate value using the default format string (see cref=\"DefaultFormatStr\"/>). Declaration public override string ToString() Returns Type Description String A string representation of the date Overrides ValueType.ToString() Remarks The formatting is done using the DateTime ToString(String) method in order to provide full localization capability. The DateTime struct is limited to dates from 1 AD onward. However, all calendar dates in XDate and DateTime are projected Gregorian calendar dates. Since the Gregorian calendar was not implemented until October 4, 1582 (or later in some countries), Gregorian dates prior to that time are really dates that would have been, had the Gregorian calendar existed. In order to avoid throwing an exception, for dates prior to 1 AD, the year will be converted to a positive year and the text \"(BC)\" is appended to the end of the formatted string. Under this mode, the year sequence is 2BC, 1BC, 1AD, 2AD, etc. There is no year zero. | Improve this Doc View Source ToString(Double) Format this XDate value using the default format string ( DefaultFormatStr ). Declaration public string ToString(double xlDate) Parameters Type Name Description Double xlDate The XL date value to be formatted in floating point double format. Returns Type Description String A string representation of the date Remarks The formatting is done using the DateTime ToString(String) method in order to provide full localization capability. The DateTime struct is limited to dates from 1 AD onward. However, all calendar dates in XDate and DateTime are projected Gregorian calendar dates. Since the Gregorian calendar was not implemented until October 4, 1582 (or later in some countries), Gregorian dates prior to that time are really dates that would have been, had the Gregorian calendar existed. In order to avoid throwing an exception, for dates prior to 1 AD, the year will be converted to a positive year and the text \"(BC)\" is appended to the end of the formatted string. Under this mode, the year sequence is 2BC, 1BC, 1AD, 2AD, etc. There is no year zero. | Improve this Doc View Source ToString(Double, String) Format the specified XL Date value using the specified format string. The format string is specified according to the DateTime class. Declaration public static string ToString(double xlDate, string fmtStr) Parameters Type Name Description Double xlDate The XL date value to be formatted in floating point double format. String fmtStr The formatting string to be used for the date. See DateTimeFormatInfo for a list of the format types available. Returns Type Description String A string representation of the date Remarks The formatting is done using the DateTime ToString(String) method in order to provide full localization capability. The DateTime struct is limited to dates from 1 AD onward. However, all calendar dates in XDate and DateTime are projected Gregorian calendar dates. Since the Gregorian calendar was not implemented until October 4, 1582 (or later in some countries), Gregorian dates prior to that time are really dates that would have been, had the Gregorian calendar existed. In order to avoid throwing an exception, for dates prior to 1 AD, the year will be converted to a positive year and the text \"(BC)\" is appended to the end of the formatted string. Under this mode, the year sequence is 2BC, 1BC, 1AD, 2AD, etc. There is no year zero. | Improve this Doc View Source ToString(String) Format this XL Date value using the specified format string. The format string is specified according to the DateTime class. Declaration public string ToString(string fmtStr) Parameters Type Name Description String fmtStr The formatting string to be used for the date. See DateTimeFormatInfo class for a list of the format types available. Returns Type Description String A string representation of the date Remarks The formatting is done using the DateTime ToString(String) method in order to provide full localization capability. The DateTime struct is limited to dates from 1 AD onward. However, all calendar dates in XDate and DateTime are projected Gregorian calendar dates. Since the Gregorian calendar was not implemented until October 4, 1582 (or later in some countries), Gregorian dates prior to that time are really dates that would have been, had the Gregorian calendar existed. In order to avoid throwing an exception, for dates prior to 1 AD, the year will be converted to a positive year and the text \"(BC)\" is appended to the end of the formatted string. Under this mode, the year sequence is 2BC, 1BC, 1AD, 2AD, etc. There is no year zero. | Improve this Doc View Source XLDateToCalendarDate(Double, out Int32, out Int32, out Int32, out Int32, out Int32, out Double) Calculate a Calendar date (year, month, day, hour, minute, second) corresponding to the specified XL date Declaration public static void XLDateToCalendarDate(double xlDate, out int year, out int month, out int day, out int hour, out int minute, out double second) Parameters Type Name Description Double xlDate The XL date value in floating point double format. Int32 year The integer year value (e.g., 1994). Int32 month The integer month value (e.g., 7 for July). Int32 day The integer day value (e.g., 19 for the 19th day of the month). Int32 hour The integer hour value (e.g., 14 for 2:00 pm). Int32 minute The integer minute value (e.g., 35 for 35 minutes past the hour). Double second The double second value (e.g., 42.3 for 42.3 seconds past the minute). | Improve this Doc View Source XLDateToCalendarDate(Double, out Int32, out Int32, out Int32, out Int32, out Int32, out Int32) Calculate a Calendar date (year, month, day, hour, minute, second) corresponding to the specified XL date Declaration public static void XLDateToCalendarDate(double xlDate, out int year, out int month, out int day, out int hour, out int minute, out int second) Parameters Type Name Description Double xlDate The XL date value in floating point double format. Int32 year The integer year value (e.g., 1994). Int32 month The integer month value (e.g., 7 for July). Int32 day The integer day value (e.g., 19 for the 19th day of the month). Int32 hour The integer hour value (e.g., 14 for 2:00 pm). Int32 minute The integer minute value (e.g., 35 for 35 minutes past the hour). Int32 second The integer second value (e.g., 42 for 42 seconds past the minute). | Improve this Doc View Source XLDateToCalendarDate(Double, out Int32, out Int32, out Int32, out Int32, out Int32, out Int32, out Int32) Calculate a Calendar date (year, month, day, hour, minute, second) corresponding to the specified XL date Declaration public static void XLDateToCalendarDate(double xlDate, out int year, out int month, out int day, out int hour, out int minute, out int second, out int millisecond) Parameters Type Name Description Double xlDate The XL date value in floating point double format. Int32 year The integer year value (e.g., 1994). Int32 month The integer month value (e.g., 7 for July). Int32 day The integer day value (e.g., 19 for the 19th day of the month). Int32 hour The integer hour value (e.g., 14 for 2:00 pm). Int32 minute The integer minute value (e.g., 35 for 35 minutes past the hour). Int32 second The integer second value (e.g., 42 for 42 seconds past the minute). Int32 millisecond The integer millisecond value (e.g., 325 for 325 milliseconds past the second). | Improve this Doc View Source XLDateToDateTime(Double) Convert an XL date format to a .Net DateTime struct Declaration public static DateTime XLDateToDateTime(double xlDate) Parameters Type Name Description Double xlDate The XL date value in floating point double format. Returns Type Description DateTime The corresponding XL Date, expressed in double floating point format | Improve this Doc View Source XLDateToDayOfWeek(Double) Calculate a day-of-week value (e.g., Sun=0, Mon=1, Tue=2, etc.) corresponding to the specified XL date Declaration public static int XLDateToDayOfWeek(double xlDate) Parameters Type Name Description Double xlDate The XL date value in floating point double format. Returns Type Description Int32 The corresponding day-of-week (DoW) value, expressed in integer format | Improve this Doc View Source XLDateToDayOfYear(Double) Calculate a day-of-year value (e.g., 241.543 corresponds to the 241st day of the year) corresponding to the specified XL date Declaration public static double XLDateToDayOfYear(double xlDate) Parameters Type Name Description Double xlDate The XL date value in floating point double format. Returns Type Description Double The corresponding day-of-year (DoY) value, expressed in double floating point format | Improve this Doc View Source XLDateToDecimalYear(Double) Calculate a decimal year value (e.g., 1994.6523) corresponding to the specified XL date Declaration public static double XLDateToDecimalYear(double xlDate) Parameters Type Name Description Double xlDate The XL date value in floating point double format. Returns Type Description Double The corresponding decimal year value, expressed in double floating point format | Improve this Doc View Source XLDateToJulianDay(Double) Calculate an Astronomical Julian Day number corresponding to the specified XL date Declaration public static double XLDateToJulianDay(double xlDate) Parameters Type Name Description Double xlDate The XL date value in floating point double format. Returns Type Description Double The corresponding Astronomical Julian Day number, expressed in double floating point format Operators | Improve this Doc View Source Addition(XDate, Double) '+' operator overload. When a double value is added to an XDate, the result is a new XDate with the number of days added. Declaration public static XDate operator +(XDate lhs, double rhs) Parameters Type Name Description XDate lhs The left-hand-side of the '-' operator (an XDate class) Double rhs The right-hand-side of the '+' operator (a double value) Returns Type Description XDate An XDate with the rhs number of days added | Improve this Doc View Source Decrement(XDate) '--' operator overload. Decrement the date by one day. Declaration public static XDate operator --(XDate xDate) Parameters Type Name Description XDate xDate The XDate struct on which to operate Returns Type Description XDate An XDate one day prior to the specified date | Improve this Doc View Source Implicit(DateTime to XDate) Implicit conversion from DateTime to XDate . Declaration public static implicit operator XDate(DateTime dt) Parameters Type Name Description DateTime dt The DateTime struct on which to operate Returns Type Description XDate An XDate struct representing the specified DateTime value. | Improve this Doc View Source Implicit(Double to XDate) Implicit conversion from double (an XL Date) to XDate. Declaration public static implicit operator XDate(double xlDate) Parameters Type Name Description Double xlDate The XDate struct on which to operate Returns Type Description XDate An XDate struct representing the specified xlDate value. | Improve this Doc View Source Implicit(XDate to DateTime) Implicit conversion from XDate to DateTime . Declaration public static implicit operator DateTime(XDate xDate) Parameters Type Name Description XDate xDate The XDate struct on which to operate Returns Type Description DateTime A DateTime struct representing the specified xDate value. | Improve this Doc View Source Implicit(XDate to Double) Implicit conversion from XDate to double (an XL Date). Declaration public static implicit operator double (XDate xDate) Parameters Type Name Description XDate xDate The XDate struct on which to operate Returns Type Description Double A double floating point value representing the XL Date | Improve this Doc View Source Implicit(XDate to Single) Implicit conversion from XDate to float (an XL Date). Declaration public static implicit operator float (XDate xDate) Parameters Type Name Description XDate xDate The XDate struct on which to operate Returns Type Description Single A double floating point value representing the XL Date | Improve this Doc View Source Increment(XDate) '++' operator overload. Increment the date by one day. Declaration public static XDate operator ++(XDate xDate) Parameters Type Name Description XDate xDate The XDate struct on which to operate Returns Type Description XDate An XDate one day later than the specified date | Improve this Doc View Source Subtraction(XDate, Double) '-' operator overload. When a double value is subtracted from an XDate, the result is a new XDate with the number of days subtracted. Declaration public static XDate operator -(XDate lhs, double rhs) Parameters Type Name Description XDate lhs The left-hand-side of the '-' operator (an XDate class) Double rhs The right-hand-side of the '-' operator (a double value) Returns Type Description XDate An XDate with the rhs number of days subtracted | Improve this Doc View Source Subtraction(XDate, XDate) '-' operator overload. When two XDates are subtracted, the number of days between dates is returned. Declaration public static double operator -(XDate lhs, XDate rhs) Parameters Type Name Description XDate lhs The left-hand-side of the '-' operator (an XDate class) XDate rhs The right-hand-side of the '-' operator (an XDate class) Returns Type Description Double The days between dates, expressed as a floating point double Implements System.IComparable"
  },
  "api/ZedGraph.Y2Axis.Default.html": {
    "href": "api/ZedGraph.Y2Axis.Default.html",
    "title": "Struct Y2Axis.Default",
    "keywords": "Struct Y2Axis.Default A simple subclass of the Y2Axis.Default class that defines the default property values for the Y2Axis class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source IsVisible The default display mode for the Y2Axis ( IsVisible property). true to display the scale values, title, tic marks, false to hide the axis entirely. Declaration public static bool IsVisible Field Value Type Description Boolean | Improve this Doc View Source IsZeroLine Determines if a line will be drawn at the zero value for the Y2Axis , that is, a line that divides the negative values from positive values. IsZeroLine . Declaration public static bool IsZeroLine Field Value Type Description Boolean"
  },
  "api/ZedGraph.Y2Axis.html": {
    "href": "api/ZedGraph.Y2Axis.html",
    "title": "Class Y2Axis",
    "keywords": "Class Y2Axis Y2Axis inherits from Axis , and defines the special characteristics of a vertical axis, specifically located on the right side of the Rect of the GraphPane object Inheritance Object Axis Y2Axis Implements ICloneable ISerializable Inherited Members Axis._isVisible Axis._isAxisSegmentVisible Axis._title Axis.Tag Axis.ScaleFormatEvent Axis.ScaleTitleEvent Axis.schema Axis.Scale Axis.Cross Axis.CrossAuto Axis.MinSpace Axis.Color Axis.MajorTic Axis.MinorTic Axis.MajorGrid Axis.MinorGrid Axis.IsVisible Axis.IsAxisSegmentVisible Axis.Type Axis.Title Axis.AxisGap Axis.ResetAutoScale(GraphPane, Graphics) Axis.Draw(Graphics, GraphPane, Single, Single) Axis.SetMinSpaceBuffer(Graphics, GraphPane, Single, Boolean) Axis.CalcSpace(Graphics, GraphPane, Single, Single) Axis.DrawMinorTics(Graphics, GraphPane, Double, Single, Single, Single) Axis.DrawTitle(Graphics, GraphPane, Single, Single) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class Y2Axis : Axis, ICloneable, ISerializable Constructors | Improve this Doc View Source Y2Axis() Default constructor that sets all Y2Axis properties to default values as defined in the Y2Axis.Default class Declaration public Y2Axis() | Improve this Doc View Source Y2Axis(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected Y2Axis(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source Y2Axis(String) Default constructor that sets all Y2Axis properties to default values as defined in the Y2Axis.Default class, except for the axis title Declaration public Y2Axis(string title) Parameters Type Name Description String title The Title for this axis | Improve this Doc View Source Y2Axis(Y2Axis) The Copy Constructor Declaration public Y2Axis(Y2Axis rhs) Parameters Type Name Description Y2Axis rhs The Y2Axis object from which to copy Fields | Improve this Doc View Source schema2 Current schema value that defines the version of the serialized file Declaration public const int schema2 = 10 Field Value Type Description Int32 Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public Y2Axis Clone() Returns Type Description Y2Axis A new, independent copy of this class | Improve this Doc View Source GetCrossAxis(GraphPane) Gets the \"Cross\" axis that corresponds to this axis. Declaration public override Axis GetCrossAxis(GraphPane pane) Parameters Type Name Description GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Returns Type Description Axis Overrides Axis.GetCrossAxis(GraphPane) Remarks The cross axis is the axis which determines the of this Axis when the Cross property is used. The cross axis for any XAxis or X2Axis is always the primary YAxis , and the cross axis for any YAxis or Y2Axis is always the primary XAxis . | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides Axis.GetObjectData(SerializationInfo, StreamingContext) | Improve this Doc View Source SetTransformMatrix(Graphics, GraphPane, Single) Setup the Transform Matrix to handle drawing of this Y2Axis Declaration public override void SetTransformMatrix(Graphics g, GraphPane pane, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Overrides Axis.SetTransformMatrix(Graphics, GraphPane, Single) Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.Y2AxisList.html": {
    "href": "api/ZedGraph.Y2AxisList.html",
    "title": "Class Y2AxisList",
    "keywords": "Class Y2AxisList A collection class containing a list of YAxis objects. Inheritance Object List < Y2Axis > Y2AxisList Implements IList < Y2Axis > ICollection < Y2Axis > IEnumerable < Y2Axis > IList ICollection IEnumerable ICloneable Inherited Members System.Collections.Generic.List<ZedGraph.Y2Axis>.System.Collections.IList.get_Item(System.Int32) System.Collections.Generic.List<ZedGraph.Y2Axis>.System.Collections.IList.set_Item(System.Int32, System.Object) List<Y2Axis>.Add(Y2Axis) List<Y2Axis>.AddRange(IEnumerable<Y2Axis>) List<Y2Axis>.AsReadOnly() List<Y2Axis>.BinarySearch(Int32, Int32, Y2Axis, IComparer<Y2Axis>) List<Y2Axis>.BinarySearch(Y2Axis) List<Y2Axis>.BinarySearch(Y2Axis, IComparer<Y2Axis>) List<Y2Axis>.Clear() List<Y2Axis>.Contains(Y2Axis) List<Y2Axis>.ConvertAll<TOutput>(Converter<Y2Axis, TOutput>) List<Y2Axis>.CopyTo(Int32, Y2Axis[], Int32, Int32) List<Y2Axis>.CopyTo(Y2Axis[]) List<Y2Axis>.CopyTo(Y2Axis[], Int32) List<Y2Axis>.Exists(Predicate<Y2Axis>) List<Y2Axis>.Find(Predicate<Y2Axis>) List<Y2Axis>.FindAll(Predicate<Y2Axis>) List<Y2Axis>.FindIndex(Int32, Int32, Predicate<Y2Axis>) List<Y2Axis>.FindIndex(Int32, Predicate<Y2Axis>) List<Y2Axis>.FindIndex(Predicate<Y2Axis>) List<Y2Axis>.FindLast(Predicate<Y2Axis>) List<Y2Axis>.FindLastIndex(Int32, Int32, Predicate<Y2Axis>) List<Y2Axis>.FindLastIndex(Int32, Predicate<Y2Axis>) List<Y2Axis>.FindLastIndex(Predicate<Y2Axis>) List<Y2Axis>.ForEach(Action<Y2Axis>) List<Y2Axis>.GetEnumerator() List<Y2Axis>.GetRange(Int32, Int32) List<Y2Axis>.IndexOf(Y2Axis) List<Y2Axis>.IndexOf(Y2Axis, Int32) List<Y2Axis>.IndexOf(Y2Axis, Int32, Int32) List<Y2Axis>.Insert(Int32, Y2Axis) List<Y2Axis>.InsertRange(Int32, IEnumerable<Y2Axis>) List<Y2Axis>.LastIndexOf(Y2Axis) List<Y2Axis>.LastIndexOf(Y2Axis, Int32) List<Y2Axis>.LastIndexOf(Y2Axis, Int32, Int32) List<Y2Axis>.Remove(Y2Axis) List<Y2Axis>.RemoveAll(Predicate<Y2Axis>) List<Y2Axis>.RemoveAt(Int32) List<Y2Axis>.RemoveRange(Int32, Int32) List<Y2Axis>.Reverse() List<Y2Axis>.Reverse(Int32, Int32) List<Y2Axis>.Sort() List<Y2Axis>.Sort(IComparer<Y2Axis>) List<Y2Axis>.Sort(Comparison<Y2Axis>) List<Y2Axis>.Sort(Int32, Int32, IComparer<Y2Axis>) List<Y2Axis>.IEnumerable<Y2Axis>.GetEnumerator() List<Y2Axis>.ICollection.CopyTo(Array, Int32) List<Y2Axis>.IEnumerable.GetEnumerator() List<Y2Axis>.IList.Add(Object) List<Y2Axis>.IList.Contains(Object) List<Y2Axis>.IList.IndexOf(Object) List<Y2Axis>.IList.Insert(Int32, Object) List<Y2Axis>.IList.Remove(Object) List<Y2Axis>.ToArray() List<Y2Axis>.TrimExcess() List<Y2Axis>.TrueForAll(Predicate<Y2Axis>) List<Y2Axis>.Capacity List<Y2Axis>.Count List<Y2Axis>.ICollection<Y2Axis>.IsReadOnly List<Y2Axis>.ICollection.IsSynchronized List<Y2Axis>.ICollection.SyncRoot List<Y2Axis>.IList.IsFixedSize List<Y2Axis>.IList.IsReadOnly List<Y2Axis>.IList.Item[Int32] Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class Y2AxisList : List<Y2Axis>, IList<Y2Axis>, ICollection<Y2Axis>, IEnumerable<Y2Axis>, IList, ICollection, IEnumerable, ICloneable Constructors | Improve this Doc View Source Y2AxisList() Default constructor for the collection class. Declaration public Y2AxisList() | Improve this Doc View Source Y2AxisList(Y2AxisList) The Copy Constructor Declaration public Y2AxisList(Y2AxisList rhs) Parameters Type Name Description Y2AxisList rhs The Y2AxisList object from which to copy Properties | Improve this Doc View Source Item[Int32] Indexer to access the specified Axis object by its ordinal position in the list. Declaration public Y2Axis this[int index] { get; } Parameters Type Name Description Int32 index The ordinal position (zero-based) of the YAxis object to be accessed. Property Value Type Description Y2Axis An Axis object reference. | Improve this Doc View Source Item[String] Indexer to access the specified Axis object by its Title string. Declaration public Y2Axis this[string title] { get; } Parameters Type Name Description String title The string title of the YAxis object to be accessed. Property Value Type Description Y2Axis A Axis object reference. Methods | Improve this Doc View Source Add(String) Create a new Y2Axis and add it to this list. Declaration public int Add(string title) Parameters Type Name Description String title The title string for the new axis Returns Type Description Int32 An integer representing the ordinal position of the new Y2Axis in this Y2AxisList . This is the value that you would set the YAxisIndex property of a given CurveItem to assign it to this new Y2Axis . Note that, for a Y2Axis , you would also need to set the IsY2Axis property to true. | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public Y2AxisList Clone() Returns Type Description Y2AxisList A new, independent copy of this class | Improve this Doc View Source IndexOf(String) Return the zero-based position index of the Axis with the specified Title . Declaration public int IndexOf(string title) Parameters Type Name Description String title The String label that is in the Title attribute of the item to be found. Returns Type Description Int32 The zero-based index of the specified Axis , or -1 if the Title was not found in the list Remarks The comparison of titles is not case sensitive, but it must include all characters including punctuation, spaces, etc. See Also IndexOfTag(String) | Improve this Doc View Source IndexOfTag(String) Return the zero-based position index of the Axis with the specified Tag . Declaration public int IndexOfTag(string tagStr) Parameters Type Name Description String tagStr The String tag that is in the Tag attribute of the item to be found. Returns Type Description Int32 The zero-based index of the specified Axis , or -1 if the Tag string is not in the list Remarks In order for this method to work, the Tag property must be of type String . See Also IndexOf(String) Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable System.ICloneable"
  },
  "api/ZedGraph.YAxis.Default.html": {
    "href": "api/ZedGraph.YAxis.Default.html",
    "title": "Struct YAxis.Default",
    "keywords": "Struct YAxis.Default A simple struct that defines the default property values for the YAxis class. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public struct Default Fields | Improve this Doc View Source IsVisible The default display mode for the YAxis ( IsVisible property). true to display the scale values, title, tic marks, false to hide the axis entirely. Declaration public static bool IsVisible Field Value Type Description Boolean | Improve this Doc View Source IsZeroLine Determines if a line will be drawn at the zero value for the YAxis , that is, a line that divides the negative values from positive values. IsZeroLine . Declaration public static bool IsZeroLine Field Value Type Description Boolean"
  },
  "api/ZedGraph.YAxis.html": {
    "href": "api/ZedGraph.YAxis.html",
    "title": "Class YAxis",
    "keywords": "Class YAxis YAxis inherits from Axis , and defines the special characteristics of a vertical axis, specifically located on the right side of the Rect of the GraphPane object Inheritance Object Axis YAxis Implements ICloneable ISerializable Inherited Members Axis._isVisible Axis._isAxisSegmentVisible Axis._title Axis.Tag Axis.ScaleFormatEvent Axis.ScaleTitleEvent Axis.schema Axis.Scale Axis.Cross Axis.CrossAuto Axis.MinSpace Axis.Color Axis.MajorTic Axis.MinorTic Axis.MajorGrid Axis.MinorGrid Axis.IsVisible Axis.IsAxisSegmentVisible Axis.Type Axis.Title Axis.AxisGap Axis.ResetAutoScale(GraphPane, Graphics) Axis.Draw(Graphics, GraphPane, Single, Single) Axis.SetMinSpaceBuffer(Graphics, GraphPane, Single, Boolean) Axis.CalcSpace(Graphics, GraphPane, Single, Single) Axis.DrawMinorTics(Graphics, GraphPane, Double, Single, Single, Single) Axis.DrawTitle(Graphics, GraphPane, Single, Single) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class YAxis : Axis, ICloneable, ISerializable Constructors | Improve this Doc View Source YAxis() Default constructor that sets all YAxis properties to default values as defined in the YAxis.Default class Declaration public YAxis() | Improve this Doc View Source YAxis(SerializationInfo, StreamingContext) Constructor for deserializing objects Declaration protected YAxis(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data | Improve this Doc View Source YAxis(String) Default constructor that sets all YAxis properties to default values as defined in the YAxis.Default class, except for the axis title Declaration public YAxis(string title) Parameters Type Name Description String title The Title for this axis | Improve this Doc View Source YAxis(YAxis) The Copy Constructor Declaration public YAxis(YAxis rhs) Parameters Type Name Description YAxis rhs The YAxis object from which to copy Fields | Improve this Doc View Source schema2 Current schema value that defines the version of the serialized file Declaration public const int schema2 = 10 Field Value Type Description Int32 Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public YAxis Clone() Returns Type Description YAxis A new, independent copy of this class | Improve this Doc View Source GetCrossAxis(GraphPane) Gets the \"Cross\" axis that corresponds to this axis. Declaration public override Axis GetCrossAxis(GraphPane pane) Parameters Type Name Description GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Returns Type Description Axis Overrides Axis.GetCrossAxis(GraphPane) Remarks The cross axis is the axis which determines the of this Axis when the Cross property is used. The cross axis for any XAxis or X2Axis is always the primary YAxis , and the cross axis for any YAxis or Y2Axis is always the primary XAxis . | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo instance with the data needed to serialize the target object Declaration [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)] public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info A SerializationInfo instance that defines the serialized data StreamingContext context A StreamingContext instance that contains the serialized data Overrides Axis.GetObjectData(SerializationInfo, StreamingContext) | Improve this Doc View Source SetTransformMatrix(Graphics, GraphPane, Single) Setup the Transform Matrix to handle drawing of this YAxis Declaration public override void SetTransformMatrix(Graphics g, GraphPane pane, float scaleFactor) Parameters Type Name Description Graphics g A graphic device object to be drawn into. This is normally e.Graphics from the PaintEventArgs argument to the Paint() method. GraphPane pane A reference to the GraphPane object that is the parent or owner of this object. Single scaleFactor The scaling factor to be used for rendering objects. This is calculated and passed down by the parent GraphPane object using the CalcScaleFactor() method, and is used to proportionally adjust font sizes, etc. according to the actual size of the graph. Overrides Axis.SetTransformMatrix(Graphics, GraphPane, Single) Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.YAxisList.html": {
    "href": "api/ZedGraph.YAxisList.html",
    "title": "Class YAxisList",
    "keywords": "Class YAxisList A collection class containing a list of YAxis objects. Inheritance Object List < YAxis > YAxisList Implements IList < YAxis > ICollection < YAxis > IEnumerable < YAxis > IList ICollection IEnumerable ICloneable Inherited Members System.Collections.Generic.List<ZedGraph.YAxis>.System.Collections.IList.get_Item(System.Int32) System.Collections.Generic.List<ZedGraph.YAxis>.System.Collections.IList.set_Item(System.Int32, System.Object) List<YAxis>.Add(YAxis) List<YAxis>.AddRange(IEnumerable<YAxis>) List<YAxis>.AsReadOnly() List<YAxis>.BinarySearch(Int32, Int32, YAxis, IComparer<YAxis>) List<YAxis>.BinarySearch(YAxis) List<YAxis>.BinarySearch(YAxis, IComparer<YAxis>) List<YAxis>.Clear() List<YAxis>.Contains(YAxis) List<YAxis>.ConvertAll<TOutput>(Converter<YAxis, TOutput>) List<YAxis>.CopyTo(Int32, YAxis[], Int32, Int32) List<YAxis>.CopyTo(YAxis[]) List<YAxis>.CopyTo(YAxis[], Int32) List<YAxis>.Exists(Predicate<YAxis>) List<YAxis>.Find(Predicate<YAxis>) List<YAxis>.FindAll(Predicate<YAxis>) List<YAxis>.FindIndex(Int32, Int32, Predicate<YAxis>) List<YAxis>.FindIndex(Int32, Predicate<YAxis>) List<YAxis>.FindIndex(Predicate<YAxis>) List<YAxis>.FindLast(Predicate<YAxis>) List<YAxis>.FindLastIndex(Int32, Int32, Predicate<YAxis>) List<YAxis>.FindLastIndex(Int32, Predicate<YAxis>) List<YAxis>.FindLastIndex(Predicate<YAxis>) List<YAxis>.ForEach(Action<YAxis>) List<YAxis>.GetEnumerator() List<YAxis>.GetRange(Int32, Int32) List<YAxis>.IndexOf(YAxis) List<YAxis>.IndexOf(YAxis, Int32) List<YAxis>.IndexOf(YAxis, Int32, Int32) List<YAxis>.Insert(Int32, YAxis) List<YAxis>.InsertRange(Int32, IEnumerable<YAxis>) List<YAxis>.LastIndexOf(YAxis) List<YAxis>.LastIndexOf(YAxis, Int32) List<YAxis>.LastIndexOf(YAxis, Int32, Int32) List<YAxis>.Remove(YAxis) List<YAxis>.RemoveAll(Predicate<YAxis>) List<YAxis>.RemoveAt(Int32) List<YAxis>.RemoveRange(Int32, Int32) List<YAxis>.Reverse() List<YAxis>.Reverse(Int32, Int32) List<YAxis>.Sort() List<YAxis>.Sort(IComparer<YAxis>) List<YAxis>.Sort(Comparison<YAxis>) List<YAxis>.Sort(Int32, Int32, IComparer<YAxis>) List<YAxis>.IEnumerable<YAxis>.GetEnumerator() List<YAxis>.ICollection.CopyTo(Array, Int32) List<YAxis>.IEnumerable.GetEnumerator() List<YAxis>.IList.Add(Object) List<YAxis>.IList.Contains(Object) List<YAxis>.IList.IndexOf(Object) List<YAxis>.IList.Insert(Int32, Object) List<YAxis>.IList.Remove(Object) List<YAxis>.ToArray() List<YAxis>.TrimExcess() List<YAxis>.TrueForAll(Predicate<YAxis>) List<YAxis>.Capacity List<YAxis>.Count List<YAxis>.ICollection<YAxis>.IsReadOnly List<YAxis>.ICollection.IsSynchronized List<YAxis>.ICollection.SyncRoot List<YAxis>.IList.IsFixedSize List<YAxis>.IList.IsReadOnly List<YAxis>.IList.Item[Int32] Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax [Serializable] public class YAxisList : List<YAxis>, IList<YAxis>, ICollection<YAxis>, IEnumerable<YAxis>, IList, ICollection, IEnumerable, ICloneable Constructors | Improve this Doc View Source YAxisList() Default constructor for the collection class. Declaration public YAxisList() | Improve this Doc View Source YAxisList(YAxisList) The Copy Constructor Declaration public YAxisList(YAxisList rhs) Parameters Type Name Description YAxisList rhs The YAxisList object from which to copy Properties | Improve this Doc View Source Item[Int32] Indexer to access the specified Axis object by its ordinal position in the list. Declaration public YAxis this[int index] { get; } Parameters Type Name Description Int32 index The ordinal position (zero-based) of the YAxis object to be accessed. Property Value Type Description YAxis An Axis object reference. | Improve this Doc View Source Item[String] Indexer to access the specified Axis object by its Title string. Declaration public YAxis this[string title] { get; } Parameters Type Name Description String title The string title of the YAxis object to be accessed. Property Value Type Description YAxis A Axis object reference. Methods | Improve this Doc View Source Add(String) Create a new YAxis and add it to this list. Declaration public int Add(string title) Parameters Type Name Description String title The title string for the new axis Returns Type Description Int32 An integer representing the ordinal position of the new YAxis in this YAxisList . This is the value that you would set the YAxisIndex property of a given CurveItem to assign it to this new YAxis . | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public YAxisList Clone() Returns Type Description YAxisList A new, independent copy of this class | Improve this Doc View Source IndexOf(String) Return the zero-based position index of the Axis with the specified Title . Declaration public int IndexOf(string title) Parameters Type Name Description String title The String label that is in the Title attribute of the item to be found. Returns Type Description Int32 The zero-based index of the specified Axis , or -1 if the Title was not found in the list Remarks The comparison of titles is not case sensitive, but it must include all characters including punctuation, spaces, etc. See Also IndexOfTag(String) | Improve this Doc View Source IndexOfTag(String) Return the zero-based position index of the Axis with the specified Tag . Declaration public int IndexOfTag(string tagStr) Parameters Type Name Description String tagStr The String tag that is in the Tag attribute of the item to be found. Returns Type Description Int32 The zero-based index of the specified Axis , or -1 if the Tag string is not in the list Remarks In order for this method to work, the Tag property must be of type String . Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable System.ICloneable"
  },
  "api/ZedGraph.ZedGraphControl.ContextMenuBuilderEventHandler.html": {
    "href": "api/ZedGraph.ZedGraphControl.ContextMenuBuilderEventHandler.html",
    "title": "Delegate ZedGraphControl.ContextMenuBuilderEventHandler",
    "keywords": "Delegate ZedGraphControl.ContextMenuBuilderEventHandler A delegate that allows subscribing methods to append or modify the context menu. Namespace : ZedGraph Assembly : ZedGraph.WinForms.dll Syntax public delegate void ContextMenuBuilderEventHandler(ZedGraphControl sender, ContextMenuStrip menuStrip, Point mousePt, ZedGraphControl.ContextMenuObjectState objState); Parameters Type Name Description ZedGraphControl sender The source ZedGraphControl object ContextMenuStrip menuStrip A reference to the ContextMenuStrip object that contains the context menu. Point mousePt The point at which the mouse was clicked ZedGraphControl.ContextMenuObjectState objState The current context menu state See Also ContextMenuBuilder"
  },
  "api/ZedGraph.ZedGraphControl.ContextMenuObjectState.html": {
    "href": "api/ZedGraph.ZedGraphControl.ContextMenuObjectState.html",
    "title": "Enum ZedGraphControl.ContextMenuObjectState",
    "keywords": "Enum ZedGraphControl.ContextMenuObjectState Public enumeration that specifies the type of object present at the Context Menu's mouse location Namespace : ZedGraph Assembly : ZedGraph.WinForms.dll Syntax public enum ContextMenuObjectState Fields Name Description ActiveSelection The object is an active Curve Item at the Context Menu's mouse position Background There is no selectable object present at the Context Menu's mouse position InactiveSelection The object is an Inactive Curve Item at the Context Menu's mouse position"
  },
  "api/ZedGraph.ZedGraphControl.CursorValueHandler.html": {
    "href": "api/ZedGraph.ZedGraphControl.CursorValueHandler.html",
    "title": "Delegate ZedGraphControl.CursorValueHandler",
    "keywords": "Delegate ZedGraphControl.CursorValueHandler A delegate that allows custom formatting of the cursor value tooltips Namespace : ZedGraph Assembly : ZedGraph.WinForms.dll Syntax public delegate string CursorValueHandler(ZedGraphControl sender, GraphPane pane, Point mousePt); Parameters Type Name Description ZedGraphControl sender The source ZedGraphControl object GraphPane pane The GraphPane object that contains the cursor of interest Point mousePt The Point object that represents the cursor value location Returns Type Description String See Also CursorValueEvent"
  },
  "api/ZedGraph.ZedGraphControl.html": {
    "href": "api/ZedGraph.ZedGraphControl.html",
    "title": "Class ZedGraphControl",
    "keywords": "Class ZedGraphControl The ZedGraphControl class provides a UserControl interface to the ZedGraph class library. This allows ZedGraph to be installed as a control in the Visual Studio toolbox. You can use the control by simply dragging it onto a form in the Visual Studio form editor. All graph attributes are accessible via the GraphPane property. Inheritance Object MarshalByRefObject Component Control ScrollableControl ContainerControl UserControl ZedGraphControl Implements ISynchronizeInvoke IBindableComponent IComponent IDisposable IDropTarget IWin32Window IContainerControl Inherited Members UserControl.OnCreateControl() UserControl.OnLoad(EventArgs) UserControl.OnMouseDown(MouseEventArgs) UserControl.OnResize(EventArgs) UserControl.ValidateChildren() UserControl.ValidateChildren(ValidationConstraints) UserControl.WndProc(Message) UserControl.AutoSize UserControl.AutoSizeMode UserControl.AutoValidate UserControl.BorderStyle UserControl.CreateParams UserControl.DefaultSize UserControl.AutoSizeChanged UserControl.AutoValidateChanged UserControl.Load ContainerControl.AdjustFormScrollbars(Boolean) ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnFontChanged(EventArgs) ContainerControl.OnLayout(LayoutEventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.ProcessCmdKey(Message, Keys) ContainerControl.ProcessDialogChar(Char) ContainerControl.ProcessDialogKey(Keys) ContainerControl.ProcessMnemonic(Char) ContainerControl.ProcessTabKey(Boolean) ContainerControl.Select(Boolean, Boolean) ContainerControl.IContainerControl.ActivateControl(Control) ContainerControl.UpdateDefaultButton() ContainerControl.Validate() ContainerControl.Validate(Boolean) ContainerControl.ActiveControl ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateFullDrag ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateVScrollVisible ScrollableControl.GetScrollState(Int32) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.OnVisibleChanged(EventArgs) ScrollableControl.ScaleControl(SizeF, BoundsSpecified) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.SetAutoScrollMargin(Int32, Int32) ScrollableControl.SetDisplayRectLocation(Int32, Int32) ScrollableControl.SetScrollState(Int32, Boolean) ScrollableControl.AutoScroll ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollMinSize ScrollableControl.AutoScrollPosition ScrollableControl.DisplayRectangle ScrollableControl.HorizontalScroll ScrollableControl.HScroll ScrollableControl.VerticalScroll ScrollableControl.VScroll ScrollableControl.Scroll Control.AccessibilityNotifyClients(AccessibleEvents, Int32) Control.AccessibilityNotifyClients(AccessibleEvents, Int32, Int32) Control.BeginInvoke(Delegate) Control.BeginInvoke(Delegate, Object[]) Control.BringToFront() Control.Contains(Control) Control.CreateAccessibilityInstance() Control.CreateControl() Control.CreateControlsInstance() Control.CreateGraphics() Control.CreateHandle() Control.DefWndProc(Message) Control.DestroyHandle() Control.DoDragDrop(Object, DragDropEffects) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.Focus() Control.FromChildHandle(IntPtr) Control.FromHandle(IntPtr) Control.GetAccessibilityObjectById(Int32) Control.GetAutoSizeMode() Control.GetChildAtPoint(Point) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetContainerControl() Control.GetNextControl(Control, Boolean) Control.GetPreferredSize(Size) Control.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Control.GetStyle(ControlStyles) Control.GetTopLevel() Control.Hide() Control.InitLayout() Control.Invalidate() Control.Invalidate(Boolean) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, Boolean) Control.Invalidate(Region) Control.Invalidate(Region, Boolean) Control.Invoke(Delegate) Control.Invoke(Delegate, Object[]) Control.InvokeGotFocus(Control, EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.InvokeOnClick(Control, EventArgs) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsInputChar(Char) Control.IsInputKey(Keys) Control.IsKeyLocked(Keys) Control.IsMnemonic(Char, String) Control.NotifyInvalidate(Rectangle) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBackgroundImageChanged(EventArgs) Control.OnBackgroundImageLayoutChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnContextMenuChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnCursorChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragOver(DragEventArgs) Control.OnEnabledChanged(EventArgs) Control.OnEnter(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.OnGotFocus(EventArgs) Control.OnHandleCreated(EventArgs) Control.OnHandleDestroyed(EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnImeModeChanged(EventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.OnLocationChanged(EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnMove(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnPrint(PaintEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnSizeChanged(EventArgs) Control.OnStyleChanged(EventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnTextChanged(EventArgs) Control.OnValidated(EventArgs) Control.OnValidating(CancelEventArgs) Control.PerformLayout() Control.PerformLayout(Control, String) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessControlMessage(Message) Control.PreProcessMessage(Message) Control.ProcessKeyEventArgs(Message) Control.ProcessKeyMessage(Message) Control.ProcessKeyPreview(Message) Control.RaiseDragEvent(Object, DragEventArgs) Control.RaiseKeyEvent(Object, KeyEventArgs) Control.RaiseMouseEvent(Object, MouseEventArgs) Control.RaisePaintEvent(Object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(IntPtr, Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(Boolean) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, Boolean, Boolean, Boolean, Boolean) Control.SendToBack() Control.SetAutoSizeMode(AutoSizeMode) Control.SetBounds(Int32, Int32, Int32, Int32) Control.SetBounds(Int32, Int32, Int32, Int32, BoundsSpecified) Control.SetBoundsCore(Int32, Int32, Int32, Int32, BoundsSpecified) Control.SetClientSizeCore(Int32, Int32) Control.SetStyle(ControlStyles, Boolean) Control.SetTopLevel(Boolean) Control.SetVisibleCore(Boolean) Control.Show() Control.SizeFromClientSize(Size) Control.SuspendLayout() Control.IDropTarget.OnDragDrop(DragEventArgs) Control.IDropTarget.OnDragEnter(DragEventArgs) Control.IDropTarget.OnDragLeave(EventArgs) Control.IDropTarget.OnDragOver(DragEventArgs) Control.Update() Control.UpdateBounds() Control.UpdateBounds(Int32, Int32, Int32, Int32) Control.UpdateBounds(Int32, Int32, Int32, Int32, Int32, Int32) Control.UpdateStyles() Control.UpdateZOrder() Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.BackColor Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.ClientSize Control.CompanyName Control.ContainsFocus Control.ContextMenu Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultImeMode Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.ImeMode Control.InvokeRequired Control.IsAccessible Control.IsDisposed Control.IsHandleCreated Control.IsMirrored Control.LayoutEngine Control.Left Control.Location Control.Margin Control.MaximumSize Control.MinimumSize Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Padding Control.Parent Control.PreferredSize Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.ShowFocusCues Control.ShowKeyboardCues Control.Site Control.Size Control.TabIndex Control.TabStop Control.Tag Control.Text Control.Top Control.TopLevelControl Control.UseWaitCursor Control.Visible Control.Width Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ChangeUICues Control.Click Control.ClientSizeChanged Control.ContextMenuChanged Control.ContextMenuStripChanged Control.ControlAdded Control.ControlRemoved Control.CursorChanged Control.DockChanged Control.DoubleClick Control.DragDrop Control.DragEnter Control.DragLeave Control.DragOver Control.EnabledChanged Control.Enter Control.FontChanged Control.ForeColorChanged Control.GiveFeedback Control.GotFocus Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.ImeModeChanged Control.Invalidated Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LocationChanged Control.LostFocus Control.MarginChanged Control.MouseCaptureChanged Control.MouseClick Control.MouseDoubleClick Control.MouseEnter Control.MouseHover Control.MouseLeave Control.MouseMove Control.MouseWheel Control.Move Control.PaddingChanged Control.Paint Control.ParentChanged Control.PreviewKeyDown Control.QueryAccessibilityHelp Control.QueryContinueDrag Control.RegionChanged Control.Resize Control.RightToLeftChanged Control.SizeChanged Control.StyleChanged Control.SystemColorsChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.Validated Control.Validating Control.VisibleChanged Component.Dispose() Component.GetService(Type) Component.ToString() Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.CreateObjRef(Type) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(Boolean) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.WinForms.dll Syntax public class ZedGraphControl : UserControl, ISynchronizeInvoke, IBindableComponent, IComponent, IDisposable, IDropTarget, IWin32Window, IContainerControl Constructors | Improve this Doc View Source ZedGraphControl() Default Constructor Declaration public ZedGraphControl() Properties | Improve this Doc View Source BeenDisposed This checks if the control has been disposed. This is synonymous with the graph pane having been nulled or disposed. Therefore this is the same as ZedGraphControl.GraphPane == null . Declaration [Bindable(false)] [Browsable(false)] public bool BeenDisposed { get; } Property Value Type Description Boolean | Improve this Doc View Source EditButtons Gets or sets a value that determines which Mouse button will be used to edit point data values Declaration [Bindable(true)] public MouseButtons EditButtons { get; set; } Property Value Type Description MouseButtons Remarks This setting only applies if IsEnableHEdit and/or IsEnableVEdit are true. See Also EditModifierKeys | Improve this Doc View Source EditModifierKeys Gets or sets a value that determines which modifier keys will be used to edit point data values Declaration [Bindable(true)] public Keys EditModifierKeys { get; set; } Property Value Type Description Keys Remarks This setting only applies if IsEnableHEdit and/or IsEnableVEdit are true. See Also EditButtons | Improve this Doc View Source GraphPane Gets or sets the GraphPane property for the control Declaration [Bindable(false)] [Browsable(false)] public GraphPane GraphPane { get; set; } Property Value Type Description GraphPane Remarks ZedGraphControl actually uses a MasterPane object to hold a list of GraphPane objects. This property really only accesses the first GraphPane in the list. If there is more than one GraphPane , use the MasterPane indexer property to access any of the GraphPane objects. | Improve this Doc View Source IsAntiAlias Gets or sets a value that determines if all drawing operations for this control will be forced to operate in Anti-alias mode. Note that if this value is set to \"true\", it overrides the setting for sub-objects. Otherwise, the sub-object settings (such as IsAntiAlias ) will be honored. Declaration [Bindable(true)] public bool IsAntiAlias { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsAutoScrollRange Gets or sets a value that controls whether or not the axis value range for the scroll bars will be set automatically. Declaration [Bindable(true)] public bool IsAutoScrollRange { get; set; } Property Value Type Description Boolean Remarks If this value is set to true, then the range of the scroll bars will be set automatically to the actual range of the data as returned by GetRange(Boolean, Boolean, GraphPane) at the time that AxisChange() was last called. Note that a value of true can override any setting of ScrollMinX , ScrollMaxX , ScrollMinY , ScrollMaxY , ScrollMinY2 , and ScrollMaxY2 . Note also that you must call AxisChange() from the ZedGraphControl for this to work properly (e.g., don't call it directly from the GraphPane . Alternatively, you can call SetScrollRangeFromData() at anytime to set the scroll bar range. In most cases, you will probably want to disable IsBoundedRanges before activating this option. | Improve this Doc View Source IsEnableHEdit Gets or sets a value that determines whether or not editing of point data is allowed in the horizontal direction. Declaration [Bindable(true)] public bool IsEnableHEdit { get; set; } Property Value Type Description Boolean Remarks Editing is done by holding down the Alt key, and left-clicking on an individual point of a given CurveItem to drag it to a new location. The Mouse and Key combination for this mode are modifiable using EditButtons and EditModifierKeys . See Also EditButtons EditModifierKeys IsEnableVEdit | Improve this Doc View Source IsEnableHPan Gets or sets a value that determines whether or not panning is allowed for the control in the horizontal direction. Declaration [Bindable(true)] public bool IsEnableHPan { get; set; } Property Value Type Description Boolean Remarks Panning is done by clicking the middle mouse button (or holding down the shift key while clicking the left mouse button) inside the Rect and dragging the mouse around to shift the scale ranges as desired. See Also IsEnableVPan | Improve this Doc View Source IsEnableHZoom Gets or sets a value that determines whether or not zooming is allowed for the control in the horizontal direction. Declaration [Bindable(true)] public bool IsEnableHZoom { get; set; } Property Value Type Description Boolean Remarks Zooming is done by left-clicking inside the Rect to drag out a rectangle, indicating the new scale ranges that will be part of the graph. | Improve this Doc View Source IsEnableSelection Gets or sets a value that determines whether or not selection is allowed for the control. Declaration [Bindable(true)] public bool IsEnableSelection { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsEnableVEdit Gets or sets a value that determines whether or not editing of point data is allowed in the vertical direction. Declaration [Bindable(true)] public bool IsEnableVEdit { get; set; } Property Value Type Description Boolean Remarks Editing is done by holding down the Alt key, and left-clicking on an individual point of a given CurveItem to drag it to a new location. The Mouse and Key combination for this mode are modifiable using EditButtons and EditModifierKeys . | Improve this Doc View Source IsEnableVPan Gets or sets a value that determines whether or not panning is allowed for the control in the vertical direction. Declaration [Bindable(true)] public bool IsEnableVPan { get; set; } Property Value Type Description Boolean Remarks Panning is done by clicking the middle mouse button (or holding down the shift key while clicking the left mouse button) inside the Rect and dragging the mouse around to shift the scale ranges as desired. See Also IsEnableHPan | Improve this Doc View Source IsEnableVZoom Gets or sets a value that determines whether or not zooming is allowed for the control in the vertical direction. Declaration [Bindable(true)] public bool IsEnableVZoom { get; set; } Property Value Type Description Boolean Remarks Zooming is done by left-clicking inside the Rect to drag out a rectangle, indicating the new scale ranges that will be part of the graph. | Improve this Doc View Source IsEnableWheelZoom Gets or sets a value that determines whether or not zooming is allowed via the mouse wheel. Declaration [Bindable(true)] public bool IsEnableWheelZoom { get; set; } Property Value Type Description Boolean Remarks Wheel zooming is done by rotating the mouse wheel. Note that this property is used in combination with the IsEnableHZoom and IsEnableVZoom properties to control zoom options. | Improve this Doc View Source IsEnableZoom Gets or sets a value that determines whether or not zooming is allowed for the control. Declaration [Bindable(true)] public bool IsEnableZoom { set; } Property Value Type Description Boolean Remarks Zooming is done by left-clicking inside the Rect to drag out a rectangle, indicating the new scale ranges that will be part of the graph. | Improve this Doc View Source IsPrintFillPage Gets or sets a value that determines whether or not the MasterPane Rect dimensions will be expanded to fill the available space when printing this ZedGraphControl . Declaration [Bindable(true)] public bool IsPrintFillPage { get; set; } Property Value Type Description Boolean Remarks If IsPrintKeepAspectRatio is also true, then the MasterPane Rect dimensions will be expanded to fit as large a space as possible while still honoring the visible aspect ratio. | Improve this Doc View Source IsPrintKeepAspectRatio Gets or sets a value that determines whether or not the visible aspect ratio of the MasterPane Rect will be preserved when printing this ZedGraphControl . Declaration [Bindable(true)] public bool IsPrintKeepAspectRatio { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsPrintScaleAll Gets or sets a value that determines whether the settings of IsFontsScaled and IsPenWidthScaled will be overridden to true during printing operations. Declaration [Bindable(true)] public bool IsPrintScaleAll { get; set; } Property Value Type Description Boolean A value of true will cause both IsFontsScaled and IsPenWidthScaled to be temporarily set to true during printing operations. Remarks Printing involves pixel maps that are typically of a dramatically different dimension than on-screen pixel maps. Therefore, it becomes more important to scale the fonts and lines to give a printed image that looks like what is shown on-screen. The default setting for IsFontsScaled is true, but the default setting for IsPenWidthScaled is false. | Improve this Doc View Source IsScrolling Returns true if the user is currently scrolling via the scrollbar, or false if no scrolling is taking place. Declaration public bool IsScrolling { get; } Property Value Type Description Boolean Remarks This method just tests ScrollBar.Capture to see if the mouse has been captured by the scroll bar. If so, scrolling is active. | Improve this Doc View Source IsScrollY2 Gets or sets a value that determines if the vertical scroll bar will affect the Y2 axis. Declaration [Bindable(true)] public bool IsScrollY2 { get; set; } Property Value Type Description Boolean Remarks The vertical scroll bar is automatically associated with the Y axis. With this value, you can choose to include or exclude the Y2 axis with the scrolling. Note that the Y2 axis scrolling is handled as a secondary. The vertical scroll bar position always reflects the status of the Y axis. This can cause the Y2 axis to \"jump\" when first scrolled if the ScrollMinY2 and ScrollMaxY2 values are not set to the same proportions as ScrollMinY and ScrollMaxY with respect to the actual Min and Max . Also note that this property is actually just an alias to the IsScrollable property of the first element of YScrollRangeList . See Also IsShowVScrollBar ScrollMinY2 ScrollMaxY2 YScrollRangeList Y2ScrollRangeList | Improve this Doc View Source IsShowContextMenu Gets or sets a value that determines whether or not the context menu will be available. Declaration [Bindable(true)] public bool IsShowContextMenu { get; set; } Property Value Type Description Boolean true to allow the context menu, false to disable it Remarks The context menu is a menu that appears when you right-click on the ZedGraphControl . It provides options for Zoom, Pan, AutoScale, Clipboard Copy, and toggle IsShowPointValues . | Improve this Doc View Source IsShowCopyMessage Gets or sets a value that determines whether or not a message box will be shown in response to a context menu \"Copy\" command. Declaration [Bindable(true)] public bool IsShowCopyMessage { get; set; } Property Value Type Description Boolean Remarks Note that, if this property is set to false, the user will receive no indicative feedback in response to a Copy action. | Improve this Doc View Source IsShowCursorValues Gets or sets a value that determines whether or not tooltips will be displayed showing the current scale values when the mouse is within the Rect . Declaration [Bindable(true)] public bool IsShowCursorValues { get; set; } Property Value Type Description Boolean Remarks The displayed values are taken from the current mouse position, and formatted according to PointValueFormat and/or PointDateFormat . If this value is set to true, it overrides the IsShowPointValues setting. | Improve this Doc View Source IsShowHScrollBar Gets or sets a value that determines if the horizontal scroll bar will be visible. Declaration [Bindable(true)] public bool IsShowHScrollBar { get; set; } Property Value Type Description Boolean A boolean value. true to display a horizontal scrollbar, false otherwise. Remarks This scroll bar allows the display to be scrolled in the horizontal direction. Another option is display panning, in which the user can move the display around by clicking directly on it and dragging (see IsEnableHPan and IsEnableVPan ). You can control the available range of scrolling with the ScrollMinX and ScrollMaxX properties. Note that the scroll range can be set automatically by IsAutoScrollRange . In most cases, you will probably want to disable IsBoundedRanges before activating this option. | Improve this Doc View Source IsShowPointValues Gets or sets a value that determines whether or not tooltips will be displayed when the mouse hovers over data values. Declaration [Bindable(true)] public bool IsShowPointValues { get; set; } Property Value Type Description Boolean Remarks The displayed values are taken from Tag if it is a String type, or ToString() otherwise (using the PointValueFormat as a format string). Additionally, the user can custom format the values using the PointValueEvent event. Note that IsShowPointValues may be overridden by IsShowCursorValues . | Improve this Doc View Source IsShowVScrollBar Gets or sets a value that determines if the vertical scroll bar will be visible. Declaration [Bindable(true)] public bool IsShowVScrollBar { get; set; } Property Value Type Description Boolean A boolean value. true to display a vertical scrollbar, false otherwise. Remarks This scroll bar allows the display to be scrolled in the vertical direction. Another option is display panning, in which the user can move the display around by clicking directly on it and dragging (see IsEnableHPan and IsEnableVPan ). You can control the available range of scrolling with the ScrollMinY and ScrollMaxY properties. Note that the vertical scroll bar only affects the YAxis ; it has no impact on the Y2Axis . The panning options affect both the YAxis and Y2Axis . Note also that the scroll range can be set automatically by IsAutoScrollRange . In most cases, you will probably want to disable IsBoundedRanges before activating this option. | Improve this Doc View Source IsSynchronizeXAxes Gets or sets a value that determines if the XAxis Scale ranges for all GraphPane objects in the MasterPane will be forced to match. Declaration [Bindable(true)] public bool IsSynchronizeXAxes { get; set; } Property Value Type Description Boolean Remarks If set to true (default is false), then all of the GraphPane objects in the MasterPane associated with this ZedGraphControl will be forced to have matching scale ranges for the x axis. That is, zoom, pan, and scroll operations will result in zoom/pan/scroll for all graphpanes simultaneously. | Improve this Doc View Source IsSynchronizeYAxes Gets or sets a value that determines if the YAxis Scale ranges for all GraphPane objects in the MasterPane will be forced to match. Declaration [Bindable(true)] public bool IsSynchronizeYAxes { get; set; } Property Value Type Description Boolean Remarks If set to true (default is false), then all of the GraphPane objects in the MasterPane associated with this ZedGraphControl will be forced to have matching scale ranges for the y axis. That is, zoom, pan, and scroll operations will result in zoom/pan/scroll for all graphpanes simultaneously. | Improve this Doc View Source IsZoomOnMouseCenter Gets or sets a boolean value that determines if zooming with the wheel mouse is centered on the mouse location, or centered on the existing graph. Declaration [Bindable(true)] public bool IsZoomOnMouseCenter { get; set; } Property Value Type Description Boolean | Improve this Doc View Source LinkButtons Gets or sets a value that determines which Mouse button will be used to click on linkable objects Declaration [Bindable(true)] public MouseButtons LinkButtons { get; set; } Property Value Type Description MouseButtons See Also LinkModifierKeys LinkEvent | Improve this Doc View Source LinkModifierKeys Gets or sets a value that determines which modifier keys will be used to click on linkable objects Declaration [Bindable(true)] public Keys LinkModifierKeys { get; set; } Property Value Type Description Keys See Also LinkButtons LinkEvent | Improve this Doc View Source MasterPane Gets or sets the MasterPane property for the control Declaration [Bindable(false)] [Browsable(false)] public MasterPane MasterPane { get; set; } Property Value Type Description MasterPane | Improve this Doc View Source PanButtons Gets or sets a value that determines which mouse button will be used as a primary option to trigger a pan event. Declaration [Bindable(true)] public MouseButtons PanButtons { get; set; } Property Value Type Description MouseButtons Remarks This value is combined with PanModifierKeys to determine the actual pan combination. A secondary pan button/key combination option is available via PanButtons2 and PanModifierKeys2 . To not use this button/key combination, set the value of PanButtons to None . | Improve this Doc View Source PanButtons2 Gets or sets a value that determines which mouse button will be used as the secondary option to trigger a pan event. Declaration [Bindable(true)] public MouseButtons PanButtons2 { get; set; } Property Value Type Description MouseButtons Remarks This value is combined with PanModifierKeys2 to determine the actual pan combination. The primary pan button/key combination option is available via PanButtons and PanModifierKeys . To not use this button/key combination, set the value of PanButtons2 to None . | Improve this Doc View Source PanModifierKeys Gets or sets a value that determines which modifier keys will be used as a primary option to trigger a pan event. Declaration [Bindable(true)] public Keys PanModifierKeys { get; set; } Property Value Type Description Keys Remarks This value is combined with PanButtons to determine the actual pan combination. A secondary pan button/key combination option is available via PanButtons2 and PanModifierKeys2 . To not use this button/key combination, set the value of PanButtons to None . | Improve this Doc View Source PanModifierKeys2 Gets or sets a value that determines which modifier keys will be used as a secondary option to trigger a pan event. Declaration [Bindable(true)] public Keys PanModifierKeys2 { get; set; } Property Value Type Description Keys Remarks This value is combined with PanButtons2 to determine the actual pan combination. A primary pan button/key combination option is available via PanButtons and PanModifierKeys . To not use this button/key combination, set the value of PanButtons2 to None . | Improve this Doc View Source PointDateFormat Gets or sets the format for displaying tooltip values. This format is passed to ToString(String) . Declaration [Bindable(true)] public string PointDateFormat { get; set; } Property Value Type Description String Remarks Use the DateTimeFormatInfo type to determine the format strings. | Improve this Doc View Source PointValueFormat Gets or sets the format for displaying tooltip values. This format is passed to ToString(String) . Declaration [Bindable(true)] public string PointValueFormat { get; set; } Property Value Type Description String Remarks Use the NumberFormatInfo type to determine the format strings. | Improve this Doc View Source PrintDocument Gets or sets the PrintDocument instance that is used for all of the context menu printing functions. Declaration public PrintDocument PrintDocument { get; set; } Property Value Type Description PrintDocument | Improve this Doc View Source SaveFileDialog Gets or sets the SaveFileDialog instance that will be used by the \"Save As...\" context menu item. Declaration [Bindable(true)] public SaveFileDialog SaveFileDialog { get; set; } Property Value Type Description SaveFileDialog Remarks This provides the opportunity to modify the dialog, such as setting the InitialDirectory property. | Improve this Doc View Source ScrollGrace Set a \"grace\" value that leaves a buffer area around the data when IsAutoScrollRange is true. Declaration public double ScrollGrace { get; set; } Property Value Type Description Double Remarks This value represents a fraction of the total range around each axis. For example, if the axis ranges from 0 to 100, then a 0.05 value for ScrollGrace would set the scroll range to -5 to 105. | Improve this Doc View Source ScrollMaxX The maximum value for the X axis scroll range. Declaration [Bindable(true)] public double ScrollMaxX { get; set; } Property Value Type Description Double A double value indicating the maximum axis value Remarks Effectively, the maximum endpoint of the scroll range will cause the Max value to be set to ScrollMaxX . Note that this value applies only to the scroll bar settings. Axis panning (see IsEnableHPan ) is not affected by this value. Note that this value can be overridden by IsAutoScrollRange and SetScrollRangeFromData() . | Improve this Doc View Source ScrollMaxY The maximum value for the Y axis scroll range. Declaration [Bindable(true)] public double ScrollMaxY { get; set; } Property Value Type Description Double A double value indicating the maximum axis value Remarks Effectively, the maximum endpoint of the scroll range will cause the Max value to be set to ScrollMaxY . Note that this value applies only to the scroll bar settings. Axis panning (see IsEnableVPan ) is not affected by this value. Note that this value can be overridden by IsAutoScrollRange and SetScrollRangeFromData() . Also note that this property is actually just an alias to the Max property of the first element of YScrollRangeList . See Also YScrollRangeList | Improve this Doc View Source ScrollMaxY2 The maximum value for the Y2 axis scroll range. Declaration [Bindable(true)] public double ScrollMaxY2 { get; set; } Property Value Type Description Double A double value indicating the maximum axis value Remarks Effectively, the maximum endpoint of the scroll range will cause the Max value to be set to ScrollMaxY2 . Note that this value applies only to the scroll bar settings. Axis panning (see IsEnableVPan ) is not affected by this value. Note that this value can be overridden by IsAutoScrollRange and SetScrollRangeFromData() . Also note that this property is actually just an alias to the Max property of the first element of Y2ScrollRangeList . See Also Y2ScrollRangeList | Improve this Doc View Source ScrollMinX The minimum value for the X axis scroll range. Declaration [Bindable(true)] public double ScrollMinX { get; set; } Property Value Type Description Double A double value indicating the minimum axis value Remarks Effectively, the minimum endpoint of the scroll range will cause the Min value to be set to ScrollMinX . Note that this value applies only to the scroll bar settings. Axis panning (see IsEnableHPan ) is not affected by this value. Note that this value can be overridden by IsAutoScrollRange and SetScrollRangeFromData() . | Improve this Doc View Source ScrollMinY The minimum value for the Y axis scroll range. Declaration [Bindable(true)] public double ScrollMinY { get; set; } Property Value Type Description Double A double value indicating the minimum axis value Remarks Effectively, the minimum endpoint of the scroll range will cause the Min value to be set to ScrollMinY . Note that this value applies only to the scroll bar settings. Axis panning (see IsEnableVPan ) is not affected by this value. Note that this value can be overridden by IsAutoScrollRange and SetScrollRangeFromData() . Also note that this property is actually just an alias to the Min property of the first element of YScrollRangeList . See Also YScrollRangeList | Improve this Doc View Source ScrollMinY2 The minimum value for the Y2 axis scroll range. Declaration [Bindable(true)] public double ScrollMinY2 { get; set; } Property Value Type Description Double A double value indicating the minimum axis value Remarks Effectively, the minimum endpoint of the scroll range will cause the Min value to be set to ScrollMinY2 . Note that this value applies only to the scroll bar settings. Axis panning (see IsEnableVPan ) is not affected by this value. Note that this value can be overridden by IsAutoScrollRange and SetScrollRangeFromData() . Also note that this property is actually just an alias to the Min property of the first element of Y2ScrollRangeList . See Also Y2ScrollRangeList | Improve this Doc View Source SelectAppendModifierKeys Gets or sets a value that determines which Modifier keys will be used to append a CurveItem to the selection list. Declaration [Bindable(true)] public Keys SelectAppendModifierKeys { get; } Property Value Type Description Keys | Improve this Doc View Source SelectButtons Gets or sets a value that determines which Mouse button will be used to select CurveItem 's. Declaration [Bindable(true)] public MouseButtons SelectButtons { get; set; } Property Value Type Description MouseButtons Remarks This setting only applies if IsEnableSelection is true. See Also SelectModifierKeys | Improve this Doc View Source Selection Readonly property that gets the list of selected CurveItems Declaration public Selection Selection { get; } Property Value Type Description Selection | Improve this Doc View Source SelectModifierKeys Gets or sets a value that determines which Modifier keys will be used to select CurveItem 's. Declaration [Bindable(true)] public Keys SelectModifierKeys { get; set; } Property Value Type Description Keys Remarks This setting only applies if IsEnableSelection is true. See Also SelectButtons | Improve this Doc View Source UseExtendedPrintDialog Gets or sets a value indicating whether the dialog should be shown in the Windows XP style for systems running Windows XP Home Edition, Windows XP Professional, Windows Server 2003?or later. The default is true . Declaration public bool UseExtendedPrintDialog { get; set; } Property Value Type Description Boolean true to indicate the dialog should be shown with the Windows XP style, otherwise false . | Improve this Doc View Source Y2ScrollRangeList Access the ScrollRangeList for the Y2 axes. Declaration [Bindable(true)] public ScrollRangeList Y2ScrollRangeList { get; } Property Value Type Description ScrollRangeList Remarks This list maintains the user scale ranges for the scroll bars for each axis in the Y2AxisList . Each ordinal location in Y2ScrollRangeList corresponds to an equivalent ordinal location in Y2AxisList . See Also ScrollMinY2 ScrollMaxY2 | Improve this Doc View Source YScrollRangeList Access the ScrollRangeList for the Y axes. Declaration [Bindable(true)] public ScrollRangeList YScrollRangeList { get; } Property Value Type Description ScrollRangeList Remarks This list maintains the user scale ranges for the scroll bars for each axis in the YAxisList . Each ordinal location in YScrollRangeList corresponds to an equivalent ordinal location in YAxisList . See Also ScrollMinY ScrollMaxY | Improve this Doc View Source ZoomButtons Gets or sets a value that determines which mouse button will be used as a primary option to trigger a zoom event. Declaration [Bindable(true)] public MouseButtons ZoomButtons { get; set; } Property Value Type Description MouseButtons Remarks This value is combined with ZoomModifierKeys to determine the actual zoom combination. A secondary zoom button/key combination option is available via ZoomButtons2 and ZoomModifierKeys2 . To not use this button/key combination, set the value of ZoomButtons to None . | Improve this Doc View Source ZoomButtons2 Gets or sets a value that determines which mouse button will be used as the secondary option to trigger a zoom event. Declaration [Bindable(true)] public MouseButtons ZoomButtons2 { get; set; } Property Value Type Description MouseButtons Remarks This value is combined with ZoomModifierKeys2 to determine the actual zoom combination. The primary zoom button/key combination option is available via ZoomButtons and ZoomModifierKeys . To not use this button/key combination, set the value of ZoomButtons2 to None . | Improve this Doc View Source ZoomModifierKeys Gets or sets a value that determines which modifier keys will be used as a primary option to trigger a zoom event. Declaration [Bindable(true)] public Keys ZoomModifierKeys { get; set; } Property Value Type Description Keys Remarks This value is combined with ZoomButtons to determine the actual zoom combination. A secondary zoom button/key combination option is available via ZoomButtons2 and ZoomModifierKeys2 . To not use this button/key combination, set the value of ZoomButtons to None . | Improve this Doc View Source ZoomModifierKeys2 Gets or sets a value that determines which modifier keys will be used as a secondary option to trigger a zoom event. Declaration [Bindable(true)] public Keys ZoomModifierKeys2 { get; set; } Property Value Type Description Keys Remarks This value is combined with ZoomButtons2 to determine the actual zoom combination. A primary zoom button/key combination option is available via ZoomButtons and ZoomModifierKeys . To not use this button/key combination, set the value of ZoomButtons2 to None . | Improve this Doc View Source ZoomStepFraction Gets or sets the step size fraction for zooming with the mouse wheel. A value of 0.1 will result in a 10% zoom step for each mouse wheel movement. Declaration [Bindable(true)] public double ZoomStepFraction { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source AxisChange() This performs an axis change command on the graphPane. Declaration public virtual void AxisChange() Remarks This is the same as ZedGraphControl.GraphPane.AxisChange( ZedGraphControl.CreateGraphics() ) , however, this method also calls SetScrollRangeFromData() if IsAutoScrollRange is true. | Improve this Doc View Source Copy(Boolean) Handler for the \"Copy\" context menu item. Copies the current image to a bitmap on the clipboard. Declaration public void Copy(bool isShowMessage) Parameters Type Name Description Boolean isShowMessage boolean value that determines whether or not a prompt will be displayed. true to show a message of \"Image Copied to ClipBoard\". | Improve this Doc View Source CopyEmf(Boolean) Special handler that copies the current image to an Emf file on the clipboard. Declaration public void CopyEmf(bool isShowMessage) Parameters Type Name Description Boolean isShowMessage boolean value that determines whether or not a prompt will be displayed. true to show a message of \"Image Copied to ClipBoard\". Remarks This version is similar to the regular Copy(Boolean) method, except that it will place an Emf image (vector) on the ClipBoard instead of the regular bitmap. | Improve this Doc View Source Dispose(Boolean) Clean up any resources being used. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true if the components should be disposed, false otherwise Overrides ContainerControl.Dispose(Boolean) | Improve this Doc View Source DoPageSetup() Display a PageSetupDialog to the user, allowing them to modify the print settings for this ZedGraphControl . Declaration public void DoPageSetup() | Improve this Doc View Source DoPrint() Display a PrintDialog to the user, allowing them to select a printer and print the MasterPane contained in this ZedGraphControl . Declaration public void DoPrint() | Improve this Doc View Source DoPrintPreview() Display a PrintPreviewDialog , allowing the user to preview and subsequently print the MasterPane contained in this ZedGraphControl . Declaration public void DoPrintPreview() | Improve this Doc View Source GetImage() Gets the graph pane's current image. Bitmap Declaration [Bindable(false)] [Browsable(false)] public Image GetImage() Returns Type Description Image Exceptions Type Condition ZedGraphException When the control has been disposed before this call. | Improve this Doc View Source MakeValueLabel(Axis, Double, Int32, Boolean) Make a string label that corresponds to a user scale value. Declaration protected string MakeValueLabel(Axis axis, double val, int iPt, bool isOverrideOrdinal) Parameters Type Name Description Axis axis The axis from which to obtain the scale value. This determines if it's a date value, linear, log, etc. Double val The value to be made into a label Int32 iPt The ordinal position of the value Boolean isOverrideOrdinal true to override the ordinal settings of the axis, and prefer the actual value instead. Returns Type Description String The string label. | Improve this Doc View Source MenuClick_Copy(Object, EventArgs) Handler for the \"Copy\" context menu item. Copies the current image to a bitmap on the clipboard. Declaration protected void MenuClick_Copy(object sender, EventArgs e) Parameters Type Name Description Object sender EventArgs e | Improve this Doc View Source MenuClick_PageSetup(Object, EventArgs) Handler for the \"Page Setup...\" context menu item. Displays a PageSetupDialog . Declaration protected void MenuClick_PageSetup(object sender, EventArgs e) Parameters Type Name Description Object sender EventArgs e | Improve this Doc View Source MenuClick_Print(Object, EventArgs) Handler for the \"Print...\" context menu item. Displays a PrintDialog . Declaration protected void MenuClick_Print(object sender, EventArgs e) Parameters Type Name Description Object sender EventArgs e | Improve this Doc View Source MenuClick_RestoreScale(Object, EventArgs) Handler for the \"Set Scale to Default\" context menu item. Sets the scale ranging to full auto mode for all axes. Declaration protected void MenuClick_RestoreScale(object sender, EventArgs e) Parameters Type Name Description Object sender EventArgs e Remarks This method differs from the ZoomOutAll(GraphPane) method in that it sets the scales to full auto mode. The ZoomOutAll(GraphPane) method sets the scales to their initial setting prior to any user actions (which may or may not be full auto mode). | Improve this Doc View Source MenuClick_SaveAs(Object, EventArgs) Handler for the \"Save Image As\" context menu item. Copies the current image to the selected file. Declaration protected void MenuClick_SaveAs(object sender, EventArgs e) Parameters Type Name Description Object sender EventArgs e | Improve this Doc View Source MenuClick_ShowValues(Object, EventArgs) Handler for the \"Show Values\" context menu item. Toggles the IsShowPointValues property, which activates the point value tooltips. Declaration protected void MenuClick_ShowValues(object sender, EventArgs e) Parameters Type Name Description Object sender EventArgs e | Improve this Doc View Source MenuClick_ZoomOut(Object, EventArgs) Handler for the \"UnZoom/UnPan\" context menu item. Restores the scale ranges to the values before the last zoom or pan operation. Declaration protected void MenuClick_ZoomOut(object sender, EventArgs e) Parameters Type Name Description Object sender EventArgs e | Improve this Doc View Source MenuClick_ZoomOutAll(Object, EventArgs) Handler for the \"Undo All Zoom/Pan\" context menu item. Restores the scale ranges to the values before all zoom and pan operations Declaration protected void MenuClick_ZoomOutAll(object sender, EventArgs e) Parameters Type Name Description Object sender EventArgs e Remarks This method differs from the RestoreScale(GraphPane) method in that it sets the scales to their initial setting prior to any user actions. The RestoreScale(GraphPane) method sets the scales to full auto mode (regardless of what the initial setting may have been). | Improve this Doc View Source OnPaint(PaintEventArgs) Called by the system to update the control on-screen Declaration protected override void OnPaint(PaintEventArgs e) Parameters Type Name Description PaintEventArgs e A PaintEventArgs object containing the Graphics specifications for this Paint event. Overrides Control.OnPaint(PaintEventArgs) | Improve this Doc View Source PanScale(Axis, Double, Double) Handle a panning operation for the specified Axis . Declaration protected void PanScale(Axis axis, double startVal, double endVal) Parameters Type Name Description Axis axis The Axis to be panned Double startVal The value where the pan started. The scale range will be shifted by the difference between and . Double endVal The value where the pan ended. The scale range will be shifted by the difference between and . | Improve this Doc View Source RestoreScale(GraphPane) Handler for the \"Set Scale to Default\" context menu item. Sets the scale ranging to full auto mode for all axes. Declaration public void RestoreScale(GraphPane primaryPane) Parameters Type Name Description GraphPane primaryPane The GraphPane object which is to have the scale restored Remarks This method differs from the ZoomOutAll(GraphPane) method in that it sets the scales to full auto mode. The ZoomOutAll(GraphPane) method sets the scales to their initial setting prior to any user actions (which may or may not be full auto mode). | Improve this Doc View Source SaveAs() Handler for the \"Save Image As\" context menu item. Copies the current image to the selected file in either the Emf (vector), or a variety of Bitmap formats. Declaration public void SaveAs() Remarks Note that SaveAsBitmap() and SaveAsEmf() methods are provided which allow for Bitmap-only or Emf-only handling of the \"Save As\" context menu item. | Improve this Doc View Source SaveAs(String) Copies the current image to the selected file in Emf (vector), or a variety of Bitmap formats. Declaration public string SaveAs(string DefaultFileName) Parameters Type Name Description String DefaultFileName Accepts a default file name for the file dialog (if \"\" or null, default is not used) Returns Type Description String The file name saved, or \"\" if cancelled. Remarks Note that SaveAsBitmap() and SaveAsEmf() methods are provided which allow for Bitmap-only or Emf-only handling of the \"Save As\" context menu item. | Improve this Doc View Source SaveAsBitmap() Handler for the \"Save Image As\" context menu item. Copies the current image to the selected Bitmap file. Declaration public void SaveAsBitmap() Remarks Note that this handler saves as a bitmap only. The default handler is SaveAs() , which allows for Bitmap or EMF formats | Improve this Doc View Source SaveAsEmf() Handler for the \"Save Image As\" context menu item. Copies the current image to the selected Emf format file. Declaration public void SaveAsEmf() Remarks Note that this handler saves as an Emf format only. The default handler is SaveAs() , which allows for Bitmap or EMF formats. | Improve this Doc View Source SetCursor() Set the cursor according to the current mouse location. Declaration protected void SetCursor() | Improve this Doc View Source SetCursor(Point) Set the cursor according to the current mouse location. Declaration protected void SetCursor(Point mousePt) Parameters Type Name Description Point mousePt | Improve this Doc View Source SetScrollRangeFromData() Sets the value of the scroll range properties (see ScrollMinX , ScrollMaxX , YScrollRangeList , and Y2ScrollRangeList based on the actual range of the data for each corresponding Axis . Declaration public void SetScrollRangeFromData() Remarks This method is called automatically by AxisChange() if IsAutoScrollRange is true. Note that this will not be called if you call AxisChange directly from the GraphPane . For example, zedGraphControl1.AxisChange() works properly, but zedGraphControl1.GraphPane.AxisChange() does not. | Improve this Doc View Source ZedGraphControl_KeyDown(Object, KeyEventArgs) Handle the Key Events so ZedGraph can Escape out of a panning or zooming operation. Declaration protected void ZedGraphControl_KeyDown(object sender, KeyEventArgs e) Parameters Type Name Description Object sender KeyEventArgs e | Improve this Doc View Source ZedGraphControl_KeyUp(Object, KeyEventArgs) Handle a KeyUp event Declaration protected void ZedGraphControl_KeyUp(object sender, KeyEventArgs e) Parameters Type Name Description Object sender The ZedGraphControl in which the KeyUp occurred. KeyEventArgs e A KeyEventArgs instance. | Improve this Doc View Source ZedGraphControl_MouseDown(Object, MouseEventArgs) Handle a MouseDown event in the ZedGraphControl Declaration protected void ZedGraphControl_MouseDown(object sender, MouseEventArgs e) Parameters Type Name Description Object sender A reference to the ZedGraphControl MouseEventArgs e A MouseEventArgs instance | Improve this Doc View Source ZedGraphControl_MouseMove(Object, MouseEventArgs) protected method for handling MouseMove events to display tooltips over individual datapoints. Declaration protected void ZedGraphControl_MouseMove(object sender, MouseEventArgs e) Parameters Type Name Description Object sender A reference to the control that has the MouseMove event. MouseEventArgs e A MouseEventArgs object. | Improve this Doc View Source ZedGraphControl_MouseUp(Object, MouseEventArgs) Handle a MouseUp event in the ZedGraphControl Declaration protected void ZedGraphControl_MouseUp(object sender, MouseEventArgs e) Parameters Type Name Description Object sender A reference to the ZedGraphControl MouseEventArgs e A MouseEventArgs instance | Improve this Doc View Source ZedGraphControl_MouseWheel(Object, MouseEventArgs) Handle a MouseWheel event in the ZedGraphControl Declaration protected void ZedGraphControl_MouseWheel(object sender, MouseEventArgs e) Parameters Type Name Description Object sender A reference to the ZedGraphControl MouseEventArgs e A MouseEventArgs instance | Improve this Doc View Source ZedGraphControl_ReSize(Object, EventArgs) Called when the control has been resized. Declaration protected void ZedGraphControl_ReSize(object sender, EventArgs e) Parameters Type Name Description Object sender A reference to the control that has been resized. EventArgs e An EventArgs object. | Improve this Doc View Source ZoomOut(GraphPane) Handler for the \"UnZoom/UnPan\" context menu item. Restores the scale ranges to the values before the last zoom, pan, or scroll operation. Declaration public void ZoomOut(GraphPane primaryPane) Parameters Type Name Description GraphPane primaryPane The primary GraphPane object which is to be zoomed out Remarks Triggers a ZoomEvent for any type of undo (including pan, scroll, zoom, and wheelzoom). This method will affect all the GraphPane objects in the MasterPane if IsSynchronizeXAxes or IsSynchronizeYAxes is true. | Improve this Doc View Source ZoomOutAll(GraphPane) Handler for the \"Undo All Zoom/Pan\" context menu item. Restores the scale ranges to the values before all zoom and pan operations Declaration public void ZoomOutAll(GraphPane primaryPane) Parameters Type Name Description GraphPane primaryPane The GraphPane object which is to be zoomed out Remarks This method differs from the RestoreScale(GraphPane) method in that it sets the scales to their initial setting prior to any user actions. The RestoreScale(GraphPane) method sets the scales to full auto mode (regardless of what the initial setting may have been). | Improve this Doc View Source ZoomPane(GraphPane, Double, PointF, Boolean) Zoom a specified pane in or out according to the specified zoom fraction. Declaration public void ZoomPane(GraphPane pane, double zoomFraction, PointF centerPt, bool isZoomOnCenter) Parameters Type Name Description GraphPane pane The GraphPane instance to be zoomed. Double zoomFraction The fraction by which to zoom, less than 1 to zoom in, greater than 1 to zoom out. For example, 0.9 will zoom in such that the scale is 90% of what it was originally. PointF centerPt The screen position about which the zoom will be centered. This value is only used if is true. Boolean isZoomOnCenter true to cause the zoom to be centered on the point , false to center on the Rect . Remarks The zoom will occur on the XAxis , YAxis , and Y2Axis only if the corresponding flag, IsEnableHZoom or IsEnableVZoom , is true. Note that if there are multiple Y or Y2 axes, all of them will be zoomed. | Improve this Doc View Source ZoomPane(GraphPane, Double, PointF, Boolean, Boolean) Zoom a specified pane in or out according to the specified zoom fraction. Declaration protected void ZoomPane(GraphPane pane, double zoomFraction, PointF centerPt, bool isZoomOnCenter, bool isRefresh) Parameters Type Name Description GraphPane pane The GraphPane instance to be zoomed. Double zoomFraction The fraction by which to zoom, less than 1 to zoom in, greater than 1 to zoom out. For example, 0.9 will zoom in such that the scale is 90% of what it was originally. PointF centerPt The screen position about which the zoom will be centered. This value is only used if is true. Boolean isZoomOnCenter true to cause the zoom to be centered on the point , false to center on the Rect . Boolean isRefresh true to force a refresh of the control, false to leave it unrefreshed Remarks The zoom will occur on the XAxis , YAxis , and Y2Axis only if the corresponding flag, IsEnableHZoom or IsEnableVZoom , is true. Note that if there are multiple Y or Y2 axes, all of them will be zoomed. | Improve this Doc View Source ZoomScale(Axis, Double, Double, Boolean) Zoom the specified axis by the specified amount, with the center of the zoom at the (optionally) specified point. Declaration protected void ZoomScale(Axis axis, double zoomFraction, double centerVal, bool isZoomOnCenter) Parameters Type Name Description Axis axis The Axis to be zoomed. Double zoomFraction The zoom fraction, less than 1.0 to zoom in, greater than 1.0 to zoom out. That is, a value of 0.9 will zoom in such that the scale length is 90% of what it previously was. Double centerVal The location for the center of the zoom. This is only used if is true. Boolean isZoomOnCenter true if the zoom is to be centered at the screen position, false for the zoom to be centered within the Rect . Remarks This method is used for MouseWheel zoom operations Events | Improve this Doc View Source ContextMenuBuilder Subscribe to this event to be able to modify the ZedGraph context menu. Declaration [Bindable(true)] public event ZedGraphControl.ContextMenuBuilderEventHandler ContextMenuBuilder Event Type Type Description ZedGraphControl.ContextMenuBuilderEventHandler Remarks The context menu is built on the fly after a right mouse click. You can add menu items to this menu by simply modifying the parameter. | Improve this Doc View Source CursorValueEvent Subscribe to this event to provide custom formatting for the cursor value tooltips Declaration [Bindable(true)] public event ZedGraphControl.CursorValueHandler CursorValueEvent Event Type Type Description ZedGraphControl.CursorValueHandler Examples To subscribe to this event, use the following in your FormLoad method: zedGraphControl1.CursorValueEvent += new ZedGraphControl.CursorValueHandler( MyCursorValueHandler ); Add this method to your Form1.cs: private string MyCursorValueHandler( object sender, GraphPane pane, Point mousePt ) { #region double x, y; pane.ReverseTransform( mousePt, out x, out y ); return \"( \" + x.ToString( \"f2\" ) + \", \" + y.ToString( \"f2\" ) + \" )\"; #endregion } | Improve this Doc View Source DoubleClickEvent Subscribe to this event to provide notification of Double Clicks on graph objects Declaration [Bindable(true)] public event ZedGraphControl.ZedMouseEventHandler DoubleClickEvent Event Type Type Description ZedGraphControl.ZedMouseEventHandler Remarks This event provides for a notification when the mouse is double-clicked on an object within any GraphPane of the MasterPane associated with this ZedGraphControl . This event will use the FindNearestPaneObject(PointF, Graphics, out GraphPane, out Object, out Int32) method to determine which object was clicked. The boolean value that you return from this handler determines whether or not the ZedGraphControl will do any further handling of the DoubleClick event (see ZedGraphControl.ZedMouseEventHandler ). Return true if you have handled the DoubleClick event entirely, and you do not want the ZedGraphControl to do any further action. Return false if ZedGraph should go ahead and process the DoubleClick event. | Improve this Doc View Source LinkEvent Subscribe to this event to be able to respond to mouse clicks within linked objects. Declaration [Bindable(true)] public event ZedGraphControl.LinkEventHandler LinkEvent Event Type Type Description ZedGraphControl.LinkEventHandler Remarks Linked objects are typically either GraphObj type objects or CurveItem type objects. These object types can include hyperlink information allowing for \"drill-down\" type operation. See Also ZedGraphControl.LinkEventHandler Link Link Link | Improve this Doc View Source MouseDown Hide the standard control MouseDown event so that the ZedGraphControl.MouseDownEvent can be used. This is so that the user must return true/false in order to indicate whether or not we should respond to the event. Declaration [Bindable(false)] [Browsable(false)] public event MouseEventHandler MouseDown Event Type Type Description MouseEventHandler | Improve this Doc View Source MouseDownEvent Subscribe to this event to provide notification of MouseDown clicks on graph objects Declaration [Bindable(true)] public event ZedGraphControl.ZedMouseEventHandler MouseDownEvent Event Type Type Description ZedGraphControl.ZedMouseEventHandler Remarks This event provides for a notification when the mouse is clicked on an object within any GraphPane of the MasterPane associated with this ZedGraphControl . This event will use the FindNearestPaneObject(PointF, Graphics, out GraphPane, out Object, out Int32) method to determine which object was clicked. The boolean value that you return from this handler determines whether or not the ZedGraphControl will do any further handling of the MouseDown event (see ZedGraphControl.ZedMouseEventHandler ). Return true if you have handled the MouseDown event entirely, and you do not want the ZedGraphControl to do any further action (e.g., starting a zoom operation). Return false if ZedGraph should go ahead and process the MouseDown event. | Improve this Doc View Source MouseMoveEvent Subscribe to this event to provide notification of MouseMove events over graph objects Declaration [Bindable(true)] public event ZedGraphControl.ZedMouseEventHandler MouseMoveEvent Event Type Type Description ZedGraphControl.ZedMouseEventHandler Remarks This event provides for a notification when the mouse is moving over on the control. The boolean value that you return from this handler determines whether or not the ZedGraphControl will do any further handling of the MouseMove event (see ZedGraphControl.ZedMouseEventHandler ). Return true if you have handled the MouseMove event entirely, and you do not want the ZedGraphControl to do any further action. Return false if ZedGraph should go ahead and process the MouseMove event. | Improve this Doc View Source MouseUp Hide the standard control MouseUp event so that the ZedGraphControl.MouseUpEvent can be used. This is so that the user must return true/false in order to indicate whether or not we should respond to the event. Declaration [Bindable(false)] [Browsable(false)] public event MouseEventHandler MouseUp Event Type Type Description MouseEventHandler | Improve this Doc View Source MouseUpEvent Subscribe to this event to provide notification of MouseUp clicks on graph objects Declaration [Bindable(true)] public event ZedGraphControl.ZedMouseEventHandler MouseUpEvent Event Type Type Description ZedGraphControl.ZedMouseEventHandler Remarks This event provides for a notification when the mouse is clicked on an object within any GraphPane of the MasterPane associated with this ZedGraphControl . This event will use the FindNearestPaneObject(PointF, Graphics, out GraphPane, out Object, out Int32) method to determine which object was clicked. The boolean value that you return from this handler determines whether or not the ZedGraphControl will do any further handling of the MouseUp event (see ZedGraphControl.ZedMouseEventHandler ). Return true if you have handled the MouseUp event entirely, and you do not want the ZedGraphControl to do any further action (e.g., starting a zoom operation). Return false if ZedGraph should go ahead and process the MouseUp event. | Improve this Doc View Source PointEditEvent Subscribe to this event to receive notifcation and/or respond after a data point has been edited via IsEnableHEdit and IsEnableVEdit . Declaration [Bindable(true)] public event ZedGraphControl.PointEditHandler PointEditEvent Event Type Type Description ZedGraphControl.PointEditHandler Examples To subscribe to this event, use the following in your Form_Load method: zedGraphControl1.PointEditEvent += new ZedGraphControl.PointEditHandler( MyPointEditHandler ); Add this method to your Form1.cs: private string MyPointEditHandler( object sender, GraphPane pane, CurveItem curve, int iPt ) { PointPair pt = curve[iPt]; return \"This value is \" + pt.Y.ToString(\"f2\") + \" gallons\"; } | Improve this Doc View Source PointValueEvent Subscribe to this event to provide custom formatting for the tooltips Declaration [Bindable(true)] public event ZedGraphControl.PointValueHandler PointValueEvent Event Type Type Description ZedGraphControl.PointValueHandler Examples To subscribe to this event, use the following in your FormLoad method: zedGraphControl1.PointValueEvent += new ZedGraphControl.PointValueHandler( MyPointValueHandler ); Add this method to your Form1.cs: private string MyPointValueHandler( object sender, GraphPane pane, CurveItem curve, int iPt ) { #region PointPair pt = curve[iPt]; return \"This value is \" + pt.Y.ToString(\"f2\") + \" gallons\"; #endregion } | Improve this Doc View Source ScrollDoneEvent Subscribe to this event to be notified when the GraphPane is scrolled by the user using the scrollbars. Declaration [Bindable(true)] public event ZedGraphControl.ScrollDoneHandler ScrollDoneEvent Event Type Type Description ZedGraphControl.ScrollDoneHandler | Improve this Doc View Source ScrollEvent Subscribe to this event to be notified when the GraphPane is scrolled by the user using the scrollbars. Declaration [Bindable(true)] public event ScrollEventHandler ScrollEvent Event Type Type Description ScrollEventHandler | Improve this Doc View Source ScrollProgressEvent Subscribe to this event to be notified when the GraphPane is scrolled by the user using the scrollbars. Declaration [Bindable(true)] public event ZedGraphControl.ScrollProgressHandler ScrollProgressEvent Event Type Type Description ZedGraphControl.ScrollProgressHandler | Improve this Doc View Source ZoomEvent Subscribe to this event to be notified when the GraphPane is zoomed or panned by the user, either via a mouse drag operation or by the context menu commands. Declaration [Bindable(true)] public event ZedGraphControl.ZoomEventHandler ZoomEvent Event Type Type Description ZedGraphControl.ZoomEventHandler Implements System.ComponentModel.ISynchronizeInvoke System.Windows.Forms.IBindableComponent System.ComponentModel.IComponent System.IDisposable System.Windows.Forms.IDropTarget System.Windows.Forms.IWin32Window System.Windows.Forms.IContainerControl"
  },
  "api/ZedGraph.ZedGraphControl.LinkEventHandler.html": {
    "href": "api/ZedGraph.ZedGraphControl.LinkEventHandler.html",
    "title": "Delegate ZedGraphControl.LinkEventHandler",
    "keywords": "Delegate ZedGraphControl.LinkEventHandler A delegate that allows notification of clicks on ZedGraph objects that have active links enabled Namespace : ZedGraph Assembly : ZedGraph.WinForms.dll Syntax public delegate bool LinkEventHandler(ZedGraphControl sender, GraphPane pane, object source, Link link, int index); Parameters Type Name Description ZedGraphControl sender The source ZedGraphControl object GraphPane pane The source GraphPane in which the click occurred. Object source The source object which was clicked. This is typically a type of CurveItem if a curve point was clicked, or a type of GraphObj if a graph object was clicked. Link link The Link object, belonging to source , that contains the link information Int32 index An index value, typically used if a CurveItem was clicked, indicating the ordinal value of the actual point that was clicked. Returns Type Description Boolean Return true if you have handled the LinkEvent entirely, and you do not want the ZedGraphControl to do any further action. Return false if ZedGraph should go ahead and process the LinkEvent."
  },
  "api/ZedGraph.ZedGraphControl.PointEditHandler.html": {
    "href": "api/ZedGraph.ZedGraphControl.PointEditHandler.html",
    "title": "Delegate ZedGraphControl.PointEditHandler",
    "keywords": "Delegate ZedGraphControl.PointEditHandler A delegate that receives notification after a point-edit operation is completed. Namespace : ZedGraph Assembly : ZedGraph.WinForms.dll Syntax public delegate string PointEditHandler(ZedGraphControl sender, GraphPane pane, CurveItem curve, int iPt); Parameters Type Name Description ZedGraphControl sender The source ZedGraphControl object GraphPane pane The GraphPane object that contains the point that has been edited CurveItem curve The CurveItem object that contains the point that has been edited Int32 iPt The integer index of the edited PointPair within the IPointList of the selected CurveItem Returns Type Description String See Also PointValueEvent"
  },
  "api/ZedGraph.ZedGraphControl.PointValueHandler.html": {
    "href": "api/ZedGraph.ZedGraphControl.PointValueHandler.html",
    "title": "Delegate ZedGraphControl.PointValueHandler",
    "keywords": "Delegate ZedGraphControl.PointValueHandler A delegate that allows custom formatting of the point value tooltips Namespace : ZedGraph Assembly : ZedGraph.WinForms.dll Syntax public delegate string PointValueHandler(ZedGraphControl sender, GraphPane pane, CurveItem curve, int iPt); Parameters Type Name Description ZedGraphControl sender The source ZedGraphControl object GraphPane pane The GraphPane object that contains the point value of interest CurveItem curve The CurveItem object that contains the point value of interest Int32 iPt The integer index of the selected PointPair within the IPointList of the selected CurveItem Returns Type Description String See Also PointValueEvent"
  },
  "api/ZedGraph.ZedGraphControl.ScrollDoneHandler.html": {
    "href": "api/ZedGraph.ZedGraphControl.ScrollDoneHandler.html",
    "title": "Delegate ZedGraphControl.ScrollDoneHandler",
    "keywords": "Delegate ZedGraphControl.ScrollDoneHandler A delegate that allows notification of scroll events. Namespace : ZedGraph Assembly : ZedGraph.WinForms.dll Syntax public delegate void ScrollDoneHandler(ZedGraphControl sender, ScrollBar scrollBar, ZoomState oldState, ZoomState newState); Parameters Type Name Description ZedGraphControl sender The source ZedGraphControl object ScrollBar scrollBar The source ScrollBar object ZoomState oldState A ZoomState object that corresponds to the state of the GraphPane before the scroll event. ZoomState newState A ZoomState object that corresponds to the state of the GraphPane after the scroll event See Also ZoomEvent"
  },
  "api/ZedGraph.ZedGraphControl.ScrollProgressHandler.html": {
    "href": "api/ZedGraph.ZedGraphControl.ScrollProgressHandler.html",
    "title": "Delegate ZedGraphControl.ScrollProgressHandler",
    "keywords": "Delegate ZedGraphControl.ScrollProgressHandler A delegate that allows notification of scroll events. Namespace : ZedGraph Assembly : ZedGraph.WinForms.dll Syntax public delegate void ScrollProgressHandler(ZedGraphControl sender, ScrollBar scrollBar, ZoomState oldState, ZoomState newState); Parameters Type Name Description ZedGraphControl sender The source ZedGraphControl object ScrollBar scrollBar The source ScrollBar object ZoomState oldState A ZoomState object that corresponds to the state of the GraphPane before the scroll event. ZoomState newState A ZoomState object that corresponds to the state of the GraphPane after the scroll event See Also ZoomEvent"
  },
  "api/ZedGraph.ZedGraphControl.ZedMouseEventHandler.html": {
    "href": "api/ZedGraph.ZedGraphControl.ZedMouseEventHandler.html",
    "title": "Delegate ZedGraphControl.ZedMouseEventHandler",
    "keywords": "Delegate ZedGraphControl.ZedMouseEventHandler A delegate that allows notification of mouse events on Graph objects. Namespace : ZedGraph Assembly : ZedGraph.WinForms.dll Syntax public delegate bool ZedMouseEventHandler(ZedGraphControl sender, MouseEventArgs e); Parameters Type Name Description ZedGraphControl sender The source ZedGraphControl object MouseEventArgs e A MouseEventArgs corresponding to this event Returns Type Description Boolean Return true if you have handled the mouse event entirely, and you do not want the ZedGraphControl to do any further action (e.g., starting a zoom operation). Return false if ZedGraph should go ahead and process the mouse event. See Also MouseDownEvent"
  },
  "api/ZedGraph.ZedGraphControl.ZoomEventHandler.html": {
    "href": "api/ZedGraph.ZedGraphControl.ZoomEventHandler.html",
    "title": "Delegate ZedGraphControl.ZoomEventHandler",
    "keywords": "Delegate ZedGraphControl.ZoomEventHandler A delegate that allows notification of zoom and pan events. Namespace : ZedGraph Assembly : ZedGraph.WinForms.dll Syntax public delegate void ZoomEventHandler(ZedGraphControl sender, ZoomState oldState, ZoomState newState); Parameters Type Name Description ZedGraphControl sender The source ZedGraphControl object ZoomState oldState A ZoomState object that corresponds to the state of the GraphPane before the zoom or pan event. ZoomState newState A ZoomState object that corresponds to the state of the GraphPane after the zoom or pan event See Also ZoomEvent"
  },
  "api/ZedGraph.ZedGraphException.html": {
    "href": "api/ZedGraph.ZedGraphException.html",
    "title": "Class ZedGraphException",
    "keywords": "Class ZedGraphException An exception thrown by ZedGraph. A child class of ApplicationException . Inheritance Object Exception ApplicationException ZedGraphException Implements _Exception ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public class ZedGraphException : ApplicationException, _Exception, ISerializable Constructors | Improve this Doc View Source ZedGraphException() Initializes a new instance of the Exception class. Declaration public ZedGraphException() | Improve this Doc View Source ZedGraphException(SerializationInfo, StreamingContext) Initializes a new instance of the ZedGraphException class with serialized data. Declaration protected ZedGraphException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo instance that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext instance that contains contextual information about the source or destination. | Improve this Doc View Source ZedGraphException(String) Initializes a new instance of the Exception class with a specified error message. Declaration public ZedGraphException(string message) Parameters Type Name Description String message The error message that explains the reason for the exception. | Improve this Doc View Source ZedGraphException(String, Exception) Initializes a new instance of the Exception class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public ZedGraphException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. Implements System.Runtime.InteropServices._Exception System.Runtime.Serialization.ISerializable"
  },
  "api/ZedGraph.ZoomState.html": {
    "href": "api/ZedGraph.ZoomState.html",
    "title": "Class ZoomState",
    "keywords": "Class ZoomState A class that captures all the scale range settings for a GraphPane . Inheritance Object ZoomState Implements ICloneable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public class ZoomState : ICloneable Remarks This class is used to store scale ranges in order to allow zooming out to prior scale range states. ZoomState objects are maintained in the ZoomStateStack collection. The ZoomState object holds a ScaleState object for each of the three axes; the XAxis , the YAxis , and the Y2Axis . Constructors | Improve this Doc View Source ZoomState(GraphPane, ZoomState.StateType) Construct a ZoomState object from the scale ranges settings contained in the specified GraphPane . Declaration public ZoomState(GraphPane pane, ZoomState.StateType type) Parameters Type Name Description GraphPane pane The GraphPane from which to obtain the scale range values. ZoomState.StateType type A ZoomState.StateType enumeration that indicates whether this saved state is from a pan or zoom. | Improve this Doc View Source ZoomState(ZoomState) The Copy Constructor Declaration public ZoomState(ZoomState rhs) Parameters Type Name Description ZoomState rhs The ZoomState object from which to copy Properties | Improve this Doc View Source Type Gets a ZoomState.StateType value indicating the type of action (zoom or pan) saved by this ZoomState . Declaration public ZoomState.StateType Type { get; } Property Value Type Description ZoomState.StateType | Improve this Doc View Source TypeString Gets a string representing the type of adjustment that was made when this scale state was saved. Declaration public string TypeString { get; } Property Value Type Description String A string representation for the state change type; typically \"Pan\", \"Zoom\", or \"Scroll\". Methods | Improve this Doc View Source ApplyState(GraphPane) Copy the properties from this ZoomState out to the specified GraphPane . Declaration public void ApplyState(GraphPane pane) Parameters Type Name Description GraphPane pane The GraphPane to which the scale range properties should be copied. | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public ZoomState Clone() Returns Type Description ZoomState A new, independent copy of this class | Improve this Doc View Source IsChanged(GraphPane) Determine if the state contained in this ZoomState object is different from the state of the specified GraphPane . Declaration public bool IsChanged(GraphPane pane) Parameters Type Name Description GraphPane pane The GraphPane object with which to compare states. Returns Type Description Boolean true if the states are different, false otherwise Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.ICloneable"
  },
  "api/ZedGraph.ZoomState.StateType.html": {
    "href": "api/ZedGraph.ZoomState.StateType.html",
    "title": "Enum ZoomState.StateType",
    "keywords": "Enum ZoomState.StateType An enumeration that describes whether a given state is the result of a Pan or Zoom operation. Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public enum StateType Fields Name Description Pan Indicates the ZoomState object is from a Pan operation Scroll Indicates the ZoomState object is from a Scroll operation WheelZoom Indicates the ZoomState object is from a Wheel Zoom operation Zoom Indicates the ZoomState object is from a Zoom operation"
  },
  "api/ZedGraph.ZoomStateStack.html": {
    "href": "api/ZedGraph.ZoomStateStack.html",
    "title": "Class ZoomStateStack",
    "keywords": "Class ZoomStateStack A LIFO stack of prior ZoomState objects, used to allow zooming out to prior states (of scale range settings). Inheritance Object List < ZoomState > ZoomStateStack Implements IList < ZoomState > ICollection < ZoomState > IEnumerable < ZoomState > IList ICollection IEnumerable ICloneable Inherited Members System.Collections.Generic.List<ZedGraph.ZoomState>.System.Collections.IList.get_Item(System.Int32) System.Collections.Generic.List<ZedGraph.ZoomState>.System.Collections.IList.set_Item(System.Int32, System.Object) List<ZoomState>.Add(ZoomState) List<ZoomState>.AddRange(IEnumerable<ZoomState>) List<ZoomState>.AsReadOnly() List<ZoomState>.BinarySearch(Int32, Int32, ZoomState, IComparer<ZoomState>) List<ZoomState>.BinarySearch(ZoomState) List<ZoomState>.BinarySearch(ZoomState, IComparer<ZoomState>) List<ZoomState>.Clear() List<ZoomState>.Contains(ZoomState) List<ZoomState>.ConvertAll<TOutput>(Converter<ZoomState, TOutput>) List<ZoomState>.CopyTo(Int32, ZoomState[], Int32, Int32) List<ZoomState>.CopyTo(ZoomState[]) List<ZoomState>.CopyTo(ZoomState[], Int32) List<ZoomState>.Exists(Predicate<ZoomState>) List<ZoomState>.Find(Predicate<ZoomState>) List<ZoomState>.FindAll(Predicate<ZoomState>) List<ZoomState>.FindIndex(Int32, Int32, Predicate<ZoomState>) List<ZoomState>.FindIndex(Int32, Predicate<ZoomState>) List<ZoomState>.FindIndex(Predicate<ZoomState>) List<ZoomState>.FindLast(Predicate<ZoomState>) List<ZoomState>.FindLastIndex(Int32, Int32, Predicate<ZoomState>) List<ZoomState>.FindLastIndex(Int32, Predicate<ZoomState>) List<ZoomState>.FindLastIndex(Predicate<ZoomState>) List<ZoomState>.ForEach(Action<ZoomState>) List<ZoomState>.GetEnumerator() List<ZoomState>.GetRange(Int32, Int32) List<ZoomState>.IndexOf(ZoomState) List<ZoomState>.IndexOf(ZoomState, Int32) List<ZoomState>.IndexOf(ZoomState, Int32, Int32) List<ZoomState>.Insert(Int32, ZoomState) List<ZoomState>.InsertRange(Int32, IEnumerable<ZoomState>) List<ZoomState>.LastIndexOf(ZoomState) List<ZoomState>.LastIndexOf(ZoomState, Int32) List<ZoomState>.LastIndexOf(ZoomState, Int32, Int32) List<ZoomState>.Remove(ZoomState) List<ZoomState>.RemoveAll(Predicate<ZoomState>) List<ZoomState>.RemoveAt(Int32) List<ZoomState>.RemoveRange(Int32, Int32) List<ZoomState>.Reverse() List<ZoomState>.Reverse(Int32, Int32) List<ZoomState>.Sort() List<ZoomState>.Sort(IComparer<ZoomState>) List<ZoomState>.Sort(Comparison<ZoomState>) List<ZoomState>.Sort(Int32, Int32, IComparer<ZoomState>) List<ZoomState>.IEnumerable<ZoomState>.GetEnumerator() List<ZoomState>.ICollection.CopyTo(Array, Int32) List<ZoomState>.IEnumerable.GetEnumerator() List<ZoomState>.IList.Add(Object) List<ZoomState>.IList.Contains(Object) List<ZoomState>.IList.IndexOf(Object) List<ZoomState>.IList.Insert(Int32, Object) List<ZoomState>.IList.Remove(Object) List<ZoomState>.ToArray() List<ZoomState>.TrimExcess() List<ZoomState>.TrueForAll(Predicate<ZoomState>) List<ZoomState>.Capacity List<ZoomState>.Count List<ZoomState>.Item[Int32] List<ZoomState>.ICollection<ZoomState>.IsReadOnly List<ZoomState>.ICollection.IsSynchronized List<ZoomState>.ICollection.SyncRoot List<ZoomState>.IList.IsFixedSize List<ZoomState>.IList.IsReadOnly List<ZoomState>.IList.Item[Int32] Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public class ZoomStateStack : List<ZoomState>, IList<ZoomState>, ICollection<ZoomState>, IEnumerable<ZoomState>, IList, ICollection, IEnumerable, ICloneable Constructors | Improve this Doc View Source ZoomStateStack() Default Constructor Declaration public ZoomStateStack() | Improve this Doc View Source ZoomStateStack(ZoomStateStack) The Copy Constructor Declaration public ZoomStateStack(ZoomStateStack rhs) Parameters Type Name Description ZoomStateStack rhs The ZoomStateStack object from which to copy Properties | Improve this Doc View Source IsEmpty Public readonly property that indicates if the stack is empty Declaration public bool IsEmpty { get; } Property Value Type Description Boolean true for an empty stack, false otherwise | Improve this Doc View Source Top Gets a reference to the ZoomState object at the top of the stack, without actually removing it from the stack. Declaration public ZoomState Top { get; } Property Value Type Description ZoomState A ZoomState object reference, or null if the stack is empty. Methods | Improve this Doc View Source Clone() Typesafe, deep-copy clone method. Declaration public ZoomStateStack Clone() Returns Type Description ZoomStateStack A new, independent copy of this class | Improve this Doc View Source Pop(GraphPane) Pop a ZoomState entry from the top of the stack, and apply the properties to the specified GraphPane object. Declaration public ZoomState Pop(GraphPane pane) Parameters Type Name Description GraphPane pane The GraphPane object to which the scale range information should be copied. Returns Type Description ZoomState The ZoomState object that was \"popped\" from the stack and applied to the specified GraphPane . null if no ZoomState was available (the stack was empty). | Improve this Doc View Source PopAll(GraphPane) Pop the ZoomState entry from the bottom of the stack, and apply the properties to the specified GraphPane object. Clear the stack completely. Declaration public ZoomState PopAll(GraphPane pane) Parameters Type Name Description GraphPane pane The GraphPane object to which the scale range information should be copied. Returns Type Description ZoomState The ZoomState object at the bottom of the stack that was applied to the specified GraphPane . null if no ZoomState was available (the stack was empty). | Improve this Doc View Source Push(GraphPane, ZoomState.StateType) Add the scale range information from the specified GraphPane object as a new ZoomState entry on the stack. Declaration public ZoomState Push(GraphPane pane, ZoomState.StateType type) Parameters Type Name Description GraphPane pane The GraphPane object from which the scale range information should be copied. ZoomState.StateType type A ZoomState.StateType enumeration that indicates whether this state is the result of a zoom or pan operation. Returns Type Description ZoomState The resultant ZoomState object that was pushed on the stack. | Improve this Doc View Source Push(ZoomState) Add the scale range information from the specified ZoomState object as a new ZoomState entry on the stack. Declaration public ZoomState Push(ZoomState state) Parameters Type Name Description ZoomState state The ZoomState object to be placed on the stack. Returns Type Description ZoomState The ZoomState object (same as the parameter). Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Implement the ICloneable interface in a typesafe manner by just calling the typed version of Clone() Declaration object ICloneable.Clone() Returns Type Description Object A deep copy of this object Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable System.ICloneable"
  },
  "api/ZedGraph.ZOrder.html": {
    "href": "api/ZedGraph.ZOrder.html",
    "title": "Enum ZOrder",
    "keywords": "Enum ZOrder Enumeration that specifies a Z-Order position for GraphObj objects. Namespace : ZedGraph Assembly : ZedGraph.dll Syntax public enum ZOrder Remarks This enumeration allows you to set the layering of various graph features. Except for the GraphObj objects, other feature types all have a fixed depth as follows (front to back): You cannot place anything behind the Rect background fill, but ZOrder allows you to explicitly control the depth of GraphObj objects between all other object types. For items of equal ZOrder , such as multiple CurveItem 's or GraphObj 's having the same ZOrder value, the relative depth is controlled by the ordinal position in the list (either CurveList or GraphObjList ). GraphObj objects can be placed in the GraphObjList of either a GraphPane or a MasterPane . For a GraphPane -based GraphObj , all ZOrder values are applicable. For a MasterPane -based GraphObj , any ZOrder value can be used, but there are really only three depths: Fields Name Description A_InFront Specifies that the GraphObj will be in front of all other objects, except for the other GraphObj objects that have the same ZOrder and are before this object in the GraphObjList . B_BehindLegend Specifies that the GraphObj will be behind the Legend object. C_BehindChartBorder Specifies that the GraphObj will be behind the Chart border. D_BehindAxis Specifies that the GraphObj will be behind the Axis objects. E_BehindCurves Specifies that the GraphObj will be behind the CurveItem objects. F_BehindGrid Specifies that the GraphObj will be behind the grid lines. G_BehindChartFill Specifies that the GraphObj will be behind the Rect background Fill (see Fill ). H_BehindAll Specifies that the GraphObj will be behind all other objects (including the PaneBase Title )."
  },
  "index.html": {
    "href": "index.html",
    "title": "ZedGraph",
    "keywords": "ZedGraph The charting library for .NET created by John Champion forked from https://sourceforge.net/projects/zedgraph/ ZedGraph is a class library, user control, and web control for .net, written in C#, for drawing 2D Line, Bar, and Pie Charts. It features full, detailed customization capabilities, but most options have defaults for ease of use. Download ZedGraph is available via NuGet: ZedGraph ZedGraph.WinForms"
  }
}